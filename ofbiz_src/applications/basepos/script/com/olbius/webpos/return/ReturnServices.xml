<?xml version="1.0" encoding="UTF-8" ?>


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
	<simple-method method-name="createReturnItem"
		short-description="Create Return Item">
		<set field="lookupPKMap.returnId" from-field="parameters.returnId" />
		<find-by-primary-key entity-name="ReturnHeader"
			map="lookupPKMap" value-field="returnHeader" />

		<if>
			<condition>
				<and>
					<not>
						<if-has-permission permission="ORDERMGR" action="_CREATE" />
					</not>
					<not>
						<if-compare-field field="userLogin.partyId"
							to-field="returnHeader.fromPartyId" operator="equals" />
					</not>
				</and>
			</condition>
			<then>
				<add-error>
					<fail-property resource="OrderErrorUiLabels"
						property="OrderSecurityErrorToRunCreateReturnItem" />
				</add-error>
			</then>
		</if>
		<check-errors />

		<if-empty field="parameters.returnItemTypeId">
			<add-error>
				<fail-property resource="OrderErrorUiLabels"
					property="OrderReturnItemTypeIsNotDefined" />
			</add-error>
			<check-errors />
		</if-empty>

		<if>
			<condition>
				<and>
					<if-empty field="returnHeader.paymentMethodId" />
					<if-compare field="returnHeader.statusId" operator="equals"
						value="RETURN_ACCEPTED" />
					<or>
						<if-compare field="parameters.returnTypeId" operator="equals"
							value="RTN_CSREPLACE" />
						<if-compare field="parameters.returnTypeId" operator="equals"
							value="RTN_REPAIR_REPLACE" />
					</or>
				</and>
			</condition>
			<then>
				<add-error>
					<fail-property resource="OrderErrorUiLabels"
						property="OrderReturnPaymentMethodNeededForThisTypeOfReturn" />
				</add-error>
			</then>
		</if>
		<check-errors />

		<if-compare field="parameters.returnQuantity" operator="equals"
			value="0" type="BigDecimal">
			<add-error>
				<fail-property resource="OrderErrorUiLabels"
					property="OrderNoReturnQuantityAvailablePreviousReturnsMayExist" />
			</add-error>
			<check-errors />
		</if-compare>

		<make-value value-field="newEntity" entity-name="ReturnItem" />
		<set from-field="parameters.returnId" field="newEntity.returnId" />
		<make-next-seq-id seq-field-name="returnItemSeqId"
			value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<set field="newEntity.statusId" value="RETURN_REQUESTED" /> <!-- default status for new return items -->
		<field-to-result field="newEntity.returnItemSeqId"
			result-name="returnItemSeqId" />
		<create-value value-field="newEntity" />
		<refresh-value value-field="newEntity" />

		<if>
			<condition>
				<or>
					<if-empty field="parameters.includeAdjustments" />
					<if-compare field="parameters.includeAdjustments"
						operator="equals" value="Y" />
				</or>
			</condition>
			<then>
				<!-- create return adjustments for all adjustments associated with the 
					order item -->
				<if-not-empty field="orderItem">
					<get-related value-field="orderItem" relation-name="OrderAdjustment"
						list="orderAdjustments" />
					<iterate entry="orderAdjustment" list="orderAdjustments">
						<clear-field field="returnAdjCtx" />
						<set field="returnAdjCtx.returnId" from-field="parameters.returnId" />
						<set field="returnAdjCtx.returnItemSeqId" from-field="newEntity.returnItemSeqId" />
						<set field="returnAdjCtx.returnTypeId" from-field="newEntity.returnTypeId" />
						<set field="returnAdjCtx.orderAdjustmentId" from-field="orderAdjustment.orderAdjustmentId" />
						<set field="returnAdjCtx.amount" from-field="orderAdjustment.amount" />
						<call-service service-name="createReturnAdjustment"
							in-map-name="returnAdjCtx" />
					</iterate>
				</if-not-empty>
			</then>
		</if>

	</simple-method>
    <simple-method method-name="createReturnItemBySalesman"
                   short-description="Create Return Item">
        <set field="lookupPKMap.returnId" from-field="parameters.returnId" />
        <find-by-primary-key entity-name="ReturnHeader"
                             map="lookupPKMap" value-field="returnHeader" />

        <!--<if>
            <condition>
                <and>
                    <not>
                        <if-has-permission permission="ORDERMGR" action="_CREATE" />
                    </not>
                    <not>
                        <if-compare-field field="userLogin.partyId"
                                          to-field="returnHeader.fromPartyId" operator="equals" />
                    </not>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="OrderErrorUiLabels"
                                   property="OrderSecurityErrorToRunCreateReturnItem" />
                </add-error>
            </then>
        </if>
        <check-errors />-->

        <if-empty field="parameters.returnItemTypeId">
            <add-error>
                <fail-property resource="OrderErrorUiLabels"
                               property="OrderReturnItemTypeIsNotDefined" />
            </add-error>
            <check-errors />
        </if-empty>

        <if>
            <condition>
                <and>
                    <if-empty field="returnHeader.paymentMethodId" />
                    <if-compare field="returnHeader.statusId" operator="equals"
                                value="RETURN_ACCEPTED" />
                    <or>
                        <if-compare field="parameters.returnTypeId" operator="equals"
                                    value="RTN_CSREPLACE" />
                        <if-compare field="parameters.returnTypeId" operator="equals"
                                    value="RTN_REPAIR_REPLACE" />
                    </or>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="OrderErrorUiLabels"
                                   property="OrderReturnPaymentMethodNeededForThisTypeOfReturn" />
                </add-error>
            </then>
        </if>
        <check-errors />

        <if-compare field="parameters.returnQuantity" operator="equals"
                    value="0" type="BigDecimal">
            <add-error>
                <fail-property resource="OrderErrorUiLabels"
                               property="OrderNoReturnQuantityAvailablePreviousReturnsMayExist" />
            </add-error>
            <check-errors />
        </if-compare>

        <make-value value-field="newEntity" entity-name="ReturnItem" />
        <set from-field="parameters.returnId" field="newEntity.returnId" />
        <make-next-seq-id seq-field-name="returnItemSeqId"
                          value-field="newEntity" />
        <set-nonpk-fields map="parameters" value-field="newEntity" />
        <set field="newEntity.statusId" value="RETURN_REQUESTED" /> <!-- default status for new return items -->
        <field-to-result field="newEntity.returnItemSeqId"
                         result-name="returnItemSeqId" />
        <create-value value-field="newEntity" />
        <refresh-value value-field="newEntity" />

        <if>
            <condition>
                <or>
                    <if-empty field="parameters.includeAdjustments" />
                    <if-compare field="parameters.includeAdjustments"
                                operator="equals" value="Y" />
                </or>
            </condition>
            <then>
                <!-- create return adjustments for all adjustments associated with the
                    order item -->
                <if-not-empty field="orderItem">
                    <get-related value-field="orderItem" relation-name="OrderAdjustment"
                                 list="orderAdjustments" />
                    <iterate entry="orderAdjustment" list="orderAdjustments">
                        <clear-field field="returnAdjCtx" />
                        <set field="returnAdjCtx.returnId" from-field="parameters.returnId" />
                        <set field="returnAdjCtx.returnItemSeqId" from-field="newEntity.returnItemSeqId" />
                        <set field="returnAdjCtx.returnTypeId" from-field="newEntity.returnTypeId" />
                        <set field="returnAdjCtx.orderAdjustmentId" from-field="orderAdjustment.orderAdjustmentId" />
                        <set field="returnAdjCtx.amount" from-field="orderAdjustment.amount" />
                        <call-service service-name="createReturnAdjustment"
                                      in-map-name="returnAdjCtx" />
                    </iterate>
                </if-not-empty>
            </then>
        </if>

    </simple-method>
	<simple-method method-name="quickReceiveReturnDirectly" short-description="Quick Receive Entire Return">
        <entity-one entity-name="ReturnHeader" value-field="returnHeader">
            <field-map field-name="returnId" from-field="parameters.returnId"/>
        </entity-one>
        <if-compare field="returnHeader.needsInventoryReceive" operator="equals" value="Y">
            <!-- before receiving inventory, check to see if there is inventory information in this database -->
            <entity-count entity-name="InventoryItem" count-field="iiCount">
                <condition-expr field-name="facilityId" operator="equals" from-field="returnHeader.destinationFacilityId"/>
            </entity-count>
            <set field="facilityId" from-field="returnHeader.destinationFacilityId"/>
			<entity-one value-field="facility" entity-name="Facility" > 
				<field-map field-name="facilityId" from-field="facilityId"/>
			</entity-one>
			<set field="ownerPartyId" from-field="facility.ownerPartyId"/>
            <if-compare field="iiCount" operator="greater" value="0" type="Integer">
                <!-- create a return shipment for this return -->
                <set field="shipmentCtx.returnId" from-field="parameters.returnId"/>
                <call-service service-name="createShipmentForReturn" in-map-name="shipmentCtx">
                    <result-to-field result-name="shipmentId"/>
                </call-service>
                <log level="info" message="Created new shipment ${shipmentId}"/>

                <entity-condition entity-name="ReturnItem" list="returnItems">
                    <condition-expr field-name="returnId" operator="equals" from-field="returnHeader.returnId"/>
                </entity-condition>

                <!-- if no inventory item type specified, get default from facility -->
                <if-empty field="parameters.inventoryItemTypeId">
                    <get-related-one value-field="returnHeader" relation-name="Facility" to-value-field="facility"/>
                    <set field="parameters.inventoryItemTypeId" from-field="facility.defaultInventoryItemTypeId" default-value="NON_SERIAL_INV_ITEM"/>
                </if-empty>

                <now-timestamp field="nowTimestamp"/>

                <entity-count entity-name="ReturnItem" count-field="returnItemCount">
                    <condition-expr field-name="returnId" operator="equals" from-field="returnHeader.returnId"/>
                </entity-count>
                <set field="nonProductItems" type="Long" value="0"/>
                <iterate entry="returnItem" list="returnItems">
                    <!-- record this return item on the return shipment as well.  not sure if this is actually necessary... -->
                    <clear-field field="shipItemCtx"/>
                    <set from-field="shipmentId" field="shipItemCtx.shipmentId"/>
                    <set from-field="returnItem.productId" field="shipItemCtx.productId"/>
                    
                    <if-not-empty field="returnItem.quantityUomId">
                    	<set from-field="returnItem.quantityUomId" field="shipItemCtx.quantityUomId"/>
                    </if-not-empty>
                    
                    <set from-field="returnItem.returnQuantity" field="shipItemCtx.quantity"/>	
                    <log level="info" message="calling create shipment item with ${shipItemCtx}"/>
                    <call-service service-name="createShipmentItem" in-map-name="shipItemCtx">
                        <result-to-field result-name="shipmentItemSeqId"/>
                    </call-service>
                </iterate>
                <iterate entry="returnItem" list="returnItems">
                    <clear-field field="receiveCtx"/>

                    <if-empty field="returnItem.expectedItemStatus">
                        <set value="INV_RETURNED" field="returnItem.expectedItemStatus" type="String"/>
                    </if-empty>
                    <set field="quantityUomId" from-field="returnItem.quantityUomId"/>
                    <if-not-empty field="returnItem.productId">
                        <set field="costCtx.productId" from-field="returnItem.productId"/>
                        <set field="costCtx.facilityId" from-field="facilityId"/>
                        <set field="costCtx.ownerPartyId" from-field="ownerPartyId"/>
                        <call-service service-name="getProductAverageCostSimple" in-map-name="costCtx">
                        	<result-to-field result-name="unitCost" field="receiveCtx.unitCost"/>
                        </call-service>
                        <entity-one value-field="product" entity-name="Product">
                        	<field-map field-name="productId" from-field="returnItem.productId"/>
                        </entity-one>
                        <!--check if the items already have SERIALIZED inventory. If so, it still puts them back as SERIALIZED with status "Accepted."-->
                        <entity-count entity-name="InventoryItem" count-field="serializedItemCount">
                            <condition-list combine="and">
                                <condition-expr field-name="productId" operator="equals" from-field="returnItem.productId"/>
                                <condition-expr field-name="facilityId" operator="equals" from-field="returnHeader.destinationFacilityId"/>
                                <condition-expr field-name="inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM"/>
                            </condition-list>
                        </entity-count>                        
                        <set field="setNonSerial" value="false"/>
                        <if-compare field="parameters.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM" operator="equals">
                            <if-compare field="serializedItemCount" value="0" operator="equals">
                                <set field="parameters.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
                                <set field="setNonSerial" value="true"/>
                            </if-compare>
                        </if-compare>
                        <if-compare field="setNonSerial" value="false" operator="equals">
                            <set field="parameters.inventoryItemTypeId" value="SERIALIZED_INV_ITEM"/>
                            <set field="returnItem.returnQuantity" value="1" type="BigDecimal"/>
                        </if-compare>
						
                        <set from-field="parameters.inventoryItemTypeId" field="receiveCtx.inventoryItemTypeId"/>
                        <set from-field="returnItem.expectedItemStatus" field="receiveCtx.statusId"/>
                        <set from-field="returnItem.productId" field="receiveCtx.productId"/>
                        <set from-field="returnItem.returnItemSeqId" field="receiveCtx.returnItemSeqId"/>
                        <set from-field="returnItem.returnId" field="receiveCtx.returnId"/>
                        <if-not-empty field="quantityUomId">
                        	<set field="basicUomId" from-field="product.quantityUomId"/>
                        	<call-class-method method-name="customConvertUom" class-name="org.ofbiz.common.uom.UomWorker"
                        		 ret-field="quantityAccepted">
                        		<field field="returnItem.productId" type="String"/>
                        		<field field="quantityUomId" type="String"/>
                        		<field field="basicUomId" type="String"/>
                        		<field field="returnItem.returnQuantity" type="BigDecimal"/>
                        		<field field="delegator" type="org.ofbiz.entity.Delegator"/>     
                        	</call-class-method>
                        	<check-errors/>
                        	<set from-field="quantityAccepted" field="receiveCtx.quantityAccepted"/>
                        <else>
                        	<set from-field="returnItem.returnQuantity" field="receiveCtx.quantityAccepted"/>
                        </else>	
                        </if-not-empty>
                        <set from-field="returnHeader.destinationFacilityId" field="receiveCtx.facilityId"/>
                        
                        <!-- important: associate ShipmentReceipt with return shipment created -->
                        <set field="receiveCtx.shipmentId" from-field="shipmentId"/>

                        <set field="receiveCtx.comments" value="Returned Item RA# ${returnItem.returnId}"/>
                        <set field="receiveCtx.datetimeReceived" from-field="nowTimestamp"/>
                        <set field="receiveCtx.quantityRejected" value="0" type="BigDecimal"/>
                        <call-service service-name="receiveInventoryProduct" in-map-name="receiveCtx"/>
                    <else>
                        <calculate field="nonProductItems" type="Long">
                            <calcop operator="add">
                                <number value="1"/>
                            </calcop>
                        </calculate>
                    </else>
                    
                    
                    </if-not-empty>
                </iterate>
                <!-- now that the receive is done; set the need flag to N -->
                <refresh-value value-field="returnHeader"/>
                <set field="returnHeader.needsInventoryReceive" value="N"/>
                <store-value value-field="returnHeader"/>
                <!-- always check/update the ReturnHeader status, even though it might have been from the receiving above, just make sure -->
                <if-compare field="returnHeader.statusId" operator="not-equals" value="RETURN_RECEIVED">
                    <set field="retStCtx.returnId" from-field="returnHeader.returnId"/>
                    <set field="retStCtx.statusId" value="RETURN_RECEIVED"/>
                    <call-service service-name="updateReturnHeaderDirectly" in-map-name="retStCtx"/>
                </if-compare>
            <else>
                <log level="info" message="Not receiving inventory for returnId ${returnHeader.returnId}, no inventory information available."/>
            </else>
            </if-compare>
        </if-compare>
    </simple-method>
    <simple-method method-name="processRefundImmediatelyReturn" short-description="Process the Immediate refund in a return">
        <set field="inMap.returnId" from-field="parameters.returnId"/>
        <set field="inMap.returnTypeId" value="RTN_REFUND_IMMEDIATE"/>
        <call-service service-name="processRefundReturnDirectly" in-map-name="inMap"/>
    </simple-method> 
    <simple-method method-name="processRefundOnlyReturn" short-description="Process the refund in a return">
        <set field="inMap.returnId" from-field="parameters.returnId"/>
        <set field="inMap.returnTypeId" value="RTN_REFUND"/>
        <call-service service-name="processRefundReturnDirectly" in-map-name="inMap"/>
    </simple-method> 
</simple-methods>        