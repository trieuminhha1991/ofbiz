<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <!-- ========= GlAccount methods ========= -->
    <simple-method method-name="createGlAccount" short-description="Create an GlAccount">
        <make-value entity-name="GlAccount" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <!-- GlAccount uses a sequenced id, so get the next one now and set it... -->
        <if-empty field="parameters.glAccountId">
            <sequenced-id sequence-name="GlAccount" field="newEntity.glAccountId"/>
        <else>
            <set-pk-fields map="parameters" value-field="newEntity"/>
        </else>
        </if-empty>
        <field-to-result field="newEntity.glAccountId" result-name="glAccountId"/>

        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateGlAccount" short-description="Update an GlAccount">
        <make-value entity-name="GlAccount" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteGlAccount" short-description="Delete an GlAccount">
        <make-value entity-name="GlAccount" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ========= GlAccountOrganization methods ========= -->
    <simple-method method-name="createGlAccountOrganization" short-description="Create GlAccountOrganization">
        <!--nhattm add error message-->
        <entity-one value-field="dummyGlAccountOrganization" entity-name="GlAccountOrganization">
            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
        <if-not-empty field="dummyGlAccountOrganization">
            <add-error>
                <fail-property resource="AccountingErrorUiLabels" property="AccountingErrorCreateGlAccountOrganization" />
            </add-error>
            <check-errors/>
        </if-not-empty>

        <make-value entity-name="GlAccountOrganization" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="nowTimestamp"/>
            <set from-field="nowTimestamp" field="newEntity.fromDate"/>
        </if-empty>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateGlAccountOrganization" short-description="Update GlAccountOrganization">
        <make-value entity-name="GlAccountOrganization" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>

        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteGlAccountOrganization" short-description="Delete GlAccountOrganization">
        <make-value entity-name="GlAccountOrganization" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ========= GlJournal methods ========= -->
    <simple-method method-name="quickCreateAcctgTransAndEntries" short-description="Creates an AcctgTrans and two offsetting AcctgTransEntry records">
        <!-- TODO: Do we need to create a GlJournal record here? -->

        <!-- first, create the AcctgTrans -->
        <set-service-fields service-name="createAcctgTrans" to-map="createAcctgTransParams" map="parameters"/>
        <if-empty field="createAcctgTransParams.transactionDate">
            <now-timestamp field="createAcctgTransParams.transactionDate"/>
        </if-empty>
        <call-service service-name="createAcctgTrans" in-map-name="createAcctgTransParams">
            <result-to-field result-name="acctgTransId"/>
        </call-service>

        <!-- TODO: if someday there are more than one type of acctgTransEntryTypeId (other than _NA_, we should get rid of the lines below
            that fix those values -->
        <!-- now, create the debit AcctgTransEntry -->
        <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
        <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
        <set field="createAcctgTransEntryParams.glAccountId" from-field="parameters.debitGlAccountId"/>
        <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
        <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
        <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>

        <!-- now the credit AcctgTransEntry -->
        <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
        <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
        <set field="createAcctgTransEntryParams.glAccountId" from-field="parameters.creditGlAccountId"/>
        <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
        <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
        <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>

        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createGlJournal" short-description="Create an GlJournal">
        <make-value entity-name="GlJournal" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <!-- GlJournal uses a sequenced id, so get the next one now and set it... -->
        <sequenced-id sequence-name="GlJournal" field="newEntity.glJournalId"/>
        <field-to-result field="newEntity.glJournalId" result-name="glJournalId"/>

        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateGlJournal" short-description="Update an GlJournal">
        <entity-one entity-name="GlJournal" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteGlJournal" short-description="Delete an GlJournal">
        <entity-one entity-name="GlJournal" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- GlJournal Trial Balance and Post routines -->
    <simple-method method-name="calculateGlJournalTrialBalance" short-description="Calculate Trial Balance for a GlJournal">
        <!-- iterate through all AcctgTrans in this journal and that are not yet posted, and get totals of all debits and of all credits -->
        <entity-condition entity-name="AcctgTrans" list="acctgTransList">
            <condition-list combine="and">
                <condition-expr field-name="glJournalId" from-field="parameters.glJournalId"/>
                <condition-expr field-name="isPosted" operator="not-equals" value="Y"/>
            </condition-list>
        </entity-condition>

        <iterate entry="acctgTrans" list="acctgTransList">
            <clear-field field="callServiceMap"/>
            <clear-field field="serviceResults"/>
            <set from-field="acctgTrans.acctgTransId" field="callServiceMap.acctgTransId"/>
            <call-service service-name="calculateAcctgTransTrialBalance" in-map-name="callServiceMap">
                <results-to-map map-name="serviceResults"/>
            </call-service>
            <calculate field="debitTotal">
                <calcop operator="get" field="debitTotal"/>
                <calcop operator="get" field="serviceResults.debitTotal"/>
            </calculate>
            <calculate field="creditTotal">
                <calcop operator="get" field="creditTotal"/>
                <calcop operator="get" field="serviceResults.creditTotal"/>
            </calculate>
            <calculate field="debitCreditDifference">
                <calcop operator="get" field="debitCreditDifference"/>
                <calcop operator="get" field="serviceResults.debitCreditDifference"/>
            </calculate>
        </iterate>

        <field-to-result field="debitTotal"/>
        <field-to-result field="creditTotal"/>
        <field-to-result field="debitCreditDifference"/>
    </simple-method>

    <simple-method method-name="postGlJournal" short-description="Post a GlJournal">
        <!-- first calculate the trial balance for the journal and make sure debits and credits match -->
        <set from-field="parameters.glJournalId" field="trialBalanceCallMap.glJournalId"/>
        <call-service service-name="calculateGlJournalTrialBalance" in-map-name="trialBalanceCallMap">
            <results-to-map map-name="trialBalanceResultMap"/>
        </call-service>

        <if-compare field="trialBalanceResultMap.debitCreditDifference" operator="not-equals" value="0" type="BigDecimal">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingNotPostingGlJournalTrialBalanceFailed"/>
            </add-error>
            <check-errors/>
        </if-compare>

        <!-- iterate through all AcctgTrans in this journal and that are not yet posted, and post each one -->
        <entity-condition entity-name="AcctgTrans" list="acctgTransList">
            <condition-list combine="and">
                <condition-expr field-name="glJournalId" from-field="parameters.glJournalId"/>
                <condition-expr field-name="isPosted" operator="not-equals" value="Y"/>
            </condition-list>
        </entity-condition>
        <iterate entry="acctgTrans" list="acctgTransList">
            <clear-field field="callServiceMap"/>
            <set from-field="acctgTrans.acctgTransId" field="callServiceMap.acctgTransId"/>
            <call-service service-name="postAcctgTrans" in-map-name="callServiceMap"/>
        </iterate>
    </simple-method>

    <!-- ========= GlReconciliation methods ========= -->
    <simple-method method-name="createGlReconciliation" short-description="Create an GlReconciliation">
        <make-value entity-name="GlReconciliation" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <!-- GlReconciliation uses a sequenced id, so get the next one now and set it... -->
        <sequenced-id sequence-name="GlReconciliation" field="newEntity.glReconciliationId"/>
        <field-to-result field="newEntity.glReconciliationId" result-name="glReconciliationId"/>

        <set from-field="userLogin.userLoginId" field="newEntity.lastModifiedByUserLogin"/>
        <set from-field="userLogin.userLoginId" field="newEntity.createdByUserLogin"/>

        <if-empty field="newEntity.statusId">
            <set field="newEntity.statusId" value="GLREC_CREATED"/>
        </if-empty>
        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateGlReconciliation" short-description="Update an GlReconciliation">
        <set-service-fields service-name="setGlReconciliationStatus" map="parameters" to-map="setGlReconciliationStatusMap"/>
        <call-service service-name="setGlReconciliationStatus" in-map-name="setGlReconciliationStatusMap"/>
        <check-errors/>
        <entity-one entity-name="GlReconciliation" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>

        <set from-field="userLogin.userLoginId" field="lookedUpValue.lastModifiedByUserLogin"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteGlReconciliation" short-description="Delete an GlReconciliation">
        <entity-one entity-name="GlReconciliation" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="updateGlReconciliationLastModified" short-description="Update GlReconciliation LastModified Info">
        <!-- this is just a little method that is meant to be called as an inline call-simple-method target with the context already setup -->
        <entity-one entity-name="GlReconciliation" value-field="lookedUpGLR"/>
        <set from-field="userLogin.userLoginId" field="lookedUpGLR.lastModifiedByUserLogin"/>
        <store-value value-field="lookedUpGLR"/>
    </simple-method>

    <!-- ========= GlReconciliationEntry methods ========= -->
    <simple-method method-name="createGlReconciliationEntry" short-description="Add Entry To GlReconciliation">
        <!-- first of all, make sure that the AcctgTransEntry is not already reconciled -->
        <entity-one entity-name="AcctgTransEntry" value-field="acctgTransEntry"/>
        <if-compare field="acctgTransEntry.reconcileStatusId" operator="equals" value="AES_RECONCILED">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingNotReconcilingTransEntryAlreadyReconciled"/>
            </add-error>
            <check-errors/>
        </if-compare>
        <make-value entity-name="GlReconciliationEntry" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>

        <!-- update the status of the AcctgTransEntry to reconciled -->
        <set field="updateAcctgTransEntryInMap.acctgTransId" from-field="parameters.acctgTransId"/>
        <set field="updateAcctgTransEntryInMap.acctgTransEntrySeqId" from-field="parameters.acctgTransEntrySeqId"/>
        <set field="updateAcctgTransEntryInMap.reconcileStatusId" value="AES_RECONCILED"/>
        <set field="updateAcctgTransEntryInMap.amount" from-field="parameters.reconciledAmount"/>
        <call-service service-name="updateAcctgTransEntry" in-map-name="updateAcctgTransEntryInMap"/>
        <check-errors/>

        <!-- Returns status "Reconciled" if it is "Created" -->
        <entity-one entity-name="GlReconciliation" value-field="glReconciliation"/>
        <if-compare field="glReconciliation.statusId" operator="equals" value="GLREC_CREATED">
            <set field="statusId" value="GLREC_RECONCILED"/>
            <field-to-result field="statusId"/>
        </if-compare>
        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>
    <simple-method method-name="updateGlReconciliationEntry" short-description="Update Entry To GlReconciliation">
        <entity-one entity-name="GlReconciliationEntry" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>

        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>
    <simple-method method-name="deleteGlReconciliationEntry" short-description="Remove Entry From GlReconciliation">
        <entity-one entity-name="GlReconciliationEntry" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>

        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>

    <!-- ========== GL Posting Services ========== -->
    <simple-method method-name="completeAcctgTransEntries" short-description="Completes, if possible, the AcctgTransEntries using the mappings defined in the gl setup">
        <entity-one entity-name="AcctgTrans" value-field="acctgTrans"/>
        <if-compare field="acctgTrans.isPosted" operator="equals" value="Y">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingTransactionHasBeenAlreadyPosted"/>
            </add-error>
            <check-errors/>
        </if-compare>
        <get-related value-field="acctgTrans" relation-name="AcctgTransEntry" list="acctgTransEntries"/>
        <iterate list="acctgTransEntries" entry="acctgTransEntry">
            <!-- if the glAccountId is empty, but we have a glAccountTypeId, then we will determine the
                 correct glAccountId from the gl setup settings -->
            <if-empty field="acctgTransEntry.glAccountId">
                <clear-field field="getGlAccountFromAccountTypeInMap"/>
                <set field="getGlAccountFromAccountTypeInMap.organizationPartyId" from-field="acctgTransEntry.organizationPartyId"/>
                <set field="getGlAccountFromAccountTypeInMap.acctgTransTypeId" from-field="acctgTrans.acctgTransTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.debitCreditFlag" from-field="acctgTransEntry.debitCreditFlag"/>
                <set field="getGlAccountFromAccountTypeInMap.productId" from-field="acctgTransEntry.productId"/>
                <set field="getGlAccountFromAccountTypeInMap.partyId" from-field="acctgTrans.partyId"/>
                <set field="getGlAccountFromAccountTypeInMap.roleTypeId" from-field="acctgTrans.roleTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.invoiceId" from-field="acctgTrans.invoiceId"/>
                <set field="getGlAccountFromAccountTypeInMap.paymentId" from-field="acctgTrans.paymentId"/>
<!--                 <log message="VIETTB getGlAccountFromAccountTypeInMap.acctgTransTypeId ${getGlAccountFromAccountTypeInMap.acctgTransTypeId}" level="info"/> -->
                <call-service service-name="getGlAccountFromAccountType" in-map-name="getGlAccountFromAccountTypeInMap">
                    <result-to-field result-name="glAccountId" field="acctgTransEntry.glAccountId"/>
                </call-service>
            </if-empty>
            <if-empty field="acctgTransEntry.origAmount">
                <set field="acctgTransEntry.origAmount" from-field="acctgTransEntry.amount"/>
            </if-empty>
            <entity-one entity-name="GlAccountType" value-field="glAccountType" use-cache="true" auto-field-map="false">
                <field-map field-name="glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
            </entity-one>
            <if-empty field="glAccountType">
                <clear-field field="acctgTransEntry.glAccountTypeId"/>
            </if-empty>
            <store-value value-field="acctgTransEntry"/>
        </iterate>
    </simple-method>
    <simple-method method-name="createAcctgTransAndEntries" short-description="Verifies and posts a set of AcctgTransEntries">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <!--<log level="info" message="ThaiNT createAcctgTransAndEntries, params = ${parameters}"/>-->
        <!-- first loop through and make sure all the entries are valid  -->
        <iterate list="parameters.acctgTransEntries" entry="acctgTransEntry">
            <!-- the organization party must be an internal organization -->
            <set field="organizationPartyId" from-field="acctgTransEntry.organizationPartyId"/>
            <entity-one entity-name="PartyRole" value-field="partyRole" use-cache="true" auto-field-map="false">
                <field-map field-name="partyId" from-field="acctgTransEntry.organizationPartyId"/>
                <field-map field-name="roleTypeId" value="INTERNAL_ORGANIZATIO"/>
            </entity-one>
            <if-empty field="partyRole">
                <log level="warning" message="The party with id [${acctgTransEntry.organizationPartyId}] is not an internal organization; the following accounting transaction will be ignored: ${acctgTransEntry}"/>
            <else>
                <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="acctgTransEntry.organizationPartyId"/>
                <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
                     <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
                </call-service>
                <if-empty field="partyAcctgPreference">
                    <log level="warning" message="The internal organization with id [${acctgTransEntry.organizationPartyId}] has no PartyAcctgPreference setting; the following accounting transaction will be ignored: ${acctgTransEntry}"/>
                <else>
                    <!-- if the amount field is empty, then determine it from the origAmount and origCurrencyUomId fields:
                         if origCurrencyUomId is different from the base currency of the organization, then the amount value will be converted -->
                    <if-empty field="acctgTransEntry.amount">
                        <if-not-empty field="acctgTransEntry.origAmount">
                            <if-empty field="acctgTransEntry.origCurrencyUomId">
                                <set field="acctgTransEntry.origCurrencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>
                            </if-empty>
                            <set field="acctgTransEntry.currencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>
                            <if-compare-field field="acctgTransEntry.origCurrencyUomId" to-field="acctgTransEntry.currencyUomId" operator="not-equals">
                                <clear-field field="convertUomInMap"/>
                                <set field="convertUomInMap.originalValue" from-field="acctgTransEntry.origAmount"/>
                                <set field="convertUomInMap.uomId" from-field="acctgTransEntry.origCurrencyUomId"/>
                                <set field="convertUomInMap.uomIdTo" from-field="acctgTransEntry.currencyUomId"/>
                                <!-- TODO: set the optional asOfDate input parameter -->
                                <call-service service-name="convertUom" in-map-name="convertUomInMap">
                                    <result-to-field result-name="convertedValue" field="acctgTransEntry.amount"/>
                                </call-service>
                            <else>
                                <set field="acctgTransEntry.amount" from-field="acctgTransEntry.origAmount"/>
                            </else>
                            </if-compare-field>
                        </if-not-empty>
                    </if-empty>
                    <!-- if the glAccountId is empty, but we have a glAccountTypeId, then we will determine the
                         correct glAccountId from the gl setup settings -->
                    <!--<log level="info" message="ThaiNT acctgTransEntry.glAccountId = ${acctgTransEntry.glAccountId}"></log>-->
                    <!--<log message="PQD createAcctgTransAndEntries, getGlAccountFromAccountType, with input glAccountType = ${acctgTransEntry.glAccountTypeId}, input glAccountId = ${acctgTransEntry.glAccountId}" level="info"/>-->
                    <if-empty field="acctgTransEntry.glAccountId">
                        <clear-field field="getGlAccountFromAccountTypeInMap"/>
                        <set field="getGlAccountFromAccountTypeInMap.organizationPartyId" from-field="acctgTransEntry.organizationPartyId"/>
                        <set field="getGlAccountFromAccountTypeInMap.acctgTransTypeId" from-field="parameters.acctgTransTypeId"/>
                        <set field="getGlAccountFromAccountTypeInMap.glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
                        <set field="getGlAccountFromAccountTypeInMap.debitCreditFlag" from-field="acctgTransEntry.debitCreditFlag"/>
                        <set field="getGlAccountFromAccountTypeInMap.productId" from-field="acctgTransEntry.productId"/>
                        <set field="getGlAccountFromAccountTypeInMap.partyId" from-field="parameters.partyId"/>
                        <set field="getGlAccountFromAccountTypeInMap.roleTypeId" from-field="parameters.roleTypeId"/>
                        <set field="getGlAccountFromAccountTypeInMap.invoiceId" from-field="parameters.invoiceId"/>
                        <set field="getGlAccountFromAccountTypeInMap.paymentId" from-field="parameters.paymentId"/>
                        <call-service service-name="getGlAccountFromAccountType" in-map-name="getGlAccountFromAccountTypeInMap">
                            <result-to-field result-name="glAccountId" field="acctgTransEntry.glAccountId"/>
                        </call-service>
                        <!--<log level="info" message="ThaiNT acctgTransEntry.glAccountId = ${acctgTransEntry.glAccountId}"/>-->
                    </if-empty>
                    <if-empty field="acctgTransEntry.origAmount">
                        <set field="acctgTransEntry.origAmount" from-field="acctgTransEntry.amount"/>
                    </if-empty>
                    <entity-one entity-name="GlAccountType" value-field="glAccountType" use-cache="true" auto-field-map="false">
                        <field-map field-name="glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
                    </entity-one>
                    <if-empty field="glAccountType">
                        <!--<log level="info" message="ThaiNT glAccount null, acctgTransEntry.glAccountTypeId = ${acctgTransEntry.glAccountTypeId}"/>-->
                        <clear-field field="acctgTransEntry.glAccountTypeId"/>
                    </if-empty>
                    <set field="normalizedAcctgTransEntries[]" from-field="acctgTransEntry"/>
                </else>
                </if-empty>
            </else>
            </if-empty>
        </iterate>

        <if-not-empty field="normalizedAcctgTransEntries">
            <!-- now do the posting. First, create the AcctgTrans entity -->
            <set-service-fields service-name="createAcctgTrans" map="parameters" to-map="createAcctgTransParams"/>
            <set field="createAcctgTransParams.organizationPartyId" from-field="organizationPartyId"/>
            <if-empty field="createAcctgTransParams.transactionDate">
                <now-timestamp field="createAcctgTransParams.transactionDate"/>
            </if-empty>
            <call-service service-name="createAcctgTrans" in-map-name="createAcctgTransParams">
                <result-to-field result-name="acctgTransId"/>
            </call-service>

            <!-- Next, create the AcctgTransEntry entities one by one -->
            <iterate list="normalizedAcctgTransEntries" entry="acctgTransEntry">
                <!-- if any amount is negative, then get the absolute (positive) value of that amount, and flip the Debit/Credit flag  -->
                <if-compare field="acctgTransEntry.origAmount" operator="less" value="0">
                    <!--<log level="verbose" message="${acctgTransEntry} is going to get inverted"/>-->
                    <!--<log level="info" message="PQD createAccthTransEntries (from GeneralLedgerServices.xml), glAccount= ${acctgTransEntry.glAccountId}, amount = ${acctgTransEntry.amount}"/>-->
                    <calculate field="acctgTransEntry.origAmount">
                        <calcop field="acctgTransEntry.origAmount" operator="negative"/>
                    </calculate>
                    <calculate field="acctgTransEntry.amount">
                        <calcop field="acctgTransEntry.amount" operator="negative"/>
                    </calculate>
                    <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                        <set value="C" field="acctgTransEntry.debitCreditFlag"/>
                    <else>
                        <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                            <set value="D" field="acctgTransEntry.debitCreditFlag"/>
                        </if-compare>
                    </else>
                    </if-compare>
                </if-compare>
                <!-- now create the AcctgTransEntry using the acctgTransId we already have from above -->
                <clear-field field="createAcctgTransEntryParams"/>
                <if-empty field="acctgTransEntry.glAccountId">
                    <add-error>
                        <fail-property resource="AccountingErrorUiLabels.xml" property="AccountingCannotCreateTransactionBecauseNotExistsAcc"/>
                    </add-error>
                    <check-errors/>
                </if-empty>
                <set-service-fields service-name="createAcctgTransEntry" map="acctgTransEntry" to-map="createAcctgTransEntryParams"/>
                <set from-field="acctgTransId" field="createAcctgTransEntryParams.acctgTransId"/>
                <set from-field="createAcctgTransParams.transactionDate" field="createAcctgTransEntryParams.transactionDate"/>
<!--                 <log message="PQD, START call createAcctgTransEntry, glAccountId = ${createAcctgTransEntryParams.glAccountId}, amount = ${createAcctgTransEntryParams.amount}" level="info"/> -->
                <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                <!--<log level="info" message="ThaiNT createAcctgTransEntryParams = ${createAcctgTransEntryParams}"/>-->
                <!-- added by PQD, accumulate amount to glAccount -->
                <!-- <set field="accumulateParams.glAccountId" from-field="acctgTransEntry.glAccountId"/>
                <set field="accumulateParams.amount" from-field="acctgTransEntry.amount"/>
                <set field="accumulateParams.organizationPartyId" from-field="acctgTransEntry.organizationPartyId"/>
                <set field="accumulateParams.debitCreditFlag" from-field="acctgTransEntry.debitCreditFlag"/>
                <set field="accumulateParams.transactionDate" from-field="createAcctgTransParams.transactionDate"/>
                <call-service service-name="accumulateAmountGlAccountFromAcctgTransEntry" 
                		in-map-name="accumulateParams"/>
                 --><!-- end by PQD -->
                		
            </iterate>
        <else>
            <log level="warning" message="Cannot process an accounting transactions with empty list of entries."/>
        </else>
        </if-not-empty>

        <!-- all done -->
        <field-to-result field="acctgTransId"/>
    </simple-method>

    <!-- Miscellaneous services for product and inventory -->

    <simple-method method-name="getGlAccountFromAccountType" short-description="Look up a GlAccountId from GlAccountTypeId">
        <!-- if this is an inventory variance then the glAccountTypeId contains the varianceReasonId; the value is used to lookup the account id in the VarianceReasonGlAccount entity -->
        <if-compare field="parameters.acctgTransTypeId" operator="equals" value="ITEM_VARIANCE">
            <call-simple-method method-name="getVarianceReasonGlAccountInline"/>
            <if-not-empty field="varianceReasonGlAccount.glAccountId">
                <field-to-result field="varianceReasonGlAccount.glAccountId" result-name="glAccountId"/>
                <return/>
            </if-not-empty>
        </if-compare>

        <!--  if this is a receipt money from employee when close teminal POS -->
        <if-compare field="parameters.acctgTransTypeId" operator="equals" value="REC_CLT_EMP">
            <call-simple-method method-name="getReceiptMoneyEmployeeGlAccountInline"/>
            <if-not-empty field="receiptMoneyEmployeeGlAccount.glAccountId">
                <field-to-result field="receiptMoneyEmployeeGlAccount.glAccountId" result-name="glAccountId"/>
                <return/>
            </if-not-empty>
        </if-compare>

        <!-- fixed asset depreciation -->
        <if-compare field="parameters.acctgTransTypeId" operator="equals" value="DEPRECIATION">
            <if-not-empty field="parameters.fixedAssetId">
                <entity-condition entity-name="FixedAssetTypeGlAccount" list="fixedAssetTypeGlAccounts">
                    <condition-expr field-name="fixedAssetId" from-field="parameters.fixedAssetId"/>
                </entity-condition>
                <if-empty field="fixedAssetTypeGlAccounts">
                    <entity-one entity-name="FixedAsset" value-field="fixedAsset" auto-field-map="false">
                        <field-map field-name="fixedAssetId" from-field="parameters.fixedAssetId"/>
                    </entity-one>
                    <entity-condition entity-name="FixedAssetTypeGlAccount" list="fixedAssetTypeGlAccounts">
                        <condition-list combine="and">
                            <condition-expr field-name="fixedAssetId" value="_NA_"/>
                            <condition-list combine="or">
                                <condition-expr field-name="fixedAssetTypeId" from-field="fixedAsset.fixedAssetTypeId"/>
                                <condition-expr field-name="fixedAssetTypeId" value="_NA_"/>
                            </condition-list>
                        </condition-list>
                    </entity-condition>
                </if-empty>
                <first-from-list list="fixedAssetTypeGlAccounts" entry="fixedAssetTypeGlAccount"/>
                <if>
                    <condition>
                        <and>
                            <not><if-empty field="fixedAssetTypeGlAccount.accDepGlAccountId"/></not>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                    </condition>
                    <then>
                        <field-to-result field="fixedAssetTypeGlAccount.accDepGlAccountId" result-name="glAccountId"/>
                        <return/>
                    </then>
                </if>
                <if>
                    <condition>
                        <and>
                            <not><if-empty field="fixedAssetTypeGlAccount.depGlAccountId"/></not>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="C"/>
                        </and>
                    </condition>
                    <then>
                        <field-to-result field="fixedAssetTypeGlAccount.depGlAccountId" result-name="glAccountId"/>
                        <return/>
                    </then>
                </if>
            </if-not-empty>
        </if-compare>
        <!-- check first if there is a party specific account mapping defined for the account type -->
        <if>
            <condition>
                <and>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="ADJ_PAYMENT_APPLICATION"/>
                    <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                </and>
            </condition>
            <then>
            	<entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
            		<field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
            	</entity-one>
	            <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
	                <return/>
	            </if-not-empty>
	             <return/>
            </then>
        </if>

        <if>
            <condition>
                <and>
                    <not><if-empty field="parameters.glAccountTypeId"/></not>
                    <not><if-empty field="parameters.partyId"/></not>
                    <not><if-empty field="parameters.roleTypeId"/></not>
                </and>
            </condition>
            <then>
                <call-simple-method method-name="getPartyGlAccountInline"/>
                <if-not-empty field="partyGlAccount.glAccountId">
                    <field-to-result field="partyGlAccount.glAccountId" result-name="glAccountId"/>
                    <return/>
                </if-not-empty>
            </then>
        </if>
        <if>
            <condition>
                <and>
                    <or>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="OUTGOING_PAYMENT"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="C"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="INCOMING_PAYMENT"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="EXCHANGE_RATE_DIFF"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="C"/>
                        </and>
                    </or>
                    <not><if-empty field="parameters.paymentId"/></not>
                </and>
            </condition>
            <then>
                <entity-one entity-name="Payment" value-field="payment"/>
                <get-related-one value-field="payment" relation-name="PaymentMethod" to-value-field="paymentMethod"/>
                <if-not-empty field="paymentMethod.glAccountId">
                    <field-to-result field="paymentMethod.glAccountId" result-name="glAccountId"/>
                    <return/>
                </if-not-empty>
                <if-compare field="payment.paymentMethodTypeId" operator="equals" value="CREDIT_CARD">
                    <get-related-one value-field="payment" relation-name="CreditCard" to-value-field="creditCard"/>
                    <call-simple-method method-name="getCreditCardTypeGlAccountInline"/>
                    <if-not-empty field="creditCardTypeGlAccount.glAccountId">
                        <field-to-result field="creditCardTypeGlAccount.glAccountId" result-name="glAccountId"/>
                        <return/>
                    </if-not-empty>
                </if-compare>
                <call-simple-method method-name="getPaymentMethodTypeGlAccountInline"/>
                <if-not-empty field="paymentMethodTypeGlAccount.glAccountId">
                    <field-to-result field="paymentMethodTypeGlAccount.glAccountId" result-name="glAccountId"/>
                    <return/>
                </if-not-empty>
                <return/>
            </then>
        </if>
        <if-not-empty field="parameters.productId">
            <call-simple-method method-name="getProductGlAccountInline"/>
            <!-- if nothing found look if the parameters.productId is member of any ProductCategory in ProductCategoryGlAccount -->
            <if-empty field="productGlAccount.glAccountId">
                <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers" filter-by-date="true">
                    <field-map field-name="productId" from-field="parameters.productId"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
                <iterate list="productCategoryMembers" entry="productCategoryMember">
                    <call-simple-method method-name="getProductCategoryGlAccountInline"/>
                    <if-not-empty field="productCategoryGlAccount.glAccountId">
                        <field-to-result field="productCategoryGlAccount.glAccountId" result-name="glAccountId"/>
                        <return/>
                    </if-not-empty>
                </iterate>
            <else>
                <set field="lookedUpValue.glAccountId" from-field="productGlAccount.glAccountId"/>
            </else>
            </if-empty>

        </if-not-empty>
        <if>
            <condition>
                <and>
                    <or>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="PURCHASE_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="ADJ_PURCHASE_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SETTLEMENT_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="COMMISSION_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="CUST_RTN_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="PURC_RTN_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="C"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SALES_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="C"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" value="GIFTS_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" value="D"/>
                        </and>
                    </or>
                    <not><if-empty field="parameters.invoiceId"/></not>
                    <not><if-empty field="parameters.glAccountTypeId"/></not>
                </and>
            </condition>
            <then>
                <!--<log level="info" message="ThaiNT glAccountTypeId = ${parameters.glAccountTypeId}"/>-->
                <call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
                <if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
                    <return/>
                </if-not-empty>
                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
                </entity-one>
                <if-not-empty field="invoiceItemType.defaultGlAccountId">
                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
                    <return/>
                </if-not-empty>

                <if-not-empty field="parameters.productId">
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="PURCHASE_INVOICE">
                        <set field="parameters.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SETTLEMENT_INVOICE">
                        <set field="parameters.glAccountTypeId" value="OTHER_PAYABLE"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="COMMISSION_INVOICE">
                        <set field="parameters.glAccountTypeId" value="OTHER_PAYABLE"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="CUST_RTN_INVOICE">
                        <set field="parameters.glAccountTypeId" value="SALES_RETURNS"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="PURC_RTN_INVOICE">
                        <set field="parameters.glAccountTypeId" value="PURCHASES_RETURNS"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" value="SALES_INVOICE">
                        <set field="parameters.glAccountTypeId" value="SALES_ACCOUNT"/>
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from-field="lookedUpValue"/>
                    </if-compare>
                    <if-not-empty field="glAccountTypeDefault.glAccountId">
                        <field-to-result field="glAccountTypeDefault.glAccountId" result-name="glAccountId"/>
                        <return/>
                    </if-not-empty>
                </if-not-empty>
            </then>
        </if>
        <!-- if nothing found or if no such parameters were passed (lookedUpValue empty in both cases), try GlAccountTypeDefault -->
        <if-empty field="lookedUpValue.glAccountId">
            <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
        </if-empty>

        <!--  Process for Shipment Receipt by VietTB (because using invoice item type for QA) -->
        <if-empty field="lookedUpValue.glAccountId">
        	<if>
	            <condition>
	            	<and>
	            	 	<if-compare field="parameters.acctgTransTypeId" operator="equals" value="SHIPMENT_RECEIPT"/>
	            	</and>
	            </condition>
	            <then>
	        	 	<call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
					<if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
	                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
	                    <return/>
                	</if-not-empty>
	                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
	                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
	                </entity-one>
	                <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
	                    <return/>
	                </if-not-empty>
	        	 </then>
        	 </if>
        </if-empty>
        <!--  Process for Inventory transaction type by VietTB -->
        <if-empty field="lookedUpValue.glAccountId">
        	<if>
	            <condition>
	            	<and>
	            	 	<if-compare field="parameters.acctgTransTypeId" operator="equals" value="INVENTORY"/>
	            	</and>
	            </condition>
	            <then>
<!-- 	            	<log message="VIETTB parameters.glAccountTypeId ${parameters.glAccountTypeId}" level="info"/> -->
	        	 	<call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
					<if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
	                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
	                    <return/>
                	</if-not-empty>
	                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
	                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
	                </entity-one>
	                <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
	                    <return/>
	                </if-not-empty>
<!-- 	                <log message="VIETTB glAccountId ${glAccountId}" level="info"/>          	      	 	 -->
	        	 </then>
        	 </if>
        </if-empty>

        <!--  Process for Payrol transaction type by VietTB -->
        <if-empty field="lookedUpValue.glAccountId">
        	<if>
	            <condition>
	            	<and>
	            	 	<if-compare field="parameters.acctgTransTypeId" operator="equals" value="PAYROL_INVOICE"/>
	            	</and>
	            </condition>
	            <then>
	        	 	<call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
					<if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
	                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
	                    <return/>
                	</if-not-empty>
	                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
	                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
	                </entity-one>
	                <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
	                    <return/>
	                </if-not-empty>
<!-- 	                <log message="VIETTB glAccountId ${glAccountId} ${parameters}" level="info"/>          	      	 	 -->
	        	 </then>
        	 </if>
        </if-empty>

		<!--  Process for Receipt money from employee POS by VietTB  -->
        <if-empty field="lookedUpValue.glAccountId">
        	<if>
	            <condition>
	            	<and>
	            	 	<if-compare field="parameters.acctgTransTypeId" operator="equals" value="REC_CLT_EMP"/>
	            	</and>
	            </condition>
	            <then>
	        	 	<call-simple-method method-name="getPaymentMethodTypeGlAccountEmployeeInline"/>
					<if-not-empty field="paymentMethodTypeGlAccount.glAccountId">
	                    <field-to-result field="paymentMethodTypeGlAccount.glAccountId" result-name="glAccountId"/>
	                    <return/>
                	</if-not-empty>
	                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
	                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
	                </entity-one>
	                <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
	                    <return/>
	                </if-not-empty>
	        	 </then>
        	 </if>
        </if-empty>
        <!--  Process for CLOSING_ENTRY transaction type by VietTB -->
        <if-empty field="lookedUpValue.glAccountId">
        	<if>
	            <condition>
	            	<and>
	            	 	<if-compare field="parameters.acctgTransTypeId" operator="equals" value="CLOSING_ENTRY"/>
	            	</and>
	            </condition>
	            <then>
<!-- 	            	<log message="VIETTB parameters.glAccountTypeId ${parameters.glAccountTypeId}" level="info"/> -->
 					<call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                    <if-not-empty field="glAccountTypeDefault.glAccountId">
                        <field-to-result field="glAccountTypeDefault.glAccountId" result-name="glAccountId"/>
                        <return/>
                    </if-not-empty>

	        	 	<call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
<!-- 	        	 	<log message="VIETTB invoiceItemTypeGlAccount.glAccountId ${invoiceItemTypeGlAccount}" level="info"/> -->
					<if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
	                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
	                    <return/>
                	</if-not-empty>
<!--                 	<log message="VIETTB parameters.glAccountTypeId ${parameters.glAccountTypeId}" level="info"/> -->
	                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemType">
	                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
	                </entity-one>
<!-- 	                <log message="VIETTB invoiceItemType ${invoiceItemType.defaultGlAccountId}" level="info"/> -->
	                <if-not-empty field="invoiceItemType.defaultGlAccountId">
	                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
<!-- 	                    <log message="VIETTB glAccountId ${glAccountId}" level="info"/>    -->
	                    <return/>
	                </if-not-empty>
<!-- 	                <log message="VIETTB glAccountId ${glAccountId}" level="info"/>          	      	 	 -->
	        	 </then>
        	 </if>
        </if-empty>

        <field-to-result field="lookedUpValue.glAccountId" result-name="glAccountId"/>
<!--         <log message="VIETTB glAccountId ${glAccountId}" level="info"/>  -->
    </simple-method>

    <simple-method method-name="getInventoryItemOwner" short-description="Get an ownerPartyId from inventoryItemId">
        <entity-one entity-name="InventoryItem" value-field="inventoryItem"/>
        <if-empty field="inventoryItem.ownerPartyId">
            <get-related-one value-field="inventoryItem" relation-name="Facility" to-value-field="facility"/>
            <field-to-result field="facility.ownerPartyId" result-name="ownerPartyId"/>
        <else>
            <field-to-result field="inventoryItem.ownerPartyId" result-name="ownerPartyId"/>
        </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="closeFinancialTimePeriod" short-description="Close a financial CustomTimePeriod">
        <log message="PQD closeFinancialTimePeriod, START" level="info"></log>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <entity-one entity-name="CustomTimePeriod" value-field="customTimePeriod"/>
        <log message="PQD closeFinancialTimePeriod, customTimePeriod = ${customTimePeriod}" level="info"></log>
        
        <set field="openTimePeriodCondition.isClosed" value="N"/>
        <get-related value-field="customTimePeriod" relation-name="ChildCustomTimePeriod" list="openChildTimePeriods" map="openTimePeriodCondition"/>
        <log message="PQD closeFinancialTimePeriod, children customTimePeriods = ${openChildTimePeriods}" level="info"/>
        <iterate list="openChildTimePeriods" entry="openChildTimePeriod">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingNoCustomTimePeriodClosedChild"/>
            </add-error>
        </iterate>
        <check-errors/>

        <entity-condition list="listAcctgTransNotPosted" entity-name="AcctgTrans">
            <condition-list combine="and">
                <condition-expr field-name="transactionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
                <condition-expr field-name="transactionDate" operator="less-equals" from-field="customTimePeriod.thruDate"/>
                <condition-expr field-name="isPosted" value="N"/>
                <condition-expr field-name="isCanceled" operator="not-equals" value="Y"/>
            </condition-list>
        </entity-condition>
		<log message="PQD closeFinancialTimePeriod, listAcctgTransNotPosted = ${listAcctgTransNotPosted}" level="info"/>
        <if-not-empty field="listAcctgTransNotPosted">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountCannotClosePeriodTimeBecauseExistsAcctgTransNotPosted"/>
            </add-error>
        </if-not-empty>
        <check-errors/>
        <call-bsh><![CDATA[
	        java.util.Calendar cal = java.util.Calendar.getInstance();
	        cal.setTime(customTimePeriod.getDate("thruDate"));
	        cal.set(java.util.Calendar.HOUR_OF_DAY, 23);
			cal.set(java.util.Calendar.MINUTE, 59);
			cal.set(java.util.Calendar.SECOND, 59);
			cal.set(java.util.Calendar.MILLISECOND, 999);
	        parameters.put("newThruDate", new java.sql.Timestamp(cal.getTimeInMillis()));
        ]]></call-bsh>
        <entity-condition list="listAcctgTransClosing" entity-name="AcctgTrans">
            <condition-list combine="and">
                <condition-expr field-name="transactionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
                <condition-expr field-name="transactionDate" operator="less-equals" from-field="parameters.newThruDate"/>
                <condition-expr field-name="acctgTransTypeId" value="PERIOD_CLOSING"/>
            </condition-list>
        </entity-condition>
        <if-empty field="listAcctgTransClosing">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountCannotClosePeriodTimeBecauseNotExistsAcctgTransClosingPeriod"/>
            </add-error>
        </if-empty>
        <check-errors/>

        <set field="findPreviewCustomtimePeriodClosedMap.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
        <set field="findPreviewCustomtimePeriodClosedMap.fromDate" from-field="customTimePeriod.fromDate"/>
        <call-service service-name="findPreviewCustomtimePeriodClosed" in-map-name="findPreviewCustomtimePeriodClosedMap">
            <result-to-field result-name="lastClosedDate"/>
            <result-to-field result-name="lastClosedTimePeriod"/>
            <result-to-field result-name="isFirst"/>
        </call-service>

       	<if>
       		<condition>
       			<and>
       				<if-empty field="lastClosedTimePeriod"></if-empty>
       				<if-compare operator="equals" value="false" field="isFirst"></if-compare>
       			</and>
       		</condition>
       		<then>
	            <add-error>
	                <fail-property resource="AccountingUiLabels" property="AccountingNoPreviewCustomTimePeriodClosedForClosedDate"/>
	            </add-error>
       		</then>
        </if>

        <if-empty field="lastClosedDate">
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingNoCustomTimePeriodClosedForClosedDate"/>
            </add-error>
        </if-empty>
        <check-errors/>
        <set field="totalAmount" value="0.0" type="BigDecimal"/>
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
        <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
             <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
        </call-service>
		<log message="PQD closeFinancialTimePeriod, BAT DAU KET CHUYEN" level="info"/>

        <!-- Th?c hi?n bÃºt toÃ¡n k?t chuy?n -->
        <entity-condition list="listAccClosingEntry" entity-name="AccClosingEntry">
      		<condition-list combine="and">
     			<condition-expr field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
     			<condition-expr field-name="closeTimePeriod" value="N"/>
     		</condition-list>
        	<order-by field-name="orderIndex"/>
        </entity-condition>
        
        <log message="PQD closeFinancialTimePeriod, listAccClosingEntry = ${listAccClosingEntry}" level="info"/>
        
        <iterate entry="accClosingEntry" list="listAccClosingEntry">
        	<!-- 
        	<call-class-method class-name="com.olbius.acc.report.AccountingReportUtil" method-name="evaluateValueGlAccount" ret-field="formulaValue">
             -->
            <call-class-method class-name="com.olbius.acc.report.AccReportUtil" method-name="evaluateValueGlAccount" ret-field="formulaValue">
            
             	<field field="accClosingEntry.formula" type="String"/>
            	<field field="customTimePeriod.customTimePeriodId" type="String"/>
            	<field field="delegator" type="org.ofbiz.entity.Delegator"/>
            	<field field="customTimePeriod.organizationPartyId" type="String"/>
        	</call-class-method>
        	<log message="PQD closeFinancialTimePeriod, KET CHUYEN formulaValue = ${formulaValue}" level="info"/>
            <!--<log level="info" message="formulaValue = ${formulaValue}"></log>-->
			
			<clear-field field="acctgTransEntries"></clear-field>
			
			<iterate-map key="keyGlAccountId" value="amountValue" map="formulaValue">
				<if-compare operator="not-equals" value="0" field="amountValue">
		            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

		            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		            <set field="creditEntry.debitCreditFlag" value="C"/>
		            <if-compare operator="equals" value="C" field="accClosingEntry.isDebitCreditFlag">
		            	<set field="creditEntry.glAccountTypeId" from-field="accClosingEntry.glAccountIdC"/>
		            <else>
		            	<set field="creditEntry.glAccountId" from-field="keyGlAccountId"/>
		            </else>
		            </if-compare>
		            <set field="creditEntry.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
		            <set field="creditEntry.origAmount" from-field="amountValue"/>
		            <set field="creditEntry.origCurrencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>
		            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

		            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		            <set field="debitEntry.debitCreditFlag" value="D"/>
		            <if-compare operator="equals" value="D" field="accClosingEntry.isDebitCreditFlag">
		            	<set field="debitEntry.glAccountTypeId" from-field="accClosingEntry.glAccountIdD"/>
		            <else>
		            	<set field="debitEntry.glAccountId" from-field="keyGlAccountId"/>
		            </else>
		            </if-compare>
		            <set field="debitEntry.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
		            <set field="debitEntry.origAmount" from-field="amountValue"/>
		            <set field="debitEntry.origCurrencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>
		            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
	            </if-compare>
			</iterate-map>
        
        	<!-- PQD call service here so that in create entry in DB for use in subsequent iterations -->
        	<if-not-empty field="acctgTransEntries">
        	<set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        	<set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="CLOSING_ENTRY"/>
        	<!-- Set the transaction date 1 second before the end of the period, so that it is included in the old period -->
        	<set-calendar field="createAcctgTransAndEntriesInMap.transactionDate" from-field="customTimePeriod.thruDate" seconds="-1"/>
        	<set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        
        	<log message="PQD closeFinancialTimePeriod, BAT DAU GOI service, KET CHUYEN acctgTransEntries = ${acctgTransEntries}" level="info"/>
        	<call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            	<result-to-field result-name="acctgTransId"/>
        	</call-service>
			</if-not-empty>
        	
        </iterate>
        
        <!-- Move this code inside the LOOP so that it create entry in DB for using in subsequent iterations 
        <if-not-empty field="acctgTransEntries">
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="CLOSING_ENTRY"/>
        
        Set the transaction date 1 second before the end of the period, so that it is included in the old period
        <set-calendar field="createAcctgTransAndEntriesInMap.transactionDate" from-field="customTimePeriod.thruDate" seconds="-1"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        
        <log message="PQD closeFinancialTimePeriod, BAT DAU GOI service, KET CHUYEN acctgTransEntries = ${acctgTransEntries}" level="info"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
		</if-not-empty>
 		-->
 
		<log message="PQD closeFinancialTimePeriod, BAT DAU TINH LO/LAI" level="info"/>

        <!-- get the profit and loss gl account id -->
        <entity-one entity-name="GlAccountTypeDefault" value-field="profitLossAccount" use-cache="true">
            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
            <field-map field-name="glAccountTypeId" value="RETAINED_EARNINGS"/>
        </entity-one>
        <entity-one entity-name="GlAccountHistory" value-field="profitLossAccountHistory">
            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
            <field-map field-name="customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
            <field-map field-name="glAccountId" from-field="profitLossAccount.glAccountId"/>
        </entity-one>
        
        <log message="PQD closeFinancialTimePeriod, profitLossAccountHistory = ${profitLossAccountHistory}" level="info"/>
        
        <if-not-empty field="profitLossAccountHistory">
			<if-compare-field field="profitLossAccountHistory.endingBalance" to-field="totalAmount" operator="not-equals" type="BigDecimal">
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingPostedBalanceAlreadyPresent"/>
                </add-error>
            </if-compare-field>
            <check-errors/>
        <else>
             <!--<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>-->
 			<!--<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>-->
        <!---->
         	<!--<clear-field field="acctgTransEntries"/>-->
             <!--<make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>-->
             <!--<set field="creditEntry.debitCreditFlag" value="C"/>-->
             <!--<set field="creditEntry.glAccountTypeId" value="RETAINED_EARNINGS"/>-->
             <!--<set field="creditEntry.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>-->
             <!--<set field="creditEntry.origAmount" from-field="totalAmount"/>-->
             <!--<set field="creditEntry.origCurrencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>-->
             <!--<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>-->
             <!--<set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>-->
             <!--<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>-->
             <!--<set field="debitEntry.debitCreditFlag" value="D"/>-->
             <!--<set field="debitEntry.glAccountTypeId" value="PROFIT_LOSS_ACCOUNT"/>-->
             <!--<set field="debitEntry.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>-->
             <!--<set field="debitEntry.origAmount" from-field="totalAmount"/>-->
             <!--<set field="debitEntry.origCurrencyUomId" from-field="partyAcctgPreference.baseCurrencyUomId"/>-->
             <!--<set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>-->
             <!--<set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>-->

             <!--<set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>-->
             <!--<set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PERIOD_CLOSING"/>-->
             <!--&lt;!&ndash;Set the transaction date 1 second before the end of the period, so that it is included in the old period&ndash;&gt;-->
             <!--<set-calendar field="createAcctgTransAndEntriesInMap.transactionDate" from-field="customTimePeriod.thruDate" seconds="-1"/>-->
             <!--<set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>-->
             <!--<call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">-->
                 <!--<result-to-field result-name="acctgTransId"/>-->
             <!--</call-service>-->
        </else>
        </if-not-empty>

        <!-- One balance history record for each account is created for the time period being closed -->
        <entity-condition entity-name="GlAccountOrganization" list="organizationGlAccounts">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" operator="equals" from-field="customTimePeriod.organizationPartyId"/>
                <condition-expr field-name="fromDate" operator="less" from-field="customTimePeriod.thruDate"/>
                <condition-list combine="or">
                    <condition-expr field-name="thruDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
                    <condition-expr field-name="thruDate" operator="equals" from-field="nullField"/>
                </condition-list>
            </condition-list>
            <select-field field-name="glAccountId"/>
        </entity-condition>
        <iterate list="organizationGlAccounts" entry="organizationGlAccount">
            <entity-one entity-name="GlAccountHistory" value-field="glAccountHistory">
                <field-map field-name="customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
                <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
                <field-map field-name="glAccountId" from-field="organizationGlAccount.glAccountId"/>
            </entity-one>
            <if-empty field="glAccountHistory">
                <make-value entity-name="GlAccountHistory" value-field="glAccountHistory"/>
                <set field="glAccountHistory.customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
                <set field="glAccountHistory.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
                <set field="glAccountHistory.glAccountId" from-field="organizationGlAccount.glAccountId"/>
                <create-value value-field="glAccountHistory"/>
            </if-empty>
            <set field="inMap.customTimePeriodId" from-field="glAccountHistory.customTimePeriodId"/>
            <set field="inMap.isFirst" from-field="isFirst"/>
            <set field="inMap.lastClosedTimePeriod" from-field="lastClosedTimePeriod"/>
            <set field="inMap.organizationPartyId" from-field="glAccountHistory.organizationPartyId"/>
            <set field="inMap.glAccountId" from-field="glAccountHistory.glAccountId"/>
            <call-service service-name="computeAndStoreGlAccountHistoryBalanceFromHistory" in-map-name="inMap"/>
        </iterate>
		<log message="PQD closeFinancialTimePeriod, XONG update GlAccountHistory" level="info"/>

        <set field="updateCustomTimePeriodInMap.customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
        <set field="updateCustomTimePeriodInMap.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
        <set field="updateCustomTimePeriodInMap.isClosed" value="Y"/>
        <call-service service-name="updateCustomTimePeriod" in-map-name="updateCustomTimePeriodInMap"/>
		<!-- process update parent custome time period -->
		<set field="updateParentCustomTimePeriodInMap.customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
        <set field="updateParentCustomTimePeriodInMap.organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
        <call-service service-name="updateParentCustomTimePeriod" in-map-name="updateParentCustomTimePeriodInMap"/>
        <check-errors/>
         <call-bsh>
			import org.ofbiz.base.util.UtilProperties;
			import
			org.ofbiz.service.ServiceUtil;
			resourceNoti = "NotificationUiLabels";
			ServiceUtil.returnSuccess(UtilProperties.getMessage(resourceNoti,
			"CloseCustomTimesPeriodSuccess", locale));
		</call-bsh>
    </simple-method>

<!--     <simple-method method-name="computeGlAccountBalanceForTimePeriod" short-description="Compute the total debits, total credits, opening, ending balances of an account in a financial period"> -->
<!--         <entity-one entity-name="CustomTimePeriod" auto-field-map="true" value-field="customTimePeriod"/> -->
<!--         <entity-one entity-name="GlAccount" auto-field-map="true" value-field="glAccount"/> -->

<!--         compute totalDebitsToOpeningDate, totalDebitsToEndingDate, totalCreditsToOpeningDate, totalCreditsToEndingDate -->
<!--         <entity-condition entity-name="AcctgTransEntrySums" list="totalDebitsToOpeningDates"> -->
<!--             <condition-list combine="and"> -->
<!--                 <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/> -->
<!--                 <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/> -->
<!--                 <condition-expr field-name="isPosted" operator="equals" value="Y"/> -->
<!--                 <condition-expr field-name="debitCreditFlag" operator="equals" value="D"/> -->
<!--                 <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/> -->
<!--                 <condition-expr field-name="transactionDate" operator="less" from-field="customTimePeriod.fromDate"/> -->
<!--             </condition-list> -->
<!--             <select-field field-name="amount"/> -->
<!--         </entity-condition> -->
<!--         <set field="totalDebitsToOpeningDate" from-field="totalDebitsToOpeningDates[0]"/> -->

<!--         <entity-condition entity-name="AcctgTransEntrySums" list="totalDebitsToEndingDates"> -->
<!--             <condition-list combine="and"> -->
<!--                 <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/> -->
<!--                 <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/> -->
<!--                 <condition-expr field-name="isPosted" operator="equals" value="Y"/> -->
<!--                 <condition-expr field-name="debitCreditFlag" operator="equals" value="D"/> -->
<!--                 <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/> -->
<!--                 <condition-expr field-name="transactionDate" operator="less" from-field="customTimePeriod.thruDate"/> -->
<!--             </condition-list> -->
<!--             <select-field field-name="amount"/> -->
<!--         </entity-condition> -->
<!--         <set field="totalDebitsToEndingDate" from-field="totalDebitsToEndingDates[0]"/> -->

<!--         <entity-condition entity-name="AcctgTransEntrySums" list="totalCreditsToOpeningDates"> -->
<!--             <condition-list combine="and"> -->
<!--                 <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/> -->
<!--                 <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/> -->
<!--                 <condition-expr field-name="isPosted" operator="equals" value="Y"/> -->
<!--                 <condition-expr field-name="debitCreditFlag" operator="equals" value="C"/> -->
<!--                 <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/> -->
<!--                 <condition-expr field-name="transactionDate" operator="less" from-field="customTimePeriod.fromDate"/> -->
<!--             </condition-list> -->
<!--             <select-field field-name="amount"/> -->
<!--         </entity-condition> -->
<!--         <set field="totalCreditsToOpeningDate" from-field="totalCreditsToOpeningDates[0]"/> -->

<!--         <entity-condition entity-name="AcctgTransEntrySums" list="totalCreditsToEndingDates"> -->
<!--             <condition-list combine="and"> -->
<!--                 <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/> -->
<!--                 <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/> -->
<!--                 <condition-expr field-name="isPosted" operator="equals" value="Y"/> -->
<!--                 <condition-expr field-name="debitCreditFlag" operator="equals" value="C"/> -->
<!--                 <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/> -->
<!--                 <condition-expr field-name="transactionDate" operator="less" from-field="customTimePeriod.thruDate"/> -->
<!--             </condition-list> -->
<!--             <select-field field-name="amount"/> -->
<!--         </entity-condition> -->
<!--         <set field="totalCreditsToEndingDate" from-field="totalCreditsToEndingDates[0]"/> -->

<!--         compute totalDebitsInTimePeriod, totalCreditsInTimePeriod and store them -->
<!--         <set field="totalDebitsInTimePeriod" value="${totalDebitsToEndingDate.amount - totalDebitsToOpeningDate.amount}" type="BigDecimal"/> -->
<!--         <set field="totalCreditsInTimePeriod" value="${totalCreditsToEndingDate.amount - totalCreditsToOpeningDate.amount}" type="BigDecimal"/> -->

<!--         compute opening and ending balance and store them -->
<!--         <set field="isDebit" value="${groovy:org.ofbiz.accounting.util.UtilAccounting.isDebitAccount(glAccount)}"/> -->
<!--         <if-compare field="isDebit" operator="equals" value="true"> -->
<!--             "Debit balance" account -->
<!--             <set field="openingBalance" value="${totalDebitsToOpeningDate.amount - totalCreditsToOpeningDate.amount}" type="BigDecimal"/> -->
<!--             <set field="endingBalance" value="${totalDebitsToEndingDate.amount - totalCreditsToEndingDate.amount}" type="BigDecimal"/> -->
<!--         <else> -->
<!--             "Credit balance" account -->
<!--             <set field="openingBalance" value="${totalCreditsToOpeningDate.amount - totalDebitsToOpeningDate.amount}" type="BigDecimal"/> -->
<!--             <set field="endingBalance" value="${totalCreditsToEndingDate.amount - totalDebitsToEndingDate.amount}" type="BigDecimal"/> -->
<!--         </else> -->
<!--         </if-compare> -->

<!--         <field-to-result field="openingBalance" result-name="openingBalance"/> -->
<!--         <field-to-result field="endingBalance" result-name="endingBalance"/> -->
<!--         <field-to-result field="totalDebitsInTimePeriod" result-name="postedDebits"/> -->
<!--         <field-to-result field="totalCreditsInTimePeriod" result-name="postedCredits"/> -->
<!--     </simple-method> -->

    <simple-method method-name="computeGlAccountBalanceForTimePeriodFromHistory" short-description="Compute the total debits, total credits, opening, ending balances of an account in a financial period">
        <entity-one entity-name="CustomTimePeriod" auto-field-map="true" value-field="customTimePeriod"/>
        <entity-one entity-name="GlAccount" auto-field-map="true" value-field="glAccount"/>
		<set field="openingCrBalance" value="0" type="BigDecimal"/>
		<set field="openingDrBalance" value="0" type="BigDecimal"/>
		<set field="endingCrBalance" value="0" type="BigDecimal"/>
		<set field="endingDrBalance" value="0" type="BigDecimal"/>
		<set field="openingBalance" value="0" type="BigDecimal"/>
		<set field="endingBalance" value="0" type="BigDecimal"/>
		<set field="defaultValue" value="0" type="BigDecimal"/>
		<set field="isFirst" from-field="parameters.isFirst"/>
		<set field="lastClosedTimePeriod" from-field="parameters.lastClosedTimePeriod"/>
		<set field="isDebit" value="${groovy:org.ofbiz.accounting.util.UtilAccounting.isDebitAccount(glAccount)}"/>
		<if-not-empty field="isFirst">
			<if-compare operator="equals" value="true" field="isFirst">
		        <entity-one entity-name="GlAccountBalance" value-field="glAccountBalance">
		            <field-map field-name="glAccountId" from-field="glAccount.glAccountId"/>
		            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
		        </entity-one>
		        <set field="openingCrBalance" from-field="glAccountBalance.openingCrBalance" />
		        <set field="openingDrBalance" from-field="glAccountBalance.openingDrBalance" />
				<if-compare field="isDebit" operator="equals" value="true">
			            <!-- "Debit balance" account -->
			            <set field="openingBalance" value="${openingDrBalance - openingCrBalance}" type="BigDecimal"/>
			        <else>
			            <!-- "Credit balance" account -->
			            <set field="openingBalance" value="${openingCrBalance - openingDrBalance}" type="BigDecimal"/>
			        </else>
				</if-compare>
		</if-compare>
		</if-not-empty>

		<if-not-empty field="lastClosedTimePeriod">
			<entity-one entity-name="GlAccountHistory" value-field="glAccountHistory">
	            <field-map field-name="glAccountId" from-field="glAccount.glAccountId"/>
	            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
	            <field-map field-name="customTimePeriodId" from-field="lastClosedTimePeriod.customTimePeriodId"/>
	        </entity-one>
			<set field="openingCrBalance" from-field="glAccountHistory.endingCrBalance" />
	        <set field="openingDrBalance" from-field="glAccountHistory.endingDrBalance" />
	        <set field="openingBalance" from-field="glAccountHistory.endingBalance" />
		</if-not-empty>
		<!-- Process thru_date custom_time_period -->
		<call-bsh><![CDATA[
	        java.util.Calendar cal = java.util.Calendar.getInstance();
	        cal.setTime(customTimePeriod.getDate("thruDate"));
	        cal.set(java.util.Calendar.HOUR_OF_DAY, 23);
			cal.set(java.util.Calendar.MINUTE, 59);
			cal.set(java.util.Calendar.SECOND, 59);
			cal.set(java.util.Calendar.MILLISECOND, 999);
	        parameters.put("newThruDate", new java.sql.Timestamp(cal.getTimeInMillis()));
        ]]></call-bsh>
        <!-- compute totalDebitsInCustomTimePeriod, totalCreditsInCustomTimePeriod -->
        <entity-condition entity-name="AcctgTransEntrySums" list="totalDebitsToOpeningDates">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/>
                <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/>
                <condition-expr field-name="isPosted" operator="equals" value="Y"/>
                <condition-expr field-name="debitCreditFlag" operator="equals" value="D"/>
                <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/>
                <condition-expr field-name="transactionDate" operator="less-equals" from-field="parameters.newThruDate"/>
                <condition-expr field-name="transactionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
            </condition-list>
            <select-field field-name="amount"/>
        </entity-condition>
        <set field="totalDebitsInTimePeriod" from-field="totalDebitsToOpeningDates[0]"/>
        <entity-condition entity-name="AcctgTransEntrySums" list="totalCreditsToOpeningDates">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.organizationPartyId"/>
                <condition-expr field-name="glAccountId" operator="equals" from-field="parameters.glAccountId"/>
                <condition-expr field-name="isPosted" operator="equals" value="Y"/>
                <condition-expr field-name="debitCreditFlag" operator="equals" value="C"/>
                <condition-expr field-name="glFiscalTypeId" operator="equals" value="ACTUAL"/>
                <condition-expr field-name="transactionDate" operator="less-equals" from-field="parameters.newThruDate"/>
                <condition-expr field-name="transactionDate" operator="greater-equals" from-field="customTimePeriod.fromDate"/>
            </condition-list>
            <select-field field-name="amount"/>
        </entity-condition>
        <set field="totalCreditsInTimePeriod" from-field="totalCreditsToOpeningDates[0]"/>
        <!-- compute opening and ending balance and store them -->
        <if-compare field="isDebit" operator="equals" value="true">
            <!-- "Debit balance" account -->
            <set field="endingBalance" value="${totalDebitsInTimePeriod.amount - totalCreditsInTimePeriod.amount}" type="BigDecimal"/>
            <set field="endingDrBalance" value="${openingDrBalance + totalDebitsInTimePeriod.amount - totalCreditsInTimePeriod.amount}" type="BigDecimal"/>
        <else>
            <!-- "Credit balance" account -->
            <set field="endingBalance" value="${totalCreditsInTimePeriod.amount - totalDebitsInTimePeriod.amount}" type="BigDecimal"/>
            <set field="endingCrBalance" value="${openingCrBalance + totalCreditsInTimePeriod.amount - totalDebitsInTimePeriod.amount}" type="BigDecimal"/>
        </else>
        </if-compare>
<!-- 		<log message="VIETTB TOTAL ${glAccount}  1 ${openingBalance}  2 ${openingDrBalance} 3 ${openingCrBalance} 4 ${endingBalance} 5 ${endingDrBalance} 6 ${endingCrBalance}" level="info"/> -->
        <field-to-result field="openingBalance" result-name="openingBalance"/>
        <field-to-result field="openingDrBalance" result-name="openingDrBalance"/>
        <field-to-result field="openingCrBalance" result-name="openingCrBalance"/>
        <field-to-result field="endingBalance" result-name="endingBalance"/>
        <field-to-result field="endingDrBalance" result-name="endingDrBalance"/>
        <field-to-result field="endingCrBalance" result-name="endingCrBalance"/>
        <if-not-empty field="totalDebitsInTimePeriod.amount">
        	<field-to-result field="totalDebitsInTimePeriod.amount" result-name="postedDebits"/>
        <else>
        	<field-to-result field="defaultValue" result-name="postedDebits"/>
        </else>
        </if-not-empty>
        <if-not-empty field="totalCreditsInTimePeriod.amount">
        	<field-to-result field="totalCreditsInTimePeriod.amount" result-name="postedCredits"/>
        <else>
        	<field-to-result field="defaultValue" result-name="postedCredits"/>
        </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="computeAndStoreGlAccountHistoryBalanceFromHistory" short-description="Compute and store the total debits, total credits, opening, ending balances of an account in a financial period">
        <entity-one entity-name="GlAccountHistory" auto-field-map="true" value-field="glAccountHistory"/>
        <set field="inMap.organizationPartyId" from-field="parameters.organizationPartyId"/>
        <set field="inMap.customTimePeriodId" from-field="parameters.customTimePeriodId"/>
        <set field="inMap.glAccountId" from-field="parameters.glAccountId"/>
        <set field="inMap.isFirst" from-field="parameters.isFirst"/>
        <set field="inMap.lastClosedTimePeriod" from-field="parameters.lastClosedTimePeriod"/>
        <call-service service-name="computeGlAccountBalanceForTimePeriodFromHistory" in-map-name="inMap">
            <result-to-field result-name="openingBalance"/>
            <result-to-field result-name="openingDrBalance"/>
            <result-to-field result-name="openingCrBalance"/>
            <result-to-field result-name="endingBalance"/>
            <result-to-field result-name="endingDrBalance"/>
            <result-to-field result-name="endingCrBalance"/>
            <result-to-field result-name="postedDebits"/>
            <result-to-field result-name="postedCredits"/>
        </call-service>
        <!-- persist the balances -->
<!--         <log message="VIETTB XXX ${parameters.glAccountId} 1 ${openingBalance}  2 ${openingDrBalance} 3 ${openingCrBalance} 4 ${endingBalance} 5 ${endingDrBalance} 6 ${endingCrBalance}" level="info"/> -->
        <set field="glAccountHistory.openingBalance" from-field="openingBalance"/>
        <set field="glAccountHistory.openingCrBalance" from-field="openingCrBalance"/>
        <set field="glAccountHistory.openingDrBalance" from-field="openingDrBalance"/>
        <set field="glAccountHistory.endingBalance" from-field="endingBalance"/>
        <set field="glAccountHistory.endingCrBalance" from-field="endingCrBalance"/>
        <set field="glAccountHistory.endingDrBalance" from-field="endingDrBalance"/>
        <set field="glAccountHistory.postedDebits" from-field="postedDebits"/>
        <set field="glAccountHistory.postedCredits" from-field="postedCredits"/>
        <store-value value-field="glAccountHistory"/>
    </simple-method>

    <simple-method method-name="prepareIncomeStatement" short-description="Prepare data for the Income Statement">
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="GlAccountClass" value-field="expenseGlAccountClass">
            <field-map field-name="glAccountClassId" value="EXPENSE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="getDescendantGlAccountClassIds" ret-field="expenseAccountClassIds">
            <field field="expenseGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one entity-name="GlAccountClass" value-field="revenueGlAccountClass">
            <field-map field-name="glAccountClassId" value="REVENUE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="getDescendantGlAccountClassIds" ret-field="revenueAccountClassIds">
            <field field="revenueGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one entity-name="GlAccountClass" value-field="incomeGlAccountClass">
            <field-map field-name="glAccountClassId" value="INCOME"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="getDescendantGlAccountClassIds" ret-field="incomeAccountClassIds">
            <field field="incomeGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <set field="organizationPartyId" from-field="parameters.organizationPartyId"/>
        <set field="partyIds" value="${groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')}" type="List"/>
        <set field="partyIds[]" from-field="organizationPartyId"/>
        <entity-condition entity-name="AcctgTransAndEntries" list="acctgTransAndEntries">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" operator="in" from-field="partyIds"/>
                <condition-expr field-name="isPosted" operator="equals" value="Y"/>
                <condition-expr field-name="glFiscalTypeId" operator="equals" from-field="parameters.glFiscalTypeId"/>
                <condition-expr field-name="transactionDate" operator="greater-equals" from-field="parameters.fromDate"/>
                <condition-expr field-name="transactionDate" operator="less" from-field="parameters.thruDate"/> <!-- FIXME: Date to Timestamp -->
                <condition-expr field-name="acctgTransTypeId" operator="not-equals" value="PERIOD_CLOSING"/>
                <condition-list combine="or">
                    <condition-expr field-name="glAccountClassId" operator="in" from-field="expenseAccountClassIds"/>
                    <condition-expr field-name="glAccountClassId" operator="in" from-field="revenueAccountClassIds"/>
                    <condition-expr field-name="glAccountClassId" operator="in" from-field="incomeAccountClassIds"/>
                </condition-list>
            </condition-list>
            <order-by field-name="acctgTransId"/>
            <order-by field-name="acctgTransEntrySeqId"/>
        </entity-condition>

        <set field="findCustomTimePeriodsMap.findDate" from-field="parameters.fromDate" type="Timestamp"/>
        <set field="findCustomTimePeriodsMap.organizationPartyId" from-field="organizationPartyId"/>
        <call-service service-name="findCustomTimePeriods" in-map-name="findCustomTimePeriodsMap">
            <result-to-field result-name="customTimePeriodList"/>
        </call-service>
        <first-from-list list="customTimePeriodList" entry="customTimePeriod"/>

        <set field="acctgTransEntriesAndTransTotalMap.isPosted" value="Y"/>
        <set field="acctgTransEntriesAndTransTotalMap.organizationPartyId" from-field="organizationPartyId"/>
        <set field="acctgTransEntriesAndTransTotalMap.customTimePeriodStartDate" from-field="customTimePeriod.fromDate" type="Timestamp"/>
        <set field="acctgTransEntriesAndTransTotalMap.customTimePeriodEndDate" from-field="parameters.thruDate" type="Timestamp"/>

        <set field="totalNetIncome" value="0.0" type="BigDecimal"/>
        <iterate list="acctgTransAndEntries" entry="acctgTransAndEntry">
            <get-related-one value-field="acctgTransAndEntry" relation-name="GlAccount" to-value-field="glAccount"/>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isCreditAccount" ret-field="isCreditAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDebitAccount" ret-field="isDebitAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isExpenseAccount" ret-field="isExpenseAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <set field="amount" from-field="acctgTransAndEntry.amount"/>
            <if>
                <condition>
                    <or>
                        <and>
                            <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" value="D"/>
                            <if-compare field="isCreditAccount" operator="equals" value="true" type="Boolean"/>
                        </and>
                        <and>
                            <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" value="C"/>
                            <if-compare field="isDebitAccount" operator="equals" value="true" type="Boolean"/>
                        </and>
                    </or>
                </condition>
                <then>
                    <calculate field="amount">
                        <calcop field="amount" operator="negative"/>
                    </calculate>
                </then>
            </if>
            <if-compare field="isExpenseAccount" operator="equals" value="true" type="Boolean">
                <calculate field="amount">
                    <calcop field="amount" operator="negative"/>
                </calculate>
            </if-compare>
            <calculate field="totalNetIncome">
                <calcop field="totalNetIncome" operator="add"><calcop field="amount" operator="get"/></calcop>
            </calculate>
            <if-compare field="isExpenseAccount" operator="equals" value="true" type="Boolean">
                <if-empty field="glAccountTotalsExpenseMap[glAccount.glAccountId]">
                    <set field="glAccountTotalsExpenseMap[glAccount.glAccountId]" value="0.0" type="BigDecimal"/>
                </if-empty>
                <calculate field="glAccountTotalsExpenseMap[glAccount.glAccountId]">
                    <calcop field="glAccountTotalsExpenseMap[glAccount.glAccountId]" operator="add"><calcop field="amount" operator="get"/></calcop>
                </calculate>
            <else>
                <if-empty field="glAccountTotalsProfitMap[glAccount.glAccountId]">
                    <set field="glAccountTotalsProfitMap[glAccount.glAccountId]" value="0.0" type="BigDecimal"/>
                </if-empty>
                <calculate field="glAccountTotalsProfitMap[glAccount.glAccountId]">
                    <calcop field="glAccountTotalsProfitMap[glAccount.glAccountId]" operator="add"><calcop field="amount" operator="get"/></calcop>
                </calculate>
            </else>
            </if-compare>
        </iterate>
        <iterate-map map="glAccountTotalsProfitMap" key="glAccountId" value="totalAmount">
            <clear-field field="glAccountTotalMap"/>
            <set field="glAccountTotalMap.glAccountId" from-field="glAccountId"/>
            <set field="glAccountTotalMap.totalAmount" from-field="totalAmount"/>
            <set field="acctgTransEntriesAndTransTotalMap.glAccountId" from-field="glAccountId"/>
            <call-service service-name="getAcctgTransEntriesAndTransTotal" in-map-name="acctgTransEntriesAndTransTotalMap">
                <result-to-field result-name="debitTotal"/>
                <result-to-field result-name="creditTotal"/>
            </call-service>
            <set field="totalOfCurrentFiscalPeriod" value="${debitTotal - creditTotal}" type="BigDecimal"/>
            <calculate field="totalOfCurrentFiscalPeriod" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="get" field="totalOfCurrentFiscalPeriod"/>
            </calculate>
            <set field="glAccountTotalMap.totalOfCurrentFiscalPeriod" from-field="totalOfCurrentFiscalPeriod" type="BigDecimal"/>
            <set field="glAccountIncomeList[]" from-field="glAccountTotalMap"/>
        </iterate-map>
        <set field="glAccountTotalsMap.income" from-field="glAccountIncomeList"/>
        <iterate-map map="glAccountTotalsExpenseMap" key="glAccountId" value="totalAmount">
            <clear-field field="glAccountTotalMap"/>
            <set field="glAccountTotalMap.glAccountId" from-field="glAccountId"/>
            <set field="glAccountTotalMap.totalAmount" from-field="totalAmount"/>
            <set field="acctgTransEntriesAndTransTotalMap.glAccountId" from-field="glAccountId"/>
            <call-service service-name="getAcctgTransEntriesAndTransTotal" in-map-name="acctgTransEntriesAndTransTotalMap">
                <result-to-field result-name="debitTotal"/>
                <result-to-field result-name="creditTotal"/>
            </call-service>
            <set field="totalOfCurrentFiscalPeriod" value="${debitTotal - creditTotal}" type="BigDecimal"/>
            <calculate field="totalOfCurrentFiscalPeriod" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="get" field="totalOfCurrentFiscalPeriod"/>
            </calculate>
            <set field="glAccountTotalMap.totalOfCurrentFiscalPeriod" from-field="totalOfCurrentFiscalPeriod" type="BigDecimal"/>
            <set field="glAccountExpenseList[]" from-field="glAccountTotalMap"/>
        </iterate-map>
        <set field="glAccountTotalsMap.expenses" from-field="glAccountExpenseList"/>
        <field-to-result field="totalNetIncome" result-name="totalNetIncome"/>
        <field-to-result field="glAccountTotalsMap" result-name="glAccountTotalsMap"/>
    </simple-method>

    <!-- Services for the automatic creation of accounting transactions based on business transactions
         Typically, these services are triggered by SECAs -->

    <simple-method method-name="createAcctgTransForSalesShipmentIssuance" short-description="Create an accounting transactions for a sales shipment issuance (D: INVENTORY_ACCOUNT, C: COGS_ACCOUNT)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="ItemIssuance" value-field="itemIssuance"/>
        <get-related-one value-field="itemIssuance" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <entity-and entity-name="OrderRole" list="billToCustomers">
            <field-map field-name="orderId" from-field="itemIssuance.orderId"/>
            <field-map field-name="roleTypeId" value="BILL_TO_CUSTOMER"/>
        </entity-and>
        <first-from-list list="billToCustomers" entry="billToCustomer"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <!-- TODO: handle serialized inventory -->

        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
             <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
        </call-service>
        <set field="totalAmount" value="0.0" type="BigDecimal"/>
        <set field="totalPurAmount" value="0.0" type="BigDecimal"/>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <!--<log level="info" message="ThaiNT partyAcctgPreference = ${partyAcctgPreference}"></log>-->
        <if>
            <condition>
                <or>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_INV_COST" type="String"/>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String"/>
                </or>
            </condition>
            <then>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String">
                    <set field="getProdAvgCostMap.inventoryItem" from-field="inventoryItem"/>
                    <call-service service-name="getProductAverageCost" in-map-name="getProdAvgCostMap">
                        <result-to-field result-name="unitCost"/>
                        <result-to-field result-name="purCost"/> <!-- get cost for Purchase -->
                    </call-service>
                    <else>
                        <set field="unitCost" from-field="inventoryItem.unitCost"/>
                        <set field="purCost" from-field="inventoryItem.purCost"/>
                    </else>
                </if-compare>
		        <entity-one value-field="product" entity-name="Product" auto-field-map="false">
		        	<field-map field-name="productId" from-field="inventoryItem.productId"/>
		        </entity-one>
	            <if>
	               	<condition>
	               		<and>
	               			<if-compare-field field="product.requireAmount" operator="not-equals"  to-field="nullField" />
	               			<if-compare field="product.requireAmount" operator="equals" value="Y"/>
	               		</and>
	               	</condition>
		           	<then>
						 <calculate field="quantityAll" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="itemIssuance.quantity"/>
		                        <calcop operator="get" field="itemIssuance.weight"/>
		                    </calcop>
		                 </calculate>
		           	</then>
	           	<else>
	           		<set from-field="itemIssuance.quantity" field="quantityAll"/>
	           	</else>
	           	</if>

                <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantityAll"/>
                        <calcop operator="get" field="unitCost"/>
                    </calcop>
                </calculate>
                <!-- get cost for Purchase -->
                <calculate field="totalPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantityAll"/>
                        <calcop operator="get" field="purCost"/>
                    </calcop>
                </calculate>

 				<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
              	<!-- Credit -->
              	<clear-field field="creditEntry"/>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                <set field="creditEntry.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
                <set field="creditEntry.origAmount" from-field="totalAmount"/>
                <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                <if-not-empty field="billToCustomer">
                    <set field="creditEntry.partyId" from-field="billToCustomer.partyId"/>
                    <set field="creditEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
                </if-not-empty>
                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

				<!-- Debit -->
				<clear-field field="debitEntry"/>
				<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		        <set field="debitEntry.debitCreditFlag" value="D"/>
		        <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
		        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
		        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
		        <set field="debitEntry.origAmount" from-field="totalAmount"/>
		        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
		        <if-not-empty field="billToCustomer">
		            <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/>
		            <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
		        </if-not-empty>
		        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

<!--                 <log message="VIETTB totalPurAmount ${totalPurAmount} totalAmount ${totalAmount}" level="info"/> -->
 				<if-compare field="totalPurAmount" operator="not-equals" value="0.0" type="BigDecimal">
	                <!-- (VIETTB) create transaction : cost for Purchase -->
	                <!-- Credit -->
	 				<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
	                <clear-field field="creditEntry"/>
	                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	                <set field="creditEntry.debitCreditFlag" value="C"/>
	                <set field="creditEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
	                <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
	                <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
	                <set field="creditEntry.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
	                <set field="creditEntry.origAmount" from-field="totalPurAmount"/>
	                <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
	                <if-not-empty field="billToCustomer">
	                    <set field="creditEntry.partyId" from-field="billToCustomer.partyId"/>
	                    <set field="creditEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
	                </if-not-empty>
	                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
	                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

					<!-- Debit -->
					<clear-field field="debitEntry"/>
					<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
			        <set field="debitEntry.debitCreditFlag" value="D"/>
			        <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
			        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
			        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
			        <set field="debitEntry.origAmount" from-field="totalPurAmount"/>
			        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
			        <if-not-empty field="billToCustomer">
			            <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/>
			            <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
			        </if-not-empty>
			        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
		        </if-compare>
            </then>
            <else>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_FIFO" type="String">
                    <set value="+datetimeReceived" field="orderByString"/>
                </if-compare>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_LIFO" type="String">
                    <set value="-datetimeReceived" field="orderByString"/>
                </if-compare>
                <if-empty field="orderByString">
                    <add-error>
                        <fail-property resource="AccountingUiLabels" property="AccountingCOGSCostingMethodIsNotSupported"/>
                    </add-error>
                    <check-errors/>
                </if-empty>
                <entity-condition entity-name="InventoryItem" list="costInventoryItems">
                    <condition-list combine="and">
                        <condition-expr field-name="ownerPartyId" operator="equals" from-field="inventoryItem.ownerPartyId"/>
                        <condition-expr field-name="facilityId" operator="equals" from-field="inventoryItem.facilityId"/>
                        <condition-expr field-name="productId" operator="equals" from-field="inventoryItem.productId"/>
                        <condition-expr field-name="accountingQuantityTotal" operator="greater" value="0.0"/>
                    </condition-list>
                    <order-by field-name="${orderByString}"/>
                </entity-condition>
                <set field="remainingQuantity" from-field="itemIssuance.quantity"/>
                <iterate list="costInventoryItems" entry="costInventoryItem">
                    <if-compare field="remainingQuantity" operator="greater" value="0.0" type="BigDecimal">
                        <if-compare-field field="remainingQuantity" operator="less-equals" to-field="costInventoryItem.accountingQuantityTotal" type="BigDecimal">
                            <set field="costInventoryItemQuantity" from-field="remainingQuantity"/>
                            <set field="remainingQuantity" value="0.0" type="BigDecimal"/>
                            <else>
                                <set field="costInventoryItemQuantity" from-field="costInventoryItem.accountingQuantityTotal"/>
                                <set field="remainingQuantity" value="${remainingQuantity - costInventoryItem.accountingQuantityTotal}" type="BigDecimal"/>
                            </else>
                        </if-compare-field>
                        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
                        <set from-field="costInventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                        <set value="${-1 * costInventoryItemQuantity}" field="createDetailMap.accountingQuantityDiff" type="BigDecimal"/>
                        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

                        <calculate field="costInventoryItemAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="costInventoryItemQuantity"/>
                                <calcop operator="get" field="costInventoryItem.unitCost"/>
                            </calcop>
                        </calculate>
                        <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="add">
                                <calcop operator="get" field="costInventoryItemAmount"/>
                                <calcop operator="get" field="totalAmount"/>
                            </calcop>
                        </calculate>

						<calculate field="costInventoryItemPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="costInventoryItemQuantity"/>
                                <calcop operator="get" field="costInventoryItem.purCost"/>
                            </calcop>
                        </calculate>
                        <calculate field="totalPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="add">
                                <calcop operator="get" field="costInventoryItemPurAmount"/>
                                <calcop operator="get" field="totalPurAmount"/>
                            </calcop>
                        </calculate>

 						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                        <!-- Credit -->
                        <clear-field field="creditEntry"/>
                        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                        <set field="creditEntry.debitCreditFlag" value="C"/>
                        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="creditEntry.inventoryItemId" from-field="costInventoryItem.inventoryItemId"/>
                        <set field="creditEntry.origAmount" from-field="costInventoryItemAmount"/>
                        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <if-not-empty field="billToCustomer">
                            <set field="creditEntry.partyId" from-field="billToCustomer.partyId"/>
                            <set field="creditEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
                        </if-not-empty>
                        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
						<!-- Debit -->
						<clear-field field="debitEntry"/>
						<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				        <set field="debitEntry.debitCreditFlag" value="D"/>
				        <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
				        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
				        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
				        <set field="debitEntry.origAmount" from-field="costInventoryItemAmount"/>
				        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
				        <if-not-empty field="billToCustomer">
				            <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/>
				            <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
				        </if-not-empty>
				        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

  						<if-compare field="costInventoryItemPurAmount" operator="not-equals" value="0.0" type="BigDecimal">
	  						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
	                        <clear-field field="creditEntry"/>
	                        <!-- (VIETTB) create transaction : cost for Purchase -->

	                        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	                        <set field="creditEntry.debitCreditFlag" value="C"/>
	                        <set field="creditEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
	                        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
	                        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
	                        <set field="creditEntry.inventoryItemId" from-field="costInventoryItem.inventoryItemId"/>
	                        <set field="creditEntry.origAmount" from-field="costInventoryItemPurAmount"/>
	                        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
	                        <if-not-empty field="billToCustomer">
	                            <set field="creditEntry.partyId" from-field="billToCustomer.partyId"/>
	                            <set field="creditEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
	                        </if-not-empty>
	                        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
	                        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

							<!-- Debit -->
							<clear-field field="debitEntry"/>
							<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
					        <set field="debitEntry.debitCreditFlag" value="D"/>
					        <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
					        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
					        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
					        <set field="debitEntry.origAmount" from-field="costInventoryItemPurAmount"/>
					        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
					        <if-not-empty field="billToCustomer">
					            <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/>
					            <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
					        </if-not-empty>
					        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
					        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
						</if-compare>
                    </if-compare>
                </iterate>
                <if-compare field="remainingQuantity" operator="greater" value="0.0" type="BigDecimal">
                    <add-error>
                        <fail-property resource="AccountingUiLabels" property="AccountingNotFindAccountingInventory"/>
                    </add-error>
                    <check-errors/>
                </if-compare>
            </else>
        </if>
        <!-- Debit -->
<!--         <set field="totalAllAmount" value="0.0" type="BigDecimal"/> -->
<!--         <calculate field="totalAllAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--             <calcop operator="add"> -->
<!--                 <calcop operator="get" field="totalPurAmount"/> -->
<!--                 <calcop operator="get" field="totalAmount"/> -->
<!--             </calcop> -->
<!--         </calculate>  -->

<!--         <log message="VIETTB totalAllAmount ${totalAllAmount} totalPurAmount ${totalPurAmount} totalAmount ${totalAmount}" level="info"/> -->

<!--         <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--         <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--         <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/> -->
<!--         <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
<!--         <set field="debitEntry.productId" from-field="inventoryItem.productId"/> -->
<!--         <set field="debitEntry.origAmount" from-field="totalAllAmount"/> -->
<!--         <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
<!--         <if-not-empty field="billToCustomer"> -->
<!--             <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/> -->
<!--             <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/> -->
<!--         </if-not-empty> -->
<!--         <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_SHIPMENT"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="itemIssuance.issuedDateTime"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <log level="info" message="createAcctgTrans1"></log>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForExchangeShipmentIssuance" short-description="Create an accounting transactions for a aggreated shipment issuance (D: INVENTORY_ACCOUNT, C: GL_DEFAULT_ACC)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one value-field="shipment" entity-name="Shipment" auto-field-map="false">
        	<field-map field-name="shipmentId" from-field="parameters.shipmentId"/>
        </entity-one>
        <if-compare operator="not-equals" value="EXPORT_EXCHANGED" field="shipment.shipmentTypeId">
        	<return/>
        </if-compare>
        <entity-one entity-name="ItemIssuance" value-field="itemIssuance"/>
        <get-related-one value-field="itemIssuance" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <entity-and entity-name="RequirementRole" list="billToAggreateds">
            <field-map field-name="requirementId" from-field="shipment.primaryRequirementId"/>
            <field-map field-name="roleTypeId" value="INTERNAL_ORGANIZATIO"/>
        </entity-and>
        <first-from-list list="billToAggreateds" entry="billToAggreated"/>

        <entity-and entity-name="RequirementShipment" list="requirementShipments">
            <field-map field-name="shipmentId" from-field="itemIssuance.shipmentId"/>
            <field-map field-name="shipmentItemSeqId" from-field="itemIssuance.shipmentItemSeqId"/>
        </entity-and>
        <first-from-list list="requirementShipments" entry="requirementShipment"/>
        <entity-one value-field="requirementItem" entity-name="RequirementItem" auto-field-map="false">
        	<field-map field-name="requirementId" from-field="requirementShipment.requirementId"/>
        	<field-map field-name="reqItemSeqId" from-field="requirementShipment.reqItemSeqId"/>
        </entity-one>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <!-- TODO: handle serialized inventory -->

        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
             <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
        </call-service>
        <set field="totalAmount" value="0.0" type="BigDecimal"/>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

        <set field="unitCost" from-field="requirementItem.unitCost"/>

        <entity-one value-field="product" entity-name="Product" auto-field-map="false">
        	<field-map field-name="productId" from-field="inventoryItem.productId"/>
        </entity-one>
        <if>
             	<condition>
             		<and>
             			<if-compare-field field="product.requireAmount" operator="not-equals"  to-field="nullField" />
             			<if-compare field="product.requireAmount" operator="equals" value="Y"/>
             		</and>
             	</condition>
          	<then>
			 <calculate field="quantityAll" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                   <calcop operator="multiply">
                       <calcop operator="get" field="itemIssuance.quantity"/>
                       <calcop operator="get" field="itemIssuance.weight"/>
                   </calcop>
                </calculate>
          	</then>
         	<else>
         		<set from-field="itemIssuance.quantity" field="quantityAll"/>
         	</else>
        </if>

        <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="multiply">
                <calcop operator="get" field="quantityAll"/>
                <calcop operator="get" field="unitCost"/>
            </calcop>
        </calculate>


		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
      	<!-- Credit -->
      	<clear-field field="creditEntry"/>
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="creditEntry.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
        <set field="creditEntry.origAmount" from-field="totalAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToAggreated">
            <set field="creditEntry.partyId" from-field="billToAggreated.partyId"/>
            <set field="creditEntry.roleTypeId" from-field="billToAggreated.roleTypeId"/>
        </if-not-empty>
        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

		<!-- Debit -->
		<clear-field field="debitEntry"/>
		<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from-field="totalAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToAggreated">
            <set field="debitEntry.partyId" from-field="billToAggreated.partyId"/>
            <set field="debitEntry.roleTypeId" from-field="billToAggreated.roleTypeId"/>
        </if-not-empty>
        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="EXP_EXCHANGE_DATE"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="itemIssuance.issuedDateTime"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForTransferShipmentIssuance" short-description="Create an accounting transactions for a transfer shipment issuance (D: INVENTORY_ACCOUNT, C: UNINVOICED_SHIP_RCPT">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

        <entity-one entity-name="TransferItemIssuance" value-field="itemIssuance"/>
        <get-related-one value-field="itemIssuance" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <!-- TODO: handle serialized inventory -->
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
             <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
        </call-service>
        <set field="totalAmount" value="0.0" type="BigDecimal"/>
        <if>
            <condition>
                <or>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_INV_COST" type="String"/>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String"/>
                </or>
            </condition>
            <then>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String">
                    <set field="getProdAvgCostMap.inventoryItem" from-field="inventoryItem"/>
                    <call-service service-name="getProductAverageCost" in-map-name="getProdAvgCostMap">
                        <result-to-field result-name="unitCost"/>
                        <result-to-field result-name="purCost"/> <!-- get cost for Purchase -->
                    </call-service>
                    <else>
                        <set field="unitCost" from-field="inventoryItem.unitCost"/>
                        <set field="purCost" from-field="inventoryItem.purCost"/>
                    </else>
                </if-compare>

		        <entity-one value-field="product" entity-name="Product" auto-field-map="false">
		        	<field-map field-name="productId" from-field="inventoryItem.productId"/>
		        </entity-one>
	            <if>
	               	<condition>
	               		<and>
	               			<if-compare-field field="product.requireAmount" operator="not-equals"  to-field="nullField" />
	               			<if-compare field="product.requireAmount" operator="equals" value="Y"/>
	               		</and>
	               	</condition>
		           	<then>
						<calculate field="quantityAll" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="itemIssuance.quantity"/>
		                        <calcop operator="get" field="itemIssuance.amount"/>
		                    </calcop>
		                 </calculate>
		           	</then>
	           	<else>
	           		<set from-field="itemIssuance.quantity" field="quantityAll"/>
	           	</else>
	           	</if>

                <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantityAll"/>
                        <calcop operator="get" field="unitCost"/>
                    </calcop>
                </calculate>
                <!-- get cost for Purchase -->
                <calculate field="totalPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantityAll"/>
                        <calcop operator="get" field="purCost"/>
                    </calcop>
                </calculate>

				<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
                <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                <set field="debitEntry.origAmount" from-field="totalAmount"/>
                <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                <!-- Debit -->
		        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		        <set field="creditEntry.debitCreditFlag" value="C"/>
		        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
		        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
		        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
		        <set field="creditEntry.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
		        <set field="creditEntry.origAmount" from-field="totalAmount"/>
		        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
		        <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
		        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>


		        <if-compare operator="greater" value="0" field="totalPurAmount">
					<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	                <set field="debitEntry.debitCreditFlag" value="D"/>
	                <set field="debitEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
	                <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
	                <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
	                <set field="debitEntry.origAmount" from-field="totalPurAmount"/>
	                <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
	                <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
	                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

	                <!-- Debit -->
			        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			        <set field="creditEntry.debitCreditFlag" value="C"/>
			        <set field="creditEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
			        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
			        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
			        <set field="creditEntry.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
			        <set field="creditEntry.origAmount" from-field="totalPurAmount"/>
			        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
			        <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
			        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			    </if-compare>
            </then>
            <else>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_FIFO" type="String">
                    <set value="+datetimeReceived" field="orderByString"/>
                </if-compare>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_LIFO" type="String">
                    <set value="-datetimeReceived" field="orderByString"/>
                </if-compare>
                <if-empty field="orderByString">
                    <add-error>
                        <fail-property resource="AccountingUiLabels" property="AccountingCOGSCostingMethodIsNotSupported"/>
                    </add-error>
                    <check-errors/>
                </if-empty>
                <entity-condition entity-name="InventoryItem" list="costInventoryItems">
                    <condition-list combine="and">
                        <condition-expr field-name="ownerPartyId" operator="equals" from-field="inventoryItem.ownerPartyId"/>
                        <condition-expr field-name="facilityId" operator="equals" from-field="inventoryItem.facilityId"/>
                        <condition-expr field-name="productId" operator="equals" from-field="inventoryItem.productId"/>
                        <condition-expr field-name="accountingQuantityTotal" operator="greater" value="0.0"/>
                    </condition-list>
                    <order-by field-name="${orderByString}"/>
                </entity-condition>
                <set field="remainingQuantity" from-field="itemIssuance.quantity"/>
                <iterate list="costInventoryItems" entry="costInventoryItem">
                    <if-compare field="remainingQuantity" operator="greater" value="0.0" type="BigDecimal">
                        <if-compare-field field="remainingQuantity" operator="less-equals" to-field="costInventoryItem.accountingQuantityTotal" type="BigDecimal">
                            <set field="costInventoryItemQuantity" from-field="remainingQuantity"/>
                            <set field="remainingQuantity" value="0.0" type="BigDecimal"/>
                            <else>
                                <set field="costInventoryItemQuantity" from-field="costInventoryItem.accountingQuantityTotal"/>
                                <set field="remainingQuantity" value="${remainingQuantity - costInventoryItem.accountingQuantityTotal}" type="BigDecimal"/>
                            </else>
                        </if-compare-field>
                        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
                        <set from-field="costInventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                        <set value="${-1 * costInventoryItemQuantity}" field="createDetailMap.accountingQuantityDiff" type="BigDecimal"/>
                        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

                        <calculate field="costInventoryItemAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="costInventoryItemQuantity"/>
                                <calcop operator="get" field="costInventoryItem.unitCost"/>
                            </calcop>
                        </calculate>
                        <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="add">
                                <calcop operator="get" field="costInventoryItemAmount"/>
                                <calcop operator="get" field="totalAmount"/>
                            </calcop>
                        </calculate>

						<calculate field="costInventoryItemPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="costInventoryItemQuantity"/>
                                <calcop operator="get" field="costInventoryItem.purCost"/>
                            </calcop>
                        </calculate>
                        <calculate field="totalPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="add">
                                <calcop operator="get" field="costInventoryItemPurAmount"/>
                                <calcop operator="get" field="totalPurAmount"/>
                            </calcop>
                        </calculate>

						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="debitEntry.inventoryItemId" from-field="costInventoryItem.inventoryItemId"/>
                        <set field="debitEntry.origAmount" from-field="costInventoryItemAmount"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                        <clear-field field="creditEntry"/>

                        <!-- Debit -->
				        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				        <set field="creditEntry.debitCreditFlag" value="C"/>
				        <set field="creditEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
				        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
				        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
				        <set field="creditEntry.origAmount" from-field="costInventoryItemAmount"/>
				        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
				        <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
				        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="debitEntry.inventoryItemId" from-field="costInventoryItem.inventoryItemId"/>
                        <set field="debitEntry.origAmount" from-field="costInventoryItemPurAmount"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                        <clear-field field="creditEntry"/>

                        <!-- Debit -->
				        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				        <set field="creditEntry.debitCreditFlag" value="C"/>
				        <set field="creditEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
				        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
				        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
				        <set field="creditEntry.origAmount" from-field="costInventoryItemPurAmount"/>
				        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
				        <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
				        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                    </if-compare>
                </iterate>
                <if-compare field="remainingQuantity" operator="greater" value="0.0" type="BigDecimal">
                    <add-error>
                        <fail-property resource="AccountingUiLabels" property="AccountingNotFindAccountingInventory"/>
                    </add-error>
                    <check-errors/>
                </if-compare>
            </else>
        </if>

        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="itemIssuance.issuedDateTime"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForCanceledSalesShipmentIssuance" short-description="Create an accounting transactions for a canceled sales shipment issuance (D: INVENTORY_ACCOUNT, C: COGS_ACCOUNT">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="ItemIssuance" value-field="itemIssuance"/>
        <get-related-one value-field="itemIssuance" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <entity-and entity-name="OrderRole" list="billToCustomers">
            <field-map field-name="orderId" from-field="itemIssuance.orderId"/>
            <field-map field-name="roleTypeId" value="BILL_TO_CUSTOMER"/>
        </entity-and>
        <first-from-list list="billToCustomers" entry="billToCustomer"/>
        <!-- TODO: handle serialized inventory -->
        <set field="getProdAvgCostMap.inventoryItem" from-field="inventoryItem"/>
        <call-service service-name="getProductAverageCost" in-map-name="getProdAvgCostMap">
            <result-to-field result-name="unitCost"/>
        </call-service>
        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="multiply">
                <calcop operator="get" field="parameters.canceledQuantity"/>
                <calcop operator="get" field="unitCost"/>
            </calcop>
        </calculate>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from-field="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToCustomer">
            <set field="creditEntry.partyId" from-field="billToCustomer.partyId"/>
            <set field="creditEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
        </if-not-empty>
        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from-field="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToCustomer">
            <set field="debitEntry.partyId" from-field="billToCustomer.partyId"/>
            <set field="debitEntry.roleTypeId" from-field="billToCustomer.roleTypeId"/>
        </if-not-empty>
        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_SHIPMENT"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <log level="info" message="createAcctgTrans2"></log>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForShipmentReceipt" short-description="Create an accounting transactions for a shipment receipt (D: INVENTORY_ACCOUNT, C: UNINVOICED_SHIP_RCPT or COGS_ACCOUNT for returns)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="ShipmentReceipt" value-field="shipmentReceipt"/>
        <get-related-one value-field="shipmentReceipt" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <get-related-one value-field="shipmentReceipt" relation-name="Shipment" to-value-field="shipment"/>
        
		<if-compare operator="equals" value="RECEIVE_UNKNOWN" field="shipment.shipmentTypeId">
			<return/>
		</if-compare>
		
        <entity-one value-field="orderHeader" entity-name="OrderHeader" auto-field-map="false">
            <field-map field-name="orderId" from-field="shipmentReceipt.orderId"/>
        </entity-one>
        <set field="organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="currencyUomId" from-field="orderHeader.currencyUom"/>
        <call-class-method method-name="isImportTrade" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                           ret-field="isImportTrade">
            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
            <field field="organizationPartyId" type="String"/>
            <field field="currencyUomId" type="String"/>
            <field field="userLogin" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if>
            <condition>
                <and>
                    <if-compare field="isImportTrade" operator="equals" value="true"/>
                </and>
            </condition>
            <then>
                <call-service service-name="createAcctgTransForShipmentReceiptForImportTrade" in-map-name="parameters">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
                <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            </then>
            <else>
                <if-not-empty field="shipmentReceipt.transferId">
                    <!-- Transaction for internal inventory -->
                    <get-related-one value-field="shipmentReceipt" relation-name="ShipmentItem" to-value-field="shipmentItem"/>
                    <set from-field="inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                    <entity-one value-field="product" entity-name="Product" auto-field-map="false">
                        <field-map field-name="productId" from-field="inventoryItem.productId"/>
                    </entity-one>
                    <if>
                        <condition>
                            <and>
                                <if-compare-field field="product.requireAmount" operator="not-equals"  to-field="nullField" />
                                <if-compare field="product.requireAmount" operator="equals" value="Y"/>
                            </and>
                        </condition>
                        <then>
                            <set from-field="shipmentReceipt.amountAccepted" field="createDetailMap.accountingQuantityDiff"/>
                        </then>
                        <else>
                            <set from-field="shipmentReceipt.quantityAccepted" field="createDetailMap.accountingQuantityDiff"/>
                        </else>
                    </if>

                    <!-- 	        <log message="VIETTB createDetailMap ${createDetailMap}" level="info"/> -->
                    <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

                    <!-- Calculate for Inventory UnitCost -->
                    <calculate field="totalUnitCost">
                        <calcop operator="multiply">
                            <calcop field="createDetailMap.accountingQuantityDiff" operator="get"/>
                            <calcop operator="get" field="shipmentItem.unitCost"/>
                        </calcop>
                    </calculate>
                    <!-- Calculate for Inventory PurCost -->
                    <calculate field="totalPurCost">
                        <calcop operator="multiply">
                            <calcop field="createDetailMap.accountingQuantityDiff" operator="get"/>
                            <calcop operator="get" field="shipmentItem.purCost"/>
                        </calcop>
                    </calculate>
                    <set field="reciprocalItemSeqId" value="0" type="Long"/>
                    <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

                    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                    <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                    <!-- 	       	<log message="Viettb totalUnitCost ${totalUnitCost} totalPurCost ${totalPurCost}" level="info"/> -->
                    <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
                    <!-- Credit -->
                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
                    <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                    <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/>
                    <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                    <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                    <set field="creditEntry.origAmount" from-field="totalUnitCost"/>
                    <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                    <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                    <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/>
                    <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                    <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                    <set field="debitEntry.origAmount" from-field="totalUnitCost"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                    <if-compare operator="greater" value="0" field="totalPurCost">
                        <clear-field field="creditEntry"/>
                        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                        <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                        <set field="creditEntry.debitCreditFlag" value="C"/>
                        <set field="creditEntry.glAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
                        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/>
                        <set field="creditEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="creditEntry.origAmount" from-field="totalPurCost"/>
                        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

                        <clear-field field="debitEntry"/>
                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <set field="debitEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
                        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/>
                        <set field="debitEntry.roleTypeId" value="INVENTORY_TRANSFER"/>
                        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="debitEntry.origAmount" from-field="totalPurCost"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                    </if-compare>

                    <!-- Set header fields (AcctgTrans) -->
                    <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
                    <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="shipmentReceipt.shipmentId"/>
                    <set field="createAcctgTransAndEntriesInMap.partyId" from-field="shipment.partyIdFrom"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
                    <else>
                        <if-not-empty field="shipmentReceipt.returnId">
                            <set field="creditAccountTypeId" value="COGS_ACCOUNT"/>
                            <else>
                                <set field="creditAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
                            </else>
                        </if-not-empty>

                        <if-compare operator="equals" value="RECEIVE_STOCKEVENT" field="shipment.shipmentTypeId">
                            <set field="creditAccountTypeId" value="OTHER_STOCKEVENT_RECEI"/>
                        </if-compare>

                        <!-- TODO: handle serialized inventory -->
                        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <call-service service-name="getPartyAccountingPreferences" in-map-name="partyAccountingPreferencesCallMap">
                            <result-to-field result-name="partyAccountingPreference" field="partyAcctgPreference"/>
                        </call-service>
                        <if-not-empty field="shipmentReceipt.returnId">
                            <if>
                                <condition>
                                    <or>
                                        <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_INV_COST" type="String"/>
                                        <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String"/>
                                    </or>
                                </condition>
                                <then>
                                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" value="COGS_AVG_COST" type="String">
                                        <set field="getProdAvgCostMap.inventoryItem" from-field="inventoryItem"/>
                                        <call-service service-name="getProductAverageCost" in-map-name="getProdAvgCostMap">
                                            <result-to-field result-name="unitCost"/>
                                            <result-to-field result-name="purCost"/>
                                        </call-service>
                                        <else>
                                            <set field="unitCost" from-field="inventoryItem.unitCost"/>
                                            <set field="purCost" from-field="inventoryItem.purCost"/>
                                        </else>
                                    </if-compare>
                                </then>
                                <else>
                                    <!-- LIFO and FIFO-->
                                    <set field="unitCost" from-field="inventoryItem.unitCost"/>
                                    <set field="purCost" from-field="inventoryItem.purCost"/>
                                </else>
                            </if>
                            <else>
                                <set field="unitCost" from-field="inventoryItem.unitCost"/>
                                <set field="purCost" from-field="inventoryItem.purCost"/>
                            </else>
                        </if-not-empty>

                        <!-- Calculate for Inventory QA -->
                        <!-- 	        <calculate field="origAmountQA"> -->
                        <!-- 	            <calcop operator="multiply"> -->
                        <!-- 	                <calcop field="shipmentReceipt.quantityQualityAssurance" operator="get"/> -->
                        <!-- 	                <calcop operator="get" field="unitCost"/> -->
                        <!-- 	            </calcop> -->
                        <!-- 	        </calculate> -->
                        <!-- 	        <log message="VIETTB origAmountQA ${origAmountQA}" level="info"/> -->
                        <!-- Calculate for Inventory (156,153,152,154) : Accepted ?(quantity Accepted include quantity Excess)-->
                        <entity-one value-field="product" entity-name="Product" auto-field-map="false">
                            <field-map field-name="productId" from-field="inventoryItem.productId"/>
                        </entity-one>

                        <if>
                            <condition>
                                <and>
                                    <if-compare-field field="product.requireAmount" operator="not-equals"  to-field="nullField" />
                                    <if-compare field="product.requireAmount" operator="equals" value="Y"/>
                                </and>
                            </condition>
                            <then>
                                <set from-field="shipmentReceipt.amountAccepted" field="accountingQuantity"/>
                            </then>
                            <else>
                                <set from-field="shipmentReceipt.quantityAccepted" field="accountingQuantity"/>
                            </else>
                        </if>

                        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="accountingQuantity"/>
                                <calcop operator="get" field="unitCost"/>
                            </calcop>
                        </calculate>

                        <calculate field="origPurAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="accountingQuantity"/>
                                <calcop operator="get" field="purCost"/>
                            </calcop>
                        </calculate>

                        <!-- 			<log message="VIETTB origAmount ${origAmount}" level="info"/> -->

                        <!-- Calculate for Quantity Rejected (unexplained) : Loss, Damaged -->
                        <!-- 	        <calculate field="origRejected" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
                        <!-- 	            <calcop operator="multiply"> -->
                        <!-- 	                <calcop operator="get" field="shipmentReceipt.quantityRejected"/> -->
                        <!-- 	                <calcop operator="get" field="unitCost"/> -->
                        <!-- 	            </calcop> -->
                        <!-- 	        </calculate> -->
                        <!-- 	        <log message="VIETTB origRejected ${origRejected}" level="info"/> -->
                        <!-- Calculate for Quantity Excess (unexplained) -->
                        <!-- 	        <calculate field="origExcess" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
                        <!-- 	            <calcop operator="multiply"> -->
                        <!-- 	                <calcop operator="get" field="shipmentReceipt.quantityExcess"/> -->
                        <!-- 	                <calcop operator="get" field="unitCost"/> -->
                        <!-- 	            </calcop> -->
                        <!-- 	        </calculate>     -->
                        <!-- 	         <log message="VIETTB origExcess ${origExcess}" level="info"/> -->

                        <!-- Calculate total for QA, Rejected and Accepted -->
                        <!-- 	        <calculate field="totalReceipt"> -->
                        <!-- 	            <calcop operator="add"> -->
                        <!-- 	                <calcop field="origAmountQA" operator="get"/> -->
                        <!-- 	                <calcop operator="get" field="origAmount"/> -->
                        <!-- 	                <calcop operator="get" field="origRejected"/> -->
                        <!-- 	            </calcop> -->
                        <!-- 	        </calculate> -->
                        <!-- 			<log message="VIETTB totalReceipt ${totalReceipt}" level="info"/> -->

                        <!-- if origExcess > 0 then totalReceipt = toltalReceipt - origExcess   -->
                        <!-- 	        <if-compare field="origExcess" operator="greater" value="0"  type="BigDecimal"> -->
                        <!-- 	        	<calculate field="totalReceipt" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
                        <!-- 		        	<calcop operator="subtract"> -->
                        <!-- 		                <calcop operator="get" field="totalReceipt"/> -->
                        <!-- 		                <calcop operator="get" field="origExcess"/> -->
                        <!-- 		            </calcop> -->
                        <!-- 	            </calculate>             -->
                        <!-- 	        </if-compare>                     -->
                        <!-- 	        <log message="VIETTB totalReceipt ${totalReceipt}" level="info"/>         -->
                        <!--         <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
                        <!--             <calcop operator="multiply"> -->
                        <!--                 <calcop operator="get" field="shipmentReceipt.quantityAccepted"/> -->
                        <!--                 <calcop operator="get" field="unitCost"/> -->
                        <!--             </calcop> -->
                        <!--         </calculate> -->

                        <entity-one entity-name="Product" value-field="product">
                            <field-map field-name="productId" from-field="shipmentReceipt.productId"/>
                        </entity-one>

                        <!-- 	        <log message="VIETTB ${shipmentReceipt}" level="info"/> -->
                        <!-- 	        <log message="VIETTB ${origAmount}" level="info"/> -->
                        <!-- 	        <log message="VIETTB ${product}" level="info"/> -->
                        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
                        <set from-field="inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                        <set from-field="accountingQuantity" field="createDetailMap.accountingQuantityDiff"/>
                        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

                        <set field="reciprocalItemSeqId" value="0" type="Long"/>
                        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

                        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                        <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
                        <!-- Credit -->
                        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                        <set field="creditEntry.debitCreditFlag" value="C"/>

                        <set field="creditEntry.glAccountTypeId" from-field="creditAccountTypeId"/>
                        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/>
                        <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="creditEntry.origAmount" from-field="origAmount"/>
                        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                        <!-- 	        <log message="VIETTB CreditEntry ${creditEntry}" level="info"/>  -->

                        <!--  Credit for Excess  -->
                        <!-- 	        <if> -->
                        <!-- 	             <condition> -->
                        <!-- 	                 <and> -->
                        <!-- 	                     <if-compare field="origExcess" operator="greater" value="0" type="BigDecimal"/> -->
                        <!-- 	                 </and> -->
                        <!-- 	             </condition> -->
                        <!-- 	             <then>           		         -->
                        <!-- 			        <clear-field field="creditEntry"/> -->
                        <!-- 			        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
                        <!-- 			        <set field="creditEntry.debitCreditFlag" value="C"/> -->
                        <!-- 			        <set field="creditEntry.glAccountTypeId" value="OTHER_PAYABLE"/> -->
                        <!-- 			        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
                        <!-- 			        <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/> -->
                        <!-- 			        <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
                        <!-- 			        <set field="creditEntry.productId" from-field="inventoryItem.productId"/> -->
                        <!-- 			        <set field="creditEntry.origAmount" from-field="origExcess"/> -->
                        <!-- 			        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
                        <!-- 			        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>		         -->
                        <!-- 			        <log message="VIETTB creditEntry Excess ${creditEntry}" level="info"/>  -->
                        <!-- 			     </then> -->
                        <!-- 	        </if>  -->

                        <!--  Credit for QA cost  -->
                        <entity-one entity-name="ProductType" value-field="productType">
                            <field-map field-name="productTypeId" from-field="product.productTypeId"/>
                        </entity-one>

                        <!-- 	        <if> -->
                        <!-- 	             <condition> -->
                        <!-- 	                 <and> -->
                        <!-- 	                     <if-compare field="origAmountQA" operator="greater" value="0" type="BigDecimal"/> -->
                        <!-- 	                 </and> -->
                        <!-- 	             </condition> -->
                        <!-- 	             <then>           		         -->
                        <!-- 			        <clear-field field="creditEntry"/> -->
                        <!-- 			        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
                        <!-- 			        <set field="creditEntry.debitCreditFlag" value="C"/> -->
                        <!-- 			        <set field="creditEntry.glAccountTypeId" value="${productType.glAccountTypeId}"/> -->
                        <!-- 			        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
                        <!-- 			        <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/> -->
                        <!-- 			        <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
                        <!-- 			        <set field="creditEntry.productId" from-field="inventoryItem.productId"/> -->
                        <!-- 			        <set field="creditEntry.origAmount" from-field="origAmountQA"/> -->
                        <!-- 			        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
                        <!-- 			        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>		         -->
                        <!-- 			        <log message="VIETTB creditEntry Excess ${creditEntry}" level="info"/>  -->
                        <!-- 			     </then> -->
                        <!-- 	        </if>                            -->

                        <!-- Debit -->
                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>

                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <!--         <if>
                                    <condition>
                                        <if-compare field="product.productTypeId" operator="equals" value="RAW_MATERIAL" />
                                    </condition>
                                    <then>
                                        <set field="debitEntry.glAccountTypeId" value="RAWMAT_INVENTORY"/>
                                    </then>
                                   <else-if>
                                    <condition>
                                        <if-compare field="product.productTypeId" operator="equals" value="FINISHED_INSTOOL" />
                                    </condition>
                                    <then>
                                        <set field="debitEntry.glAccountTypeId" value="INSTOOL_INVENTORY"/>
                                    </then>
                                 </else-if>
                                 <else-if>
                                    <condition>
                                        <if-compare field="product.productTypeId" operator="equals" value="FINISHED_PRODUCT" />
                                    </condition>

                                    <then>
                                        <set field="debitEntry.glAccountTypeId" value="FINPRO_INVENTORY"/>
                                    </then>
                                </else-if>
                                <else-if>
                                    <condition>
                                        <if-compare field="product.productTypeId" operator="equals" value="WIP" />
                                    </condition>
                                    <then>
                                        <set field="debitEntry.glAccountTypeId" value="WIP_INVENTORY"/>
                                    </then>
                                   </else-if>
                                   <else>
                                       <log message="VIETTB test" level="info"/>
                                       <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                                   </else>
                                </if>           -->
                        <set field="debitEntry.glAccountTypeId" value="${productType.glAccountTypeId}"/>
                        <!-- 	        <log message="VIETTB productType.glAccountTypeId ${productType.glAccountTypeId}" level="info"/>  -->

                        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                        <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/>
                        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                        <set field="debitEntry.origAmount" from-field="origAmount"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                        <!-- 	         <log message="VIETTB debitEntry ${debitEntry}" level="info"/> 	 -->
                        <!-- Transactions For Quantity QA -->
                        <!-- 	        <if> -->
                        <!-- 	             <condition> -->
                        <!-- 	                 <and> -->
                        <!-- 	                     <if-compare field="origAmountQA" operator="greater" value="0" type="BigDecimal"/> -->
                        <!-- 	                 </and> -->
                        <!-- 	             </condition> -->
                        <!-- 	             <then>              -->
                        <!-- 		        	<clear-field field="debitEntry"/> -->
                        <!-- 			        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
                        <!-- 			        <set field="debitEntry.debitCreditFlag" value="D"/> -->
                        <!-- 			        <set field="debitEntry.glAccountTypeId" value="${productType.glAccountTypeId}"/>    -->
                        <!-- 			        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
                        <!-- 			        <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/> -->
                        <!-- 			        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
                        <!-- 			        <set field="debitEntry.productId" from-field="inventoryItem.productId"/> -->
                        <!-- 			        <set field="debitEntry.origAmount" from-field="origAmountQA"/> -->
                        <!-- 			        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
                        <!-- 			        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
                        <!-- 			        <log message="VIETTB debitEntryQA ${debitEntry}" level="info"/> 		        		          -->
                        <!-- 			     </then> -->
                        <!-- 	        </if>  -->

                        <!-- 	        Transactions For Debit Quantity QA Cost -->
                        <!-- 	        <if> -->
                        <!-- 	             <condition> -->
                        <!-- 	                 <and> -->
                        <!-- 	                     <if-compare field="origAmountQA" operator="greater" value="0" type="BigDecimal"/> -->
                        <!-- 	                 </and> -->
                        <!-- 	             </condition> -->
                        <!-- 	             <then>              -->
                        <!-- 		        	<clear-field field="debitEntry"/> -->
                        <!-- 			        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
                        <!-- 			        <set field="debitEntry.debitCreditFlag" value="D"/> -->
                        <!-- 			        <set field="debitEntry.glAccountTypeId" value="PINV_QA_ITEM"/>    -->
                        <!-- 			        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
                        <!-- 			        <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/> -->
                        <!-- 			        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
                        <!-- 			        <set field="debitEntry.productId" from-field="inventoryItem.productId"/> -->
                        <!-- 			        <set field="debitEntry.origAmount" from-field="origAmountQA"/> -->
                        <!-- 			        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
                        <!-- 			        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
                        <!-- 			        <log message="VIETTB debitEntryQA ${debitEntry}" level="info"/> 		        		          -->
                        <!-- 			     </then> -->
                        <!-- 	        </if>                   -->

                        <!-- 	        Transactions For Quantity Rejected -->
                        <!-- 	        <if> -->
                        <!-- 	             <condition> -->
                        <!-- 	                 <and> -->
                        <!-- 	                     <if-compare field="origRejected" operator="greater" value="0" type="BigDecimal"/> -->
                        <!-- 	                 </and> -->
                        <!-- 	             </condition> -->
                        <!-- 	             <then>          		         -->
                        <!-- 		        	<clear-field field="debitEntry"/> -->
                        <!-- 			        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
                        <!-- 			        <set field="debitEntry.debitCreditFlag" value="D"/> -->
                        <!-- 			        <set field="debitEntry.glAccountTypeId" value="OTHER_RECEIVABLE"/>    -->
                        <!-- 			        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/> -->
                        <!-- 			        <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/> -->
                        <!-- 			        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
                        <!-- 			        <set field="debitEntry.productId" from-field="inventoryItem.productId"/> -->
                        <!-- 			        <set field="debitEntry.origAmount" from-field="origRejected"/> -->
                        <!-- 			        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/> -->
                        <!-- 			        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
                        <!-- 			        <log message="VIETTB debitEntryRej ${debitEntry}" level="info"/> 			         -->
                        <!-- 			      </then> -->
                        <!-- 	       </if>         -->
                        <if-compare operator="greater" value="0" field="origPurAmount">
                            <set field="orderId" from-field="shipment.primaryOrderId"/>
                            <log level="info" message="ThaiNT origPurAmount = ${origPurAmount}"/>
                            <call-class-method method-name="isCostImport" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                                               ret-field="isCostImport">
                                <field field="delegator" type="org.ofbiz.entity.Delegator"/>
                                <field field="orderId" type="String"/>
                                <field field="inventoryItem.productId" type="String"/>
                            </call-class-method>
                            <if>
                                <condition>
                                    <and>
                                        <if-compare field="isCostImport" operator="equals" value="true" type="Boolean"/>
                                    </and>
                                </condition>
                                <then>
                                    <clear-field field="serviceInMap"/>
                                    <set field="serviceInMap.userLogin" from-field="userLogin"/>
                                    <set field="serviceInMap.orderId" from-field="orderId"/>
                                    <set field="serviceInMap.productId" from-field="inventoryItem.productId" type="String"/>
                                    <set field="serviceInMap.reciprocalItemSeqId" from-field="reciprocalItemSeqId"/>
                                    <set field="serviceInMap.glAccountTypeId" from-field="creditAccountTypeId"/>
                                    <set field="serviceInMap.organizationPartyId" from-field="organizationPartyId"/>
                                    <set field="serviceInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
                                    <set field="serviceInMap.partyId" from-field="shipment.partyIdFrom"/>
                                    <log level="info" message="ThaiNT serviceInMap = ${serviceInMap}"/>
                                    <call-service service-name="prepareAcctgTransEntry" in-map-name="serviceInMap">
                                        <result-to-field result-name="prepareAcctgTransEntryList"/>
                                    </call-service>
                                    <iterate entry="acctgTransEntry" list="prepareAcctgTransEntryList">
                                        <set field="acctgTransEntries[]" from-field="acctgTransEntry" type="Object"/>
                                    </iterate>
                                    <log level="info" message="ThaiNT acctgTransEntries = ${acctgTransEntries}"/>
                                </then>
                                <else>
                                    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                                    <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                                    <clear-field field="creditEntry"/>
                                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                                    <set field="creditEntry.debitCreditFlag" value="C"/>
                                    <set field="creditEntry.glAccountTypeId" from-field="creditAccountTypeId"/>
                                    <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                                    <set field="creditEntry.partyId" from-field="shipment.partyIdFrom"/>
                                    <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                                    <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                                    <set field="creditEntry.origAmount" from-field="origPurAmount"/>
                                    <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                                    <clear-field field="debitEntry"/>
                                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                                    <set field="debitEntry.debitCreditFlag" value="D"/>
                                    <set field="debitEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
                                    <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                                    <set field="debitEntry.partyId" from-field="shipment.partyIdFrom"/>
                                    <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                                    <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                                    <set field="debitEntry.origAmount" from-field="origPurAmount"/>
                                    <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                                </else>
                            </if>
                        </if-compare>

                        <if-not-empty field="shipmentReceipt.returnId">
                            <entity-one value-field="returnHeader" entity-name="ReturnHeader" auto-field-map="false">
                                <field-map field-name="returnId" from-field="shipmentReceipt.returnId"/>
                            </entity-one>
                            <if-compare operator="equals" value="CUSTOMER_RETURN" field="returnHeader.returnHeaderTypeId">
                                <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="shipmentReceipt.datetimeReceived"/>
                            </if-compare>
                        </if-not-empty>

                        <!-- Set header fields (AcctgTrans) -->
                        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                        <if-compare operator="not-equals" value="RECEIVE_EXCHANGED" field="shipment.shipmentTypeId">
                            <if-compare operator="not-equals" value="RECEIVE_STOCKEVENT" field="shipment.shipmentTypeId">
                                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SHIPMENT_RECEIPT"/>
                                <else>
                                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="REC_STOKEVENT_SHIPMENT"/>
                                </else>
                            </if-compare>
                            <else>
                                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="REC_EXCHANGE_DATE"/>
                            </else>
                        </if-compare>
                        <set field="createAcctgTransAndEntriesInMap.shipmentId" from-field="shipmentReceipt.shipmentId"/>
                        <set field="createAcctgTransAndEntriesInMap.partyId" from-field="shipment.partyIdFrom"/>
                        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
                    </else>
                </if-not-empty>
                <!-- 	    <log message="Viettb createAcctgTransAndEntriesInMap ${createAcctgTransAndEntriesInMap}" level="info"/> -->
                <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
                <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            </else>
        </if>
    </simple-method>

    <simple-method method-name="createAcctgTransForPurchaseCost" short-description="Create accounting transaction when processing for purchase cost (D: INV_PUR_ACCOUNT, C: ACCRUALS_PAYABLE)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
<!--         <log message="VIETTB actg ${parameters}" level="info"/> -->
		<entity-condition entity-name="CostAccounting" list="listCostAccounting">
     		<condition-list>
     			<condition-expr field-name="orderId" from-field="parameters.orderId"/>
     		</condition-list>
     	</entity-condition>

<!--      	<log message="VIETTB acctg listCostAccounting ${listCostAccounting}" level="info"/> -->
     	<set field="totalAccurals" type="BigDecimal" value="0"/>
     	<if-not-empty field="listCostAccounting">
	     	<iterate entry="costAccounting" list="listCostAccounting">

		        <entity-and list="listCostAccBase" entity-name="CostAccBase">
		            <field-map field-name="costAccBaseId" from-field="costAccounting.costAccBaseId"/>
		        </entity-and>
		        <first-from-list entry="costAccBase" list="listCostAccBase"/>

		        <if-compare operator="greater" value="0" field="costAccounting.costPriceTemporary">
		        	<!-- Credit -->
	                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	                <set field="creditEntry.debitCreditFlag" value="C"/>
	                <set field="creditEntry.glAccountTypeId" from-field="costAccBase.invoiceItemTypeId"/>
	                <set field="creditEntry.organizationPartyId" from-field="parameters.ownerPartyId"/>
	                <set field="creditEntry.productId" from-field="parameters.productId"/>
	                <set field="creditEntry.origAmount" from-field="costAccounting.costPriceTemporary"/>
	                <set field="creditEntry.origCurrencyUomId" from-field="parameters.currencyUomId"/>
	                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
	              	<calculate field="totalAccurals" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
	                    <calcop operator="add">
	                        <calcop operator="get" field="totalAccurals"/>
	                        <calcop operator="get" field="costAccounting.costPriceTemporary"/>
	                    </calcop>
		            </calculate>
		        </if-compare>
		    </iterate>
		</if-not-empty>

<!--         <log message="VIETTB acctg totalAccurals ${totalAccurals}" level="info"/>                 -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from-field="parameters.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="parameters.productId"/>
        <set field="debitEntry.origAmount" from-field="totalAccurals"/>
        <set field="debitEntry.origCurrencyUomId" from-field="parameters.currencyUomId"/>

        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="parameters.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForInventoryItemCostChange" short-description="Create accounting transaction when item cost is changed (D: INV_ADJ_VAL, C: INVENTORY_ACCOUNT)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="InventoryItemDetail" value-field="newInventoryItemDetail"/>
        <entity-condition entity-name="InventoryItemDetail" list="inventoryItemDetails">
            <condition-list>
                <condition-expr field-name="inventoryItemId" operator="equals" from-field="newInventoryItemDetail.inventoryItemId"/>
                <condition-expr field-name="unitCost" operator="not-equals" from-field="nullField"/>
                <condition-expr field-name="inventoryItemDetailSeqId" operator="not-equals" from-field="parameters.inventoryItemDetailSeqId"/>
            </condition-list>
            <order-by field-name="-effectiveDate"/>
        </entity-condition>
        <first-from-list list="inventoryItemDetails" entry="oldInventoryItemDetail"/>
        <if-not-empty field="oldInventoryItemDetail">
            <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="multiply" field="newinventoryItem.quantityOnHandTotal">
                    <calcop operator="subtract">
                        <calcop operator="get" field="oldInventoryItemDetail.unitCost"/>
                        <calcop operator="get" field="newInventoryItemDetail.unitCost"/>
                    </calcop>
                </calcop>
            </calculate>
            <!-- if originAmount is equals to 0 do not create transaction, this is causing error in postAcctgTrans -->
            <if-compare operator="not-equals" field="origAmount" value="0">
                <get-related-one value-field="newInventoryItemDetail" relation-name="InventoryItem" to-value-field="inventoryItem"/>
                <!-- Credit -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
                <set field="creditEntry.origAmount" from-field="origAmount"/>
                <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
                <!-- Debit -->
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.glAccountTypeId" value="INV_ADJ_VAL"/>
                <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
                <set field="debitEntry.origAmount" from-field="origAmount"/>
                <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>

                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
                <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="parameters.inventoryItemId"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
                <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
                <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            </if-compare>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createAcctgTransForPhysicalInventoryVariance" short-description="Create an Account Transaction For Physical Inventory Variance">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-and entity-name="InventoryItemDetail" list="inventoryItemDetails">
            <field-map field-name="physicalInventoryId" from-field="parameters.physicalInventoryId"/>
            <order-by field-name="inventoryItemId"/>
        </entity-and>
        <iterate list="inventoryItemDetails" entry="inventoryItemDetail">
            <get-related-one value-field="inventoryItemDetail" relation-name="InventoryItem" to-value-field="inventoryItem"/>
            <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="multiply">
                    <calcop operator="get" field="inventoryItemDetail.quantityOnHandDiff"/>
                    <calcop operator="get" field="inventoryItem.unitCost"/>
                </calcop>
            </calculate>
            <calculate field="purAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="multiply">
                    <calcop operator="get" field="inventoryItemDetail.quantityOnHandDiff"/>
                    <calcop operator="get" field="inventoryItem.purCost"/>
                </calcop>
            </calculate>
            <calculate field="totalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				<calcop operator="add">
                    <calcop operator="get" field="purAmount"/>
                    <calcop operator="get" field="origAmount"/>
                </calcop>
            </calculate>

	        <entity-one entity-name="Product" value-field="product">
	            <field-map field-name="productId" from-field="inventoryItem.productId"/>
	        </entity-one>

	        <entity-one entity-name="ProductType" value-field="productType">
	            <field-map field-name="productTypeId" from-field="product.productTypeId"/>
	        </entity-one>
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

            <!-- Credit Entries -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.glAccountTypeId" from-field="inventoryItemDetail.reasonEnumId"/>
            <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
            <set field="creditEntry.origAmount" from-field="origAmount"/>
            <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
            <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
			<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			<!-- Note process for Rawmaterial, tool -->
            <!-- Debit Entries-->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
			<set field="debitEntry.glAccountTypeId" value="${productType.glAccountTypeId}"/>
<!--             <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/> -->
            <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
            <set field="debitEntry.origAmount" from-field="origAmount"/>
            <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
            <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			<if-compare operator="not-equals" value="0" field="purAmount" type="BigDecimal">
	            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
	            <!-- Credit Entries -->
	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	            <set field="creditEntry.debitCreditFlag" value="C"/>
	            <set field="creditEntry.glAccountTypeId" from-field="inventoryItemDetail.reasonEnumId"/>
	            <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
	            <set field="creditEntry.origAmount" from-field="purAmount"/>
	            <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
	            <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
				<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

            	<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
	            <set field="debitEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
	            <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
	            <set field="debitEntry.origAmount" from-field="purAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
	            <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </if-compare>

        </iterate>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.physicalInventoryId" from-field="parameters.physicalInventoryId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="ITEM_VARIANCE"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForSumPhysicalInventoryVariance" short-description="Create an Account Transaction For Sum Physical Inventory Variance">
        <!-- retrieve ledger rounding properties -->
        <!-- check distributor -->
        <entity-one entity-name="PhysicalInventory" value-field="physicalInventory">
        	<field-map field-name="physicalInventoryId" from-field="parameters.physicalInventoryId"/>
        </entity-one>
        
        <entity-one entity-name="Facility" value-field="facility">
        	<field-map field-name="facilityId" from-field="physicalInventory.facilityId"/>
        </entity-one>
		
		<set field="owner" from-field="facility.ownerPartyId"/>
		<set field="isDistributor" value="${groovy:com.olbius.basesales.util.SalesPartyUtil.isDistributor(delegator, owner)}"/>
		<if-compare field="isDistributor" operator="equals" type="Boolean" value="true">
			<return/>
		</if-compare>
		
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-and entity-name="InventoryItemDetailFreezedSum" list="inventoryItemDetailSums">
            <field-map field-name="physicalInventoryId" from-field="parameters.physicalInventoryId"/>
            <field-map field-name="eventId" from-field="parameters.eventId"/>
        </entity-and>
        <iterate list="inventoryItemDetailSums" entry="inventoryItemDetailSum">
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

            <!-- Credit Entries -->
            <if-compare operator="not-equals" value="0" field="inventoryItemDetailSum.totalAvgAmount" type="BigDecimal">
	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	            <set field="creditEntry.debitCreditFlag" value="C"/>
	            <if-compare operator="greater" value="0" field="inventoryItemDetailSum.totalAvgAmount" type="BigDecimal">
	            	<set field="creditEntry.glAccountTypeId" value="VAR_FOUND"/>
	            <else>
	            	<set field="creditEntry.glAccountTypeId" value="VAR_LOST"/>
	            </else>
	            </if-compare>
<!-- 	            <set field="creditEntry.productId" from-field="inventoryItem.productId"/> -->
	            <set field="creditEntry.origAmount" from-field="inventoryItemDetailSum.totalAvgAmount"/>
	            <set field="creditEntry.origCurrencyUomId" from-field="inventoryItemDetailSum.currencyUomId"/>
	            <set field="creditEntry.organizationPartyId" from-field="inventoryItemDetailSum.ownerPartyId"/>
				<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
				<!-- Note process for Rawmaterial, tool -->
	            <!-- Debit Entries-->
	            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
				<set field="debitEntry.glAccountTypeId" from-field="inventoryItemDetailSum.glAccountTypeId"/>
	<!--             <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/> -->
	<!-- 	         <set field="debitEntry.productId" from-field="inventoryItem.productId"/> -->
	            <set field="debitEntry.origAmount" from-field="inventoryItemDetailSum.totalAvgAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="inventoryItemDetailSum.currencyUomId"/>
	            <set field="debitEntry.organizationPartyId" from-field="inventoryItemDetailSum.ownerPartyId"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			</if-compare>

			<if-compare operator="not-equals" value="0" field="inventoryItemDetailSum.totalAvgPurAmount" type="BigDecimal">
	            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
	            <!-- Credit Entries -->
	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
	            <set field="creditEntry.debitCreditFlag" value="C"/>
 				<if-compare operator="greater" value="0" field="inventoryItemDetailSum.totalAvgAmount" type="BigDecimal">
	            	<set field="creditEntry.glAccountTypeId" value="VAR_FOUND"/>
	            <else>
	            	<set field="creditEntry.glAccountTypeId" value="VAR_LOST"/>
	            </else>
	            </if-compare>
	            <set field="creditEntry.origAmount" from-field="inventoryItemDetailSum.totalAvgPurAmount"/>
	            <set field="creditEntry.origCurrencyUomId" from-field="inventoryItemDetailSum.currencyUomId"/>
	            <set field="creditEntry.organizationPartyId" from-field="inventoryItemDetailSum.ownerPartyId"/>
				<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

            	<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
	            <set field="debitEntry.glAccountTypeId" value="INV_PUR_ACCOUNT"/>
	            <set field="debitEntry.origAmount" from-field="inventoryItemDetailSum.totalAvgPurAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="inventoryItemDetailSum.currencyUomId"/>
	            <set field="debitEntry.organizationPartyId" from-field="inventoryItemDetailSum.ownerPartyId"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </if-compare>

        </iterate>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.physicalInventoryId" from-field="parameters.physicalInventoryId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="ITEM_VARIANCE"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForWorkEffortInventoryProduced" short-description="Create an accounting transactions for a Work Effort Inventory Produced (D: INVENTORY_ACCOUNT, C: WIP_INVENTORY)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="WorkEffortInventoryProduced" value-field="workEffortInventoryProduced">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            <field-map field-name="inventoryItemId" from-field="parameters.inventoryItemId"/>
        </entity-one>
        <get-related-one value-field="workEffortInventoryProduced" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <!-- TODO: handle serialized inventory -->
        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="multiply">
                <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                <calcop operator="get" field="inventoryItem.unitCost"/>
            </calcop>
        </calculate>
        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
        <set from-field="inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
        <set from-field="inventoryItem.quantityOnHandTotal" field="createDetailMap.accountingQuantityDiff"/>
        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="WIP_INVENTORY"/>
        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from-field="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from-field="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from-field="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method method-name="createAcctgTransForWorkEffortCost"
               short-description="Create an accounting transaction for inventory that is issued to a work effort cost (Type: INVENTORY D: INVENTORY_ACCOUNT , C: UNINVOICED_SHIP_RCPT or COGS_ACCOUNT)">
        <entity-one entity-name="CostComponent" value-field="costComponent">
            <field-map field-name="costComponentId" from-field="parameters.costComponentId"/>
        </entity-one>
        <get-related-one value-field="costComponent" relation-name="CostComponentCalc" to-value-field="costComponentCalc"/>
        <entity-one entity-name="WorkEffort" value-field="workEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <get-related-one value-field="workEffort" relation-name="Facility" to-value-field="facility"/>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" value="PROD_ORDER_TASK">
            <if-not-empty field="workEffort.workEffortParentId">
                <entity-and entity-name="WorkEffortGoodStandard" list="workEffortGoodStandards">
                    <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                    <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
               <first-from-list list="workEffortGoodStandards" entry="workEffortGoodStandard"/>
            </if-not-empty>
        </if-compare>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" value="PROD_ORDER_HEADER">
            <entity-and entity-name="WorkEffortGoodStandard" list="workEffortGoodStandards">
                <field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
                <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                <order-by field-name="-fromDate"/>
            </entity-and>
           <first-from-list list="workEffortGoodStandards" entry="workEffortGoodStandard"/>
        </if-compare>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <if-not-empty field="costComponentCalc.costGlAccountTypeId">
            <set field="creditEntry.glAccountTypeId" from-field="costComponentCalc.costGlAccountTypeId"/>
            <else>
                <if-not-empty field="costComponent.fixedAssetId">
                    <!-- FIXME: 20091119 There is currently no way of determining what glAccountTypeId should be used when a
                                         CostComponent has been created based on a FixedAsset's FixedAssetStdCost records,
                                         hard-coding as OPERATING_EXPENSE until that is resolved. -->
                    <set field="creditEntry.glAccountTypeId" value="OPERATING_EXPENSE"/>
                </if-not-empty>
            </else>
        </if-not-empty>
        <set field="creditEntry.organizationPartyId" from-field="facility.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="workEffortGoodStandard.productId"/>
        <set field="creditEntry.origAmount" from-field="costComponent.cost"/>
        <set field="creditEntry.origCurrencyUomId" from-field="costComponent.costUomId"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <if-not-empty field="costComponentCalc.offsettingGlAccountTypeId">
            <set field="debitEntry.glAccountTypeId" value="costComponentCalc.offsettingGlAccountTypeId"/>
        <else>
            <set field="debitEntry.glAccountTypeId" value="WIP_INVENTORY"/>
        </else>
        </if-not-empty>
        <set field="debitEntry.organizationPartyId" from-field="facility.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="workEffortGoodStandard.productId"/>
        <set field="debitEntry.origAmount" from-field="costComponent.cost"/>
        <set field="debitEntry.origCurrencyUomId" from-field="costComponent.costUomId"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from-field="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="MANUFACTURING"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!-- AcctgTrans For Inventory Item Owner Change Service -->
    <simple-method method-name="createAcctgTransForInventoryItemOwnerChange" short-description="Create an accounting transactions for Inventory Item Owner Change (D: INVENTORY_ACCOUNT(old Owner) INVENTORY_ACCOUNT(new Owner), C: INVENTORY_XFER_IN(oldOwner) INVENTORY_XFER_OUT(new Owner))">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="InventoryItem" value-field="inventoryItem"/>

        <!-- TODO: handle serialized inventory -->
        <if-not-empty field="inventoryItem.quantityOnHandTotal">
            <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                <calcop operator="multiply">
                    <calcop operator="get" field="inventoryItem.quantityOnHandTotal"/>
                    <calcop operator="get" field="inventoryItem.unitCost"/>
                </calcop>
            </calculate>
        </if-not-empty>

	    <set field="reciprocalItemSeqId" value="0" type="Long"/>
	    <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

	    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) for old OwnerPartyId  -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="oldPartyCreditEntry"/>
        <set field="oldPartyCreditEntry.debitCreditFlag" value="C"/>
        <set field="oldPartyCreditEntry.glAccountTypeId" value="INVENTORY_XFER_IN"/>
        <set field="oldPartyCreditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="oldPartyCreditEntry.origAmount" from-field="origAmount"/>
        <set field="oldPartyCreditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="oldPartyCreditEntry.organizationPartyId" from-field="parameters.oldOwnerPartyId"/>
        <set field="oldPartyCreditEntry.reciprocalSeqId" from-field="formatPadded"/>

        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="oldPartyDebitEntry"/>
        <set field="oldPartyDebitEntry.debitCreditFlag" value="D"/>
        <set field="oldPartyDebitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="oldPartyDebitEntry.origAmount" from-field="origAmount"/>
        <set field="oldPartyDebitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="oldPartyDebitEntry.organizationPartyId" from-field="parameters.oldOwnerPartyId"/>
        <set field="oldPartyDebitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="oldPartyDebitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) for New ownerPartyId -->

	    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="newPartyCreditEntry"/>
        <set field="newPartyCreditEntry.debitCreditFlag" value="C"/>
        <set field="newPartyCreditEntry.glAccountTypeId" value="INVENTORY_XFER_IN"/>
        <set field="newPartyCreditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="newPartyCreditEntry.origAmount" from-field="origAmount"/>
        <set field="newPartyCreditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="newPartyCreditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="newPartyCreditEntry.reciprocalSeqId" from-field="formatPadded"/>

        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="newPartyDebitEntry"/>
        <set field="newPartyDebitEntry.debitCreditFlag" value="D"/>
        <set field="newPartyDebitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="newPartyDebitEntry.origAmount" from-field="origAmount"/>
        <set field="newPartyDebitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="newPartyDebitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="newPartyDebitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="newPartyDebitEntry.reciprocalSeqId" from-field="formatPadded"/>

        <set field="acctgTransEntries[]" from-field="oldPartyCreditEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="oldPartyDebitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="newPartyCreditEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="newPartyDebitEntry" type="Object"/>

        <!-- Set header fields (AcctgTrans) -->

        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from-field="parameters.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <!--automatic GL posting service triggered when inventory is issued to a work effort-->

    <simple-method method-name="createAcctgTransForWorkEffortIssuance" short-description="Create an accounting transaction for inventory that is issued to a work effort (Type: INVENTORY D: RAWMAT_INVENTORY, C: WIP_INVENTORY)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="WorkEffort" value-field="workEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" value="PROD_ORDER_TASK">
            <if-not-empty field="workEffort.workEffortParentId">
                <entity-and entity-name="WorkEffortGoodStandard" list="workEffortGoodStandards">
                    <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                    <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
               <first-from-list list="workEffortGoodStandards" entry="workEffortGoodStandard"/>
            </if-not-empty>
        </if-compare>
        <entity-one entity-name="WorkEffortInventoryAssign" value-field="workEffortInventoryAssign">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            <field-map field-name="inventoryItemId" from-field="parameters.inventoryItemId"/>
        </entity-one>
        <get-related-one value-field="workEffortInventoryAssign" relation-name="InventoryItem" to-value-field="inventoryItem"/>
        <!-- TODO: handle serialized inventory -->
        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="multiply">
                <calcop operator="get" field="workEffortInventoryAssign.quantity"/>
                <calcop operator="get" field="inventoryItem.unitCost"/>
            </calcop>
        </calculate>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="WIP_INVENTORY"/>
        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="workEffortGoodStandard.productId"/>
        <set field="debitEntry.origAmount" from-field="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="RAWMAT_INVENTORY"/>
        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from-field="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from-field="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!-- Service for the automatic creation of accounting transaction for inventory that is issued for fixed asset maintenance -->
    <simple-method method-name="createAcctgTransForFixedAssetMaintIssuance" short-description="Create an accounting transaction for inventory that is issued for fixed asset maintenance (Type: INVENTORY D: INVENTORY_ACCOUNT, C: FIXED_ASSET_MAINT)">
        <!-- retrieve ledger rounding properties -->
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="ItemIssuance" value-field="itemIssuance"/>
        <get-related-one value-field="itemIssuance" relation-name="InventoryItem" to-value-field="inventoryItem"/>

        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="multiply">
                <calcop operator="get" field="itemIssuance.quantity"/>
                <calcop operator="get" field="inventoryItem.unitCost"/>
            </calcop>
        </calculate>

        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="creditEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from-field="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from-field="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
		<set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="FIXED_ASSET_MAINT"/>
        <set field="debitEntry.organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from-field="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from-field="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="inventoryItem.currencyUomId"/>
		<set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.fixedAssetId" from-field="itemIssuance.fixedAssetId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <simple-method method-name="createAcctgTransAndEntriesForIncomingPayment" short-description="Create an accounting transaction for an incoming payment" >
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <calculate field="amountAppliedTotal"><number value="0"/></calculate>
        <calculate field="diffAmount"><number value="0"/></calculate>

        <entity-one entity-name="Payment" value-field="payment"/>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isReceipt" ret-field="isReceiptValue">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>

        <if-compare field="isReceiptValue" operator="equals" value="true" type="Boolean">
            <set field="origAmount" from-field="payment.actualCurrencyAmount"/>
            <set field="origCurrencyUomId" from-field="payment.actualCurrencyUomId"/>
            <set field="currencyUomId" from-field="payment.currencyUomId"/>
            <set field="amount" from-field="payment.amount"/>
            <set field="organizationPartyId" from-field="payment.partyIdTo"/>
            <set field="partyId" from-field="payment.partyIdFrom"/>
            <set field="paymentId" from-field="payment.paymentId"/>

			<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
            <!-- Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <!-- TODO -->
            <!--set field="debitEntry.glAccountTypeId" value=""/-->
            <set field="debitEntry.amount" from-field="amount"/>
            <set field="debitEntry.currencyUomId" from-field="currencyUomId"/>
            <set field="debitEntry.origAmount" from-field="origAmount"/>
            <set field="debitEntry.origCurrencyUomId" from-field="origCurrencyUomId"/>
            <set field="debitEntry.organizationPartyId" from-field="organizationPartyId"/>
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

            <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId"/>
            </entity-one>
            <set field="creditGlAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
            <!-- credit for diff amount-->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntryWithDiffAmount"/>
            <set field="creditEntryWithDiffAmount.debitCreditFlag" value="C"/>
            <set field="creditEntryWithDiffAmount.amount" from-field="amount"/>
            <set field="creditEntryWithDiffAmount.currencyUomId" from-field="currencyUomId"/>
            <set field="creditEntryWithDiffAmount.origAmount" from-field="origAmount"/>
            <set field="creditEntryWithDiffAmount.origCurrencyUomId" from-field="origCurrencyUomId"/>
            <set field="creditEntryWithDiffAmount.glAccountId" from-field="payment.overrideGlAccountId"/>
            <set field="creditEntryWithDiffAmount.glAccountTypeId" from-field="creditGlAccountTypeId"/>
            <set field="creditEntryWithDiffAmount.organizationPartyId" from-field="organizationPartyId"/>
            <set field="creditEntryWithDiffAmount.reciprocalSeqId" from-field="formatPadded"/>
            <set field="acctgTransEntries[]" from-field="creditEntryWithDiffAmount" type="Object"/>

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="partyId"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentId"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INCOMING_PAYMENT"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="payment.effectiveDate"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            <!-- Now create accounting transactions for the payment applications -->
            <!-- not use for SGC -->
<!--             <get-related value-field="payment" relation-name="PaymentApplication" list="paymentApplications"/> -->
<!--             <iterate list="paymentApplications" entry="paymentApplication"> -->
<!--                 <set field="createAcctgTransAndEntriesForPaymentApplicationInMap.paymentApplicationId" from-field="paymentApplication.paymentApplicationId"/> -->
<!--                 <if-compare field="payment.paymentTypeId" operator="equals" value="VENDOR_REFUND">                	 -->
<!--                     <call-service service-name="createAcctgTransAndEntriesForVendorRefundPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
<!--                         <result-to-field result-name="acctgTransId"/> -->
<!--                     </call-service> -->
<!--                 </if-compare> -->
<!--  				<if> -->
<!--                 	<condition> -->
<!--                 		<and>                			 -->
<!--                 			<if-compare operator="not-equals" value="VENDOR_REFUND" field="payment.paymentTypeId"/> -->
<!--                 			<if-compare operator="not-equals" value="INVEST_PAYMENT" field="payment.paymentTypeId"/> -->
<!--                 			<if-compare operator="not-equals" value="OTHER_INCOME_PAYMENT" field="payment.paymentTypeId"/> -->
<!--                 		</and> -->
<!--                 	</condition> -->
<!--                     <then> -->
<!--                     	<call-service service-name="createAcctgTransAndEntriesForPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
<!-- 	                    	<result-to-field result-name="acctgTransId"/> -->
<!-- 	                	</call-service> -->
<!--                     </then>                               -->
<!--                 </if> -->
<!--                 <log level="info" message="Accounting transaction ${acctgTransId} created for payment application ${paymentApplication.paymentApplicationId}"/>                  -->
<!--             </iterate> -->
        </if-compare>
    </simple-method>

    <simple-method method-name="createAcctgTransForCustomerReturnInvoice" short-description="Create an accounting transaction for a Customer Return Invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="Invoice" value-field="invoice"/>

        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <!-- Check invoiceTypeId. This service works only for CustomerReturns -->
        <if-compare field="invoiceType.invoiceTypeId" operator="equals" value="CUST_RTN_INVOICE">
            <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
            <set field="transPartyRoleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="acctgTransTypeId" value="CUST_RTN_INVOICE"/>
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="INV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="ITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="CRT_SALES_TAX_ADJ"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
						<set field="amountFromInvoice" type="BigDecimal" value="0"/>
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>
		                <!-- This InvoiceItem amount. -->
		                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>
						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <!-- Debit -->
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

    		            <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>
		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>
		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="amountFromInvoice" operator="less" value="0">
                           <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
							<clear-field field="debitEntry"/>
							<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
			                <set field="debitEntry.debitCreditFlag" value="D"/>
			                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
			                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
			                <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
			                <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="debitEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="debitEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
			                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
			                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
			                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			            <else>
							<!-- Credit -->
							<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
				            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
				            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			            </else>
						</if-compare-field>
	                </then>
					<else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
								<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

								<set field="amountFromInvoice" type="BigDecimal" value="0"/>
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>
				                <!-- This InvoiceItem amount. -->
				                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>

								<!-- Debit -->
								<clear-field field="debitEntry"/>
				                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				                <set field="debitEntry.debitCreditFlag" value="D"/>
				                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
				                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
				                <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
				                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
				                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

								<!-- Credit -->
								<clear-field field="creditEntry"/>
					            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
					            <set field="creditEntry.debitCreditFlag" value="C"/>
					            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
					            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
					            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
					            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
					            <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
					            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
					            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
							</then>
						</if>
					</else>
	            </if>
            </iterate>
            <!-- debit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>
<!--             <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos"> -->
<!--                 <iterate entry="taxAuthGeoId" list="taxAuthGeoIds"> -->
<!--                     <clear-field field="debitEntry"/> -->
<!--                     <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--                     <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--                     <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdTo"/> -->
<!--                     <call-class-method method-name="getInvoiceTaxTotalForTaxAuthPartyAndGeo" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                             ret-field="taxAmount"> -->
<!--                         <field field="invoice" type="GenericValue"/> -->
<!--                         <field field="taxAuthPartyId" type="String"/> -->
<!--                         <field field="taxAuthGeoId" type="String"/> -->
<!--                     </call-class-method> -->
<!--                     <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!--                     <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--                     <set field="debitEntry.partyId" from-field="taxAuthPartyId"/> -->
<!--                     <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/> -->
<!--                     <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
<!--                 </iterate> -->
<!--             </iterate-map> -->
<!--             Another entry for tax not attributed to a taxAuthPartyId -->
<!--             <clear-field field="debitEntry"/> -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--             <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--             <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/> -->
<!--             <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="taxAmount"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->
<!--             <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!--             <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
          <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
            		<clear-field field="debitEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
							<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	                		<clear-field field="debitEntry"/>
		                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                    <set field="debitEntry.debitCreditFlag" value="D"/>
		                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
		                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="debitEntry.partyId" from-field="taxAuthPartyId"/>
		                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/>
					        <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
					        <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

							<entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="debitEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoiceType.invoiceTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>
		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="debitEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="debitEntry.glAccountTypeId" value="VAT_OUT_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
		                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

	                    	<!-- Credit -->
							<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
				            <set field="creditEntry.origAmount" from-field="taxAmount"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
				            <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>
            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if>
                <condition>
                    <and>
                        <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
					<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                    <clear-field field="debitEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                    <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                   	<!-- Credit -->
					<clear-field field="creditEntry"/>
		            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		            <set field="creditEntry.debitCreditFlag" value="C"/>
		            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
		            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
		            <set field="creditEntry.origAmount" from-field="taxAmount"/>
		            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
		            <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
		            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                </then>
            </if>


<!--             Credit -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--             <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!--             <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--             <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/> -->

<!--             <call-class-method method-name="getInvoiceTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="invoiceTaxTotal"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->

<!--             <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalAmountFromInvoice"/> -->
<!--                     <calcop operator="get" field="invoiceTaxTotal"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/> -->
<!--             <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--             <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/> -->
<!--             <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" from-field="acctgTransTypeId"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="invoice.invoiceDate"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>

            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        <else>
            <!-- This invoice is not a Customer Return. Return error -->
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingInvoiceBadInvoiceType"/>
            </add-error>
        </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="createAcctgTransForVendorReturnInvoice" short-description="Create an accounting transaction for a Vendor Return Invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-one entity-name="Invoice" value-field="invoice"/>

        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <!-- Check invoiceTypeId. This service works only for CustomerReturns -->
        <if-compare field="invoiceType.invoiceTypeId" operator="equals" value="PURC_RTN_INVOICE">
            <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
            <set field="transPartyRoleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="acctgTransTypeId" value="PURC_RTN_INVOICE"/>
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PINV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="SRT_SALES_TAX_ADJ"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="SRT_GOODSALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="SRT_SERVSALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="SRT_SALESFA_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
						<set field="amountFromInvoice" type="BigDecimal" value="0"/>
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>
		                <!-- This InvoiceItem amount. -->
		                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>
						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <!-- Debit -->
		                <clear-field field="creditEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		                <set field="creditEntry.debitCreditFlag" value="C"/>
		                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
		                <set field="creditEntry.partyId" from-field="invoice.partyId"/>
		                <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
		                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="creditEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="creditEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
		                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

    		            <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>

		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="amountFromInvoice" operator="less" value="0">
                           <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
							<clear-field field="creditEntry"/>
							<make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			                <set field="creditEntry.debitCreditFlag" value="C"/>
			                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
			                <set field="creditEntry.partyId" from-field="invoice.partyId"/>
			                <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
			                <set field="creditEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="creditEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="creditEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
			                <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
			                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
			                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			            <else>
							<!-- Credit -->
							<clear-field field="debitEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				            <set field="debitEntry.debitCreditFlag" value="D"/>
				            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
				            <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
				            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
				            <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
				            <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			            </else>
						</if-compare-field>
	                </then>
					<else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
								<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

								<set field="amountFromInvoice" type="BigDecimal" value="0"/>
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>
				                <!-- This InvoiceItem amount. -->
				                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>

								<!-- Debit -->
								<clear-field field="creditEntry"/>
				                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				                <set field="creditEntry.debitCreditFlag" value="C"/>
				                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				                <set field="creditEntry.partyId" from-field="invoice.partyId"/>
				                <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
				                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="creditEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="creditEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
				                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

								<!-- Credit -->
								<clear-field field="debitEntry"/>
					            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
					            <set field="debitEntry.debitCreditFlag" value="D"/>
					            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
					            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
					            <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
					            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
					            <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
								<set field="debitEntry.productId" from-field="invoiceItem.productId"/>
					            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
							</then>
						</if>
					</else>
	            </if>
            </iterate>
            <!-- debit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>
<!--             <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos"> -->
<!--                 <iterate entry="taxAuthGeoId" list="taxAuthGeoIds"> -->
<!--                     <clear-field field="debitEntry"/> -->
<!--                     <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--                     <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--                     <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdTo"/> -->
<!--                     <call-class-method method-name="getInvoiceTaxTotalForTaxAuthPartyAndGeo" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                             ret-field="taxAmount"> -->
<!--                         <field field="invoice" type="GenericValue"/> -->
<!--                         <field field="taxAuthPartyId" type="String"/> -->
<!--                         <field field="taxAuthGeoId" type="String"/> -->
<!--                     </call-class-method> -->
<!--                     <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!--                     <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--                     <set field="debitEntry.partyId" from-field="taxAuthPartyId"/> -->
<!--                     <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/> -->
<!--                     <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
<!--                 </iterate> -->
<!--             </iterate-map> -->
<!--             Another entry for tax not attributed to a taxAuthPartyId -->
<!--             <clear-field field="debitEntry"/> -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--             <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--             <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/> -->
<!--             <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="taxAmount"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->
<!--             <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!--             <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
          <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
            		<clear-field field="creditEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
							<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	                		<clear-field field="creditEntry"/>
		                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		                    <set field="creditEntry.debitCreditFlag" value="C"/>
		                    <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="creditEntry.origAmount" from-field="taxAmount"/>
		                    <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="creditEntry.partyId" from-field="taxAuthPartyId"/>
					        <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
					        <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
		                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

							<entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="creditEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoiceType.invoiceTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>
		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="creditEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="creditEntry.glAccountTypeId" value="VAT_DED_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
		                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

	                    	<!-- Credit -->
							<clear-field field="debitEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				            <set field="debitEntry.debitCreditFlag" value="D"/>
				            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
				            <set field="debitEntry.origAmount" from-field="taxAmount"/>
				            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
				            <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
					        <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
					        <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>
            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if>
                <condition>
                    <and>
                        <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
					<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                    <clear-field field="creditEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
                    <set field="creditEntry.origAmount" from-field="taxAmount"/>
                    <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="creditEntry.partyId" from-field="invoice.partyId"/>
                    <set field="creditEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

                   	<!-- Credit -->
					<clear-field field="creditEntry"/>
		            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		            <set field="debitEntry.debitCreditFlag" value="D"/>
		            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
		            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
		            <set field="debitEntry.origAmount" from-field="taxAmount"/>
		            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
		            <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
		            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                </then>
            </if>


<!--             Credit -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--             <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!--             <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--             <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/> -->

<!--             <call-class-method method-name="getInvoiceTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="invoiceTaxTotal"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->

<!--             <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalAmountFromInvoice"/> -->
<!--                     <calcop operator="get" field="invoiceTaxTotal"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/> -->
<!--             <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--             <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/> -->
<!--             <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" from-field="acctgTransTypeId"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyId"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>

            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        <else>
            <!-- This invoice is not a Customer Return. Return error -->
            <add-error>
                <fail-property resource="AccountingUiLabels" property="AccountingInvoiceBadInvoiceType"/>
            </add-error>
        </else>
        </if-compare>
    </simple-method>

   <!-- Service for the automatic creation of accounting transaction for Payrol Invoice -->
    <simple-method method-name="createAcctgTransForPayrolInvoice" short-description="Create an accounting transaction for a payrol invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if-compare field="invoiceType.invoiceTypeId" operator="equals" value="PAYROL_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PINV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
            </entity-condition>

			<set field="totalSoc" type="BigDecimal" value="0"/>
			<set field="totalMed" type="BigDecimal" value="0"/>
			<set field="totalMd" type="BigDecimal" value="0"/>
			<set field="totalTun" type="BigDecimal" value="0"/>

			<set field="totalSocSec" type="BigDecimal" value="0"/>
			<set field="totalTaxMed" type="BigDecimal" value="0"/>
			<set field="totalTaxMd" type="BigDecimal" value="0"/>
			<set field="totalTaxTun" type="BigDecimal" value="0"/>
			<set field="totalTaxFed" type="BigDecimal" value="0"/>
			<set field="totalDDGross" type="BigDecimal" value="0"/>

            <iterate list="invoiceItems" entry="invoiceItem">
                <set field="amountFromOrder" type="BigDecimal" value="0"/>
                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                <set field="quantity" type="BigDecimal" value="1"/>
                <if-not-empty field="invoiceItem.quantity">
                    <set field="quantity" from-field="invoiceItem.quantity"/>
                </if-not-empty>
                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
                <calculate field="totalAmountFromInvoice" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="add">
                        <calcop operator="get" field="totalAmountFromInvoice"/>
                        <calcop operator="get" field="amountFromInvoice"/>
                    </calcop>
                </calculate>
<!--                 <get-related value-field="invoiceItem" relation-name="OrderItemBilling" list="orderItemBillings"/> -->
<!--                 <iterate list="orderItemBillings" entry="orderItemBilling"> -->
<!--                     <get-related-one value-field="orderItemBilling" relation-name="OrderItem" to-value-field="orderItem"/> -->
<!--                     <calculate field="amountFromOrder" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                         <calcop field="amountFromOrder" operator="add"> -->
<!--                             <calcop operator="multiply"> -->
<!--                                 <calcop operator="get" field="orderItemBilling.quantity"/> -->
<!--                                 <calcop operator="get" field="orderItem.unitPrice"/> -->
<!--                             </calcop> -->
<!--                         </calcop> -->
<!--                     </calculate> -->
<!--                 </iterate> -->
                <!-- Debit -->
                <!-- Note VietTB : not use -->
<!--                 <if> -->
<!--                     <condition> -->
<!--                         <and> -->
<!--                             <if-compare-field field="amountFromInvoice" to-field="amountFromOrder" operator="not-equals"/> -->
<!--                             <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal"/> -->
<!--                         </and> -->
<!--                     </condition> -->
<!--                     <then> -->
<!--                         <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--                         <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--                         <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--                         <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--                         <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!--                         <set field="debitEntry.productId" from-field="invoiceItem.productId"/> -->
<!--                         <set field="debitEntry.glAccountTypeId" value="PURCHASE_PRICE_VAR"/> -->
<!--                         <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                             <calcop operator="subtract"> -->
<!--                                 <calcop operator="get" field="amountFromInvoice"/> -->
<!--                                 <calcop operator="get" field="amountFromOrder"/> -->
<!--                             </calcop> -->
<!--                         </calculate> -->
<!--                         <set field="debitEntry.origAmount" from-field="origAmount"/> -->
<!--                         <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--                         <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
<!--                     </then> -->
<!--                 </if> -->
                <!-- Note for VietTB : not use -->
<!--                 <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal">                     -->
<!--                     <set field="origAmount" from-field="amountFromOrder"/> -->
<!-- 					Process for Credit 334, Debit 3382,3383,3384,3385,3386 -->
<!--                     <if-compare operator="equals" value="PAYROL_DD_SOC_EMPL" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalSocSec" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalSocSec"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare> -->
<!--                     <if-compare operator="equals" value="PAYROL_DD_MED_EMPL" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalTaxMed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalTaxMed"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare> -->
<!--                     <if-compare operator="equals" value="PAYROL_DD_MD_WITHOL" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalTaxMd" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalTaxMd"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare> -->
<!--                     <if-compare operator="equals" value="PAYROL_DD_TUN_FEE" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalTaxTun" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalTaxTun"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare> -->
<!--                     <if-compare operator="equals" value="PAYROL_TAX_FEDERAL" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalTaxFed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalTaxFed"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare>                  	                	                	                    -->
<!--                    Process for Debit 641,642,627, Credit 3382,3383,3384,3386 -->
<!--                     <if-compare operator="contains" value="PAYROL_SOCS" field="invoiceItem.invoiceItemTypeId"> -->
<!-- 		                <calculate field="totalSoc" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalSoc"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare> -->
<!--                 	<if-compare operator="contains" value="PAYROL_MEDS" field="invoiceItem.invoiceItemTypeId">	 -->
<!--                			<calculate field="totalMed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalMed"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate>		 -->
<!--                 	</if-compare> -->
<!--                 	<if-compare operator="contains" value="PAYROL_MDS" field="invoiceItem.invoiceItemTypeId"> -->
<!--                 		<calculate field="totalMd" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalMd"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate>			 -->
<!--                 	</if-compare> -->
<!--                 	<if-compare operator="contains" value="PAYROL_TUNS" field="invoiceItem.invoiceItemTypeId"> -->
<!--                 		<calculate field="totalTun" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                    <calcop operator="add"> -->
<!-- 		                        <calcop operator="get" field="totalTun"/> -->
<!-- 		                        <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                    </calcop> -->
<!-- 		                </calculate> -->
<!--                 	</if-compare>                	                	                	 -->
<!--                 <else>                 -->
                    <set field="origAmount" from-field="amountFromInvoice"/>
					<!-- Process for Credit 334, Debit 3383,3384,3385,3386 -->
                    <if-compare operator="equals" value="PAYROL_DD_SOC_EMPL" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalSocSec" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalSocSec"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>
		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			            <clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                    <if-compare operator="equals" value="PAYROL_DD_MED_EMPL" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalTaxMed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalTaxMed"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			            <clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                    <if-compare operator="equals" value="PAYROL_DD_MD_WITHOL" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalTaxMd" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalTaxMd"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			            <clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                    <if-compare operator="equals" value="PAYROL_DD_TUN_FEE" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalTaxTun" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalTaxTun"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			            <clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                    <if-compare operator="equals" value="PAYROL_TAX_FEDERAL" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalTaxFed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalTaxFed"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			            <clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                    <!-- Process for Debit 641,642,627, Credit 3382,3383,3384,3386 -->
                    <if-compare operator="contains" value="PAYROL_SOCS" field="invoiceItem.invoiceItemTypeId">
		                <calculate field="totalSoc" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalSoc"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

						<entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal">
			                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/>
			                	<field-map field-name="invItemTypeContain" value="PAYROL_SOCS"/>
			            </entity-one>
						<clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                	<if-compare operator="contains" value="PAYROL_MEDS" field="invoiceItem.invoiceItemTypeId">
               			<calculate field="totalMed" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalMed"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

						<entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal">
			                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/>
			                	<field-map field-name="invItemTypeContain" value="PAYROL_MEDS"/>
			            </entity-one>
						<clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                	<if-compare operator="contains" value="PAYROL_MDS" field="invoiceItem.invoiceItemTypeId">
                		<calculate field="totalMd" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalMd"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

						<entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal">
			                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/>
			                	<field-map field-name="invItemTypeContain" value="PAYROL_MDS"/>
			            </entity-one>
						<clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                	<if-compare operator="contains" value="PAYROL_TUNS" field="invoiceItem.invoiceItemTypeId">
                		<calculate field="totalTun" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="add">
		                        <calcop operator="get" field="totalTun"/>
		                        <calcop operator="get" field="amountFromInvoice"/>
		                    </calcop>
		                </calculate>

						<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <clear-field field="debitEntry"/>
		                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="origAmount"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

						<entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal">
			                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/>
			                	<field-map field-name="invItemTypeContain" value="PAYROL_TUNS"/>
			            </entity-one>
						<clear-field field="creditEntry"/>
			            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			            <set field="creditEntry.debitCreditFlag" value="C"/>
			            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
			            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
			            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/>
			            <set field="creditEntry.origAmount" from-field="origAmount"/>
			            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                	</if-compare>
                	<if>
                		<condition>
                			<and>
                				<not> <if-compare operator="equals" value="PAYROL_DD_SOC_EMPL" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="equals" value="PAYROL_DD_MED_EMPL" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="equals" value="PAYROL_DD_MD_WITHOL" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="equals" value="PAYROL_DD_TUN_FEE" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="equals" value="PAYROL_TAX_FEDERAL" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="contains" value="PAYROL_TUNS" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="contains" value="PAYROL_MEDS" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="contains" value="PAYROL_SOCS" field="invoiceItem.invoiceItemTypeId" /> </not>
                				<not> <if-compare operator="contains" value="PAYROL_MDS" field="invoiceItem.invoiceItemTypeId" /> </not>
                			</and>
                		</condition>
                		<then>
							<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
			                <clear-field field="debitEntry"/>
			                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
			                <set field="debitEntry.debitCreditFlag" value="D"/>
			                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
			                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
			                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
			                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
			                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
			                <set field="debitEntry.origAmount" from-field="origAmount"/>
			                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

			           		<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
				            <set field="creditEntry.origAmount" from-field="origAmount"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                		</then>
                	</if>

<!--                 </else> -->
<!--                 </if-compare> -->
            </iterate>
            <!-- Note for VietTB: not use -->
            <!-- debit entry for SALES_TAX-->
<!--             <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                   ret-field="taxAuthPartyAndGeos"> -->
<!--                 <field field="invoice" type="org.ofbiz.entity.GenericValue"/> -->
<!--             </call-class-method> -->

<!--            <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">            	  -->
<!--                 <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">                	  -->
<!--             		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker" -->
<!--                   		ret-field="invoiceItemTaxAuthPartyAndGeos"> -->
<!--                 		<field field="invoice" type="org.ofbiz.entity.GenericValue"/> -->
<!-- 		                <field field="taxAuthPartyId" type="String"/> -->
<!-- 		                <field field="taxAuthGeoId" type="String"/>  -->
<!--             		</call-class-method> -->
<!--             		<clear-field field="debitEntry"/> -->
<!--             		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">               	 -->
<!-- 	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos"> 	                     -->
<!-- 		                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!-- 		                    <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!-- 		                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/> -->

<!-- 							<set field="quantity" type="BigDecimal" value="1"/> -->
<!-- 			                <if-not-empty field="invoiceItemTax.quantity"> -->
<!-- 			                    <set field="quantity" from-field="invoiceItemTax.quantity"/> -->
<!-- 			                </if-not-empty> -->

<!-- 			                <set field="amount" type="BigDecimal" value="0"/> -->
<!-- 			                <if-not-empty field="invoiceItemTax.amount"> -->
<!-- 			                    <set field="amount" from-field="invoiceItemTax.amount"/> -->
<!-- 			                </if-not-empty> -->

<!-- 			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 			                    <calcop operator="multiply"> -->
<!-- 			                        <calcop operator="get" field="quantity"/> -->
<!-- 			                        <calcop operator="get" field="amount"/> -->
<!-- 			                    </calcop> -->
<!-- 			                </calculate>	                    		                     -->

<!-- 		                    <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!-- 		                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 		                    <set field="debitEntry.partyId" from-field="taxAuthPartyId"/> -->
<!-- 		                    <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/> -->

<!-- 		                    <clear-field field="taxAuthorityRateType"/> -->
<!-- 		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType"> -->
<!-- 		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/> -->
<!-- 		                    </entity-one> -->

<!-- 		                    <clear-field field="taxAuthorityRateTypeGlAccount"/> -->
<!-- 		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount"> -->
<!-- 		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/> -->
<!-- 		                        <field-map field-name="organizationPartyId" from-field="debitEntry.organizationPartyId"/> -->
<!-- 		                        <field-map field-name="invoiceTypeId" from-field="invoiceType.parentTypeId"/> -->
<!-- 		                    </entity-one> -->

<!-- 		                    <if-not-empty field="taxAuthorityRateTypeGlAccount"> -->
<!-- 		                        <set field="debitEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/> -->
<!-- 		                        <else> -->
<!-- 		                            <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/> -->
<!-- 		                        </else> -->
<!-- 		                    </if-not-empty> 		                                        -->
<!-- 		                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>	                    		                      -->
<!-- 	                    </iterate> -->
<!-- 					</if-not-empty> 	                     -->
<!--                 </iterate> -->
<!--             </iterate-map> -->
<!--             Another entry for tax not attributed to a taxAuthPartyId -->
<!--             <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="taxAmount"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->
<!--             <if> -->
<!--                 <condition> -->
<!--                     <and> -->
<!--                         <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/> -->
<!--                     </and> -->
<!--                 </condition> -->
<!--                 <then> -->
<!--                     <clear-field field="debitEntry"/> -->
<!--                     <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--                     <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--                     <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--                     <set field="debitEntry.origAmount" from-field="taxAmount"/> -->
<!--                     <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--                     <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/> -->
<!--                     <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>                   -->
<!--                 </then> -->
<!--             </if>         -->
<!--             <calculate field="totalDDGross" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalTaxMed"/> -->
<!--                     <calcop operator="get" field="totalTaxMd"/> -->
<!--                     <calcop operator="get" field="totalTaxTun"/> -->
<!--                     <calcop operator="get" field="totalTaxFed"/> -->
<!--                     <calcop operator="get" field="totalSocSec"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             <log message="VIETTB totalDDGross ${totalDDGross} totalTaxMed ${totalTaxMed} totalTaxMd ${totalTaxMd} totalTaxTun ${totalTaxTun} totalTaxFed ${totalTaxFed} totalSocSec ${totalSocSec}" level="info"/> -->

<!-- 			<set field="totalCompanyPaid" type="BigDecimal" value="0"/>			 -->
<!--             <calculate field="totalCompanyPaid" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalSoc"/> -->
<!--                     <calcop operator="get" field="totalMed"/> -->
<!--                     <calcop operator="get" field="totalMd"/> -->
<!--                     <calcop operator="get" field="totalTun"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->

<!--             Credit -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--             <set field="creditEntry.debitCreditFlag" value="C"/> -->

<!--             <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--             <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/> -->
<!--             <call-class-method method-name="getInvoiceTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="invoiceTaxTotal"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method>             -->
<!--             <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalAmountFromInvoice"/> -->
<!--                     <calcop operator="get" field="invoiceTaxTotal"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             subtract because TotalDDgross negative, totalCompanyPaid (3383,3384,3382,3386) not sum for 334, transaction is D 641,642, C :3382, 3383,3384,3386                                 -->
<!--             <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="subtract"> -->
<!--                     <calcop operator="get" field="totalAmountFromInvoice"/> -->
<!--                     <calcop operator="get" field="totalDDGross"/> -->
<!--                     <calcop operator="get" field="totalCompanyPaid"/> -->
<!--                 </calcop> -->
<!--             </calculate>            -->

<!--             <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/> -->
<!--             <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--             <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!--             <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->

			<!-- Debit entry for 334, but totalDDGross < 0, change to credit -->
<!-- 			<clear-field field="creditEntry"/> -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--             <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!--             <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--             <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--             <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!--             <set field="creditEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/> -->
<!--             <set field="creditEntry.origAmount" from-field="totalDDGross"/> -->
<!--             <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>             -->

			<!-- Transaction for all Company Paid 3382,3383,3384,3386			 -->
<!-- 			<if-compare operator="greater" value="0" field="totalSoc"> -->
<!-- 	            <entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal"> -->
<!-- 	                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	                	<field-map field-name="invItemTypeContain" value="PAYROL_SOCS"/> -->
<!-- 	            </entity-one> -->
<!-- 				<clear-field field="creditEntry"/> -->
<!-- 	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!-- 	            <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!-- 	            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 	            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 	            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/> -->
<!-- 	            <set field="creditEntry.origAmount" from-field="totalSoc"/> -->
<!-- 	            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>     -->
<!-- 			</if-compare> -->

<!-- 			<if-compare operator="greater" value="0" field="totalMed"> -->
<!-- 	            <entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal"> -->
<!-- 	                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	                	<field-map field-name="invItemTypeContain" value="PAYROL_MEDS"/> -->
<!-- 	            </entity-one> -->
<!-- 				<clear-field field="creditEntry"/> -->
<!-- 	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!-- 	            <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!-- 	            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 	            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 	            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/> -->
<!-- 	            <set field="creditEntry.origAmount" from-field="totalMed"/> -->
<!-- 	            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>     -->
<!-- 			</if-compare>    -->
<!-- 			<if-compare operator="greater" value="0" field="totalMd"> -->
<!-- 	            <entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal"> -->
<!-- 	                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	                	<field-map field-name="invItemTypeContain" value="PAYROL_MDS"/> -->
<!-- 	            </entity-one> -->
<!-- 				<clear-field field="creditEntry"/> -->
<!-- 	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!-- 	            <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!-- 	            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 	            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 	            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/> -->
<!-- 	            <set field="creditEntry.origAmount" from-field="totalMd"/> -->
<!-- 	            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>     -->
<!-- 			</if-compare>  -->
<!-- 			<if-compare operator="greater" value="0" field="totalTun"> -->
<!-- 	            <entity-one entity-name="GlAccountReciprocal" value-field="glAccountReciprocal"> -->
<!-- 	                	<field-map field-name="organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	                	<field-map field-name="invItemTypeContain" value="PAYROL_TUNS"/> -->
<!-- 	            </entity-one> -->
<!-- 	            <log message="VIETTB glAccountReciprocal.glAccountReciprocalId ${glAccountReciprocal.glAccountReciprocalId}" level="info"/> -->
<!-- 				<clear-field field="creditEntry"/> -->
<!-- 	            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!-- 	            <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!-- 	            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 	            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 	            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 	            <set field="creditEntry.glAccountTypeId" from-field="glAccountReciprocal.glAccountReciprocalId"/> -->
<!-- 	            <set field="creditEntry.origAmount" from-field="totalTun"/> -->
<!-- 	            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 	            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>     -->
<!-- 			</if-compare> 			 -->
            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYROL_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>


    <!-- Service for the automatic creation of accounting transaction for Purchase Invoice -->
    <simple-method method-name="createAcctgTransForPurchaseInvoice" short-description="Create an accounting transaction for a purchase invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <!-- add by dunglv -->
        <set field="glAccountTypeId" type="String" value="ACCOUNTS_PAYABLE"/>
        <if-not-empty field="invoice.glAccountTypeId">
        	<set field="glAccountTypeId" from-field="invoice.glAccountTypeId"/>
        </if-not-empty>
        <!-- end -->
        <set field="organizationPartyId" type="String" from-field="invoice.partyId"/>
        <call-class-method method-name="isImportTrade" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                           ret-field="isImportTrade">
            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
            <field field="organizationPartyId" type="String"/>
            <field field="invoice.currencyUomId" type="String"/>
            <field field="userLogin" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if>
        <condition>
            <and>
                <if-compare field="invoiceType.parentTypeId" operator="equals" value="PURCHASE_INVOICE"/>
                <if-compare field="isImportTrade" operator="equals" value="true"/>
            </and>
        </condition>
        <then>
            <call-service service-name="createAcctgTransForPurchaseInvoiceImportTrade" in-map-name="parameters">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </then>
        </if>
        <if>
            <condition>
            <and>
                <if-compare field="invoiceType.parentTypeId" operator="equals" value="PURCHASE_INVOICE"/>
                <if-compare field="isImportTrade" operator="equals" value="false"/>
            </and>
        </condition>
        <then>
            <call-class-method method-name="getTaxableInvoiceItemTypeIds" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                               ret-field="typeTaxIds">
                <field field="delegator" type="org.ofbiz.entity.Delegator"/>
            </call-class-method>
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <!--<condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PINV_SALES_TAX"/>-->
                    <!--<condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PITM_SALES_TAX"/>-->
                    <condition-expr field-name="invoiceItemTypeId" operator="not-in" from-field="typeTaxIds"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="INVOICE_ADJ"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
	                	<set field="amountFromOrder" type="BigDecimal" value="0"/>
		                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>

		                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>
		                <!--Note VietTB : don't use now : process for diffirent PO and PINV -->
<!-- 		                <get-related value-field="invoiceItem" relation-name="OrderItemBilling" list="orderItemBillings"/> -->
<!-- 		                <iterate list="orderItemBillings" entry="orderItemBilling"> -->
<!-- 		                    <get-related-one value-field="orderItemBilling" relation-name="OrderItem" to-value-field="orderItem"/> -->
<!-- 		                    <calculate field="amountFromOrder" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                        <calcop field="amountFromOrder" operator="add"> -->
<!-- 		                            <calcop operator="multiply"> -->
<!-- 		                                <calcop operator="get" field="orderItemBilling.quantity"/> -->
<!-- 		                                <calcop operator="get" field="orderItem.unitPrice"/> -->
<!-- 		                            </calcop> -->
<!-- 		                        </calcop> -->
<!-- 		                    </calculate> -->
<!-- 		                </iterate> -->
<!-- 		                Debit  -->
<!-- 		                <if> -->
<!-- 		                    <condition> -->
<!-- 		                        <and> -->
<!-- 		                            <if-compare-field field="amountFromInvoice" to-field="amountFromOrder" operator="not-equals"/> -->
<!-- 		                            <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal"/> -->
<!-- 		                        </and> -->
<!-- 		                    </condition> -->
<!-- 		                    <then> -->
<!-- 				                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/> -->
<!-- 								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>		                     -->
<!-- 		                    	<clear-field field="debitEntry"/> -->
<!-- 		                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!-- 		                        <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!-- 		                        <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 		                        <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 		                        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 		                        <set field="debitEntry.productId" from-field="invoiceItem.productId"/> -->
<!-- 		                        <set field="debitEntry.glAccountTypeId" value="PURCHASE_PRICE_VAR"/> -->
<!-- 		                        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                            <calcop operator="subtract"> -->
<!-- 		                                <calcop operator="get" field="amountFromInvoice"/> -->
<!-- 		                                <calcop operator="get" field="amountFromOrder"/> -->
<!-- 		                            </calcop> -->
<!-- 		                        </calculate> -->
<!-- 		                        <set field="debitEntry.origAmount" from-field="origAmount"/> -->
<!-- 		                        <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 		                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/> -->
<!-- 		                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->

<!-- 					            Credit -->
<!-- 					            <clear-field field="creditEntry"/> -->
<!-- 					            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!-- 					            <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!-- 					            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!-- 					            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/> -->
<!-- 					            <set field="creditEntry.origAmount" from-field="origAmount"/> -->
<!-- 					            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!-- 					            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!-- 					            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!-- 					            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/> -->
<!-- 					            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->

<!-- 		                    </then> -->
<!-- 		                </if> -->

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

						<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
<!-- 		                <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal"> -->
<!-- 		                    <set field="origAmount" from-field="amountFromOrder"/> -->
<!-- 		                <else> -->
<!-- 		                    <set field="origAmount" from-field="amountFromInvoice"/> -->
<!-- 		                </else> -->
<!-- 		                </if-compare> -->
		                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

<!-- 		                <get-related value-field="invoiceItemEntry" relation-name="OrderItemBilling" list="orderItemBillings"/> -->
<!-- 		                <iterate list="orderItemBillings" entry="orderItemBilling"> -->
<!-- 		                    <get-related-one value-field="orderItemBilling" relation-name="OrderItem" to-value-field="orderItem"/> -->
<!-- 		                    <calculate field="amountFromOrder" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!-- 		                        <calcop field="amountFromOrder" operator="add"> -->
<!-- 		                            <calcop operator="multiply"> -->
<!-- 		                                <calcop operator="get" field="orderItemBilling.quantity"/> -->
<!-- 		                                <calcop operator="get" field="orderItem.unitPrice"/> -->
<!-- 		                            </calcop> -->
<!-- 		                        </calcop> -->
<!-- 		                    </calculate> -->
<!-- 		                </iterate>		 				 -->

    		            <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>

		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="amountFromInvoice" operator="less" value="0">
                           <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
							<clear-field field="debitEntry"/>
							<set field="debitEntry.debitCreditFlag" value="D"/>
			                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
			                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
			                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			                <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="debitEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="debitEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
	<!-- 		                <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal"> -->
	<!-- 		                    <set field="origAmount" from-field="amountFromOrder"/> -->
	<!-- 		                <else> -->
	<!-- 		                    <set field="origAmount" from-field="amountFromInvoice"/> -->
	<!-- 		                </else> -->
	<!-- 		                </if-compare> -->
			                <set field="debitEntry.origAmount" from-field="origAmountEntry"/>
			                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
			                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			           <else>
							<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
				            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			           </else>
			           </if-compare-field>
	                </then>
	                <else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
				                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

								<set field="amountFromInvoice" type="BigDecimal" value="0"/>
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>

				                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>

				                <clear-field field="debitEntry"/>
								<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				                <set field="debitEntry.debitCreditFlag" value="D"/>
				                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
				                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
				                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
				                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

				                <clear-field field="creditEntry"/>
					            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
					            <set field="creditEntry.debitCreditFlag" value="C"/>
					            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
					            <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
					            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
					            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
					            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            	<set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            	<set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
							</then>
						</if>
					</else>
	             </if>
            </iterate>
            <!-- debit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>

           <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
                    <!--<log level="info" message="ThaiNT getInvoiceItemTaxAuthPartyAndGeos, invoice = ${invoice}"></log>-->
            		<clear-field field="debitEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
                            <call-class-method method-name="isFixedAsset" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                                               ret-field="isFixedAsset">
                                <field field="invoiceItemTax" type="org.ofbiz.entity.GenericValue"/>
                            </call-class-method>
                            <!--<log level="info" message="ThaiNT getInvoiceItemTaxAuthPartyAndGeos, invoiceItemTax = ${invoiceItemTax}"></log>-->
                            <!--<log level="info" message="ThaiNT getInvoiceItemTaxAuthPartyAndGeos, isFixedAsset = ${isFixedAsset}"></log>-->
			                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

		                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                    <set field="debitEntry.debitCreditFlag" value="D"/>
		                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
		                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="debitEntry.partyId" from-field="taxAuthPartyId"/>
		                    <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

							<entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="debitEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoiceType.parentTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>

		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="debitEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="debitEntry.glAccountTypeId" value="VAT_DED_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
                            <if-compare field="isFixedAsset" operator="equals" value="true">
                                <set field="typeFATax" value="SRT_SALESFA_TAX"/>
                            <clear-field field="invoiceItemTypeFaTax"/>
                                <entity-one entity-name="InvoiceItemType" value-field="invoiceItemTypeFaTax">
                                    <field-map field-name="invoiceItemTypeId" from-field="typeFATax"/>
                                </entity-one>
                                <if-not-empty field="invoiceItemTypeFaTax">
                                    <if-not-empty field="invoiceItemTypeFaTax.defaultGlAccountId">
                                        <set field="debitEntry.glAccountId" from-field="invoiceItemTypeFaTax.defaultGlAccountId"/>
                                    </if-not-empty>
                                </if-not-empty>
                            </if-compare>
							<set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
					        <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
		                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

							<clear-field field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
				            <set field="creditEntry.origAmount" from-field="taxAmount"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
							<set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
					        <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>
            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if>
                <condition>
                    <and>
                        <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
	                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                    <clear-field field="debitEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

					<clear-field field="creditEntry"/>
		            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		            <set field="creditEntry.debitCreditFlag" value="C"/>
		            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
		            <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
		            <set field="creditEntry.origAmount" from-field="taxAmount"/>
		            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
		            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                </then>
            </if>
<!--             Credit -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--             <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!--             <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/> -->
<!--             <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/> -->
<!--             <call-class-method method-name="getInvoiceTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="invoiceTaxTotal"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method>             -->
<!--             <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalAmountFromInvoice"/> -->
<!--                     <calcop operator="get" field="invoiceTaxTotal"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/> -->
<!--             <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/> -->
<!--             <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/> -->
<!--             <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PURCHASE_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            </then>
        </if>
    </simple-method>

        <!-- Service for the automatic creation of accounting transaction for Purchase Invoice -->
    <simple-method method-name="createAcctgTransForAdjPurchaseInvoice" short-description="Create an accounting transaction for a adjustment purchase invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if-compare field="invoiceType.parentTypeId" operator="equals" value="PURCHASE_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="equals" value="PINV_ADJIMPPO_ITEM"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
	                	<set field="amountFromOrder" type="BigDecimal" value="0"/>
		                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>

		                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>

		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

						<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>

		                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

    		            <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>

		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="amountFromInvoice" operator="less" value="0">
                           <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
							<clear-field field="debitEntry"/>
							<set field="debitEntry.debitCreditFlag" value="D"/>
			                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
			                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
			                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			                <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="debitEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="debitEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
			                <set field="debitEntry.origAmount" from-field="origAmountEntry"/>
			                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
			                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			           <else>
							<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
				            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			           </else>
			           </if-compare-field>
	                </then>
	                <else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
				                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

								<set field="amountFromInvoice" type="BigDecimal" value="0"/>
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>

				                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>
				                <clear-field field="debitEntry"/>
								<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				                <set field="debitEntry.debitCreditFlag" value="D"/>
				                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
				                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
				                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
				                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

				                <clear-field field="creditEntry"/>
					            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
					            <set field="creditEntry.debitCreditFlag" value="C"/>
					            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
					            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
					            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
					            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
					            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            	<set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            	<set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
							</then>
						</if>
					</else>
	             </if>
            </iterate>

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="ADJ_PURCHASE_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>

            <if-not-empty field="parameters.transactionDate">
            	<if-compare-field field="parameters.transactionDate" operator="less" to-field="invoice.invoiceDate">
	            	<add-error>
	            		<fail-property property="" resource=""></fail-property>
	            	</add-error>
            	<else>
		            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="parameters.transactionDate"/>
            	</else>
            	</if-compare-field>
                <check-errors></check-errors>
            </if-not-empty>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>

            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>

    <!-- Service for the automatic creation of accounting transaction for Settlement Invoice -->
    <simple-method method-name="createAcctgTransForSettlementInvoice" short-description="Create an accounting transaction for a Settlement invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if-compare field="invoice.invoiceTypeId" operator="equals" value="SETTLEMENT_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PINV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
	                	<set field="amountFromOrder" type="BigDecimal" value="0"/>
		                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>

		                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>
		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

						<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                <set field="debitEntry.debitCreditFlag" value="D"/>
		                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
		                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
		                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
		                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

    		            <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>

		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="amountFromInvoice" operator="less" value="0">
                           <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
							<clear-field field="debitEntry"/>
							<set field="debitEntry.debitCreditFlag" value="D"/>
			                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
			                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
			                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
			                <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="debitEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="debitEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
			                <set field="debitEntry.origAmount" from-field="origAmountEntry"/>
			                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
			                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			           <else>
							<clear-field field="creditEntry"/>
				            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="OTHER_PAYABLE"/>
				            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			           </else>
			           </if-compare-field>
	                </then>
	                <else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
				                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

								<set field="amountFromInvoice" type="BigDecimal" value="0"/>
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>

				                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>

				                <clear-field field="debitEntry"/>
								<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				                <set field="debitEntry.debitCreditFlag" value="D"/>
				                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
				                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
				                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
				                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

				                <clear-field field="creditEntry"/>
					            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
					            <set field="creditEntry.debitCreditFlag" value="C"/>
					            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
					            <set field="creditEntry.glAccountTypeId" value="OTHER_PAYABLE"/>
					            <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
					            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
					            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
					            <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
					            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
							</then>
						</if>
					</else>
	             </if>
            </iterate>
            <!-- debit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>

           <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
            		<clear-field field="debitEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
			                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

		                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
		                    <set field="debitEntry.debitCreditFlag" value="D"/>
		                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
		                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="debitEntry.partyId" from-field="taxAuthPartyId"/>
		                    <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

							<entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="debitEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoiceType.parentTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>

		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="debitEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
				            <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
				            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
		                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

							<clear-field field="creditEntry"/>
				            <set field="creditEntry.debitCreditFlag" value="C"/>
				            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
				            <set field="creditEntry.glAccountTypeId" value="OTHER_PAYABLE"/>
				            <set field="creditEntry.origAmount" from-field="taxAmount"/>
				            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
				            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
				            <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
				            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>
            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if>
                <condition>
                    <and>
                        <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
	                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
					<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                    <clear-field field="debitEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

					<clear-field field="creditEntry"/>
		            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		            <set field="creditEntry.debitCreditFlag" value="C"/>
		            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
		            <set field="creditEntry.glAccountTypeId" value="OTHER_PAYABLE"/>
		            <set field="creditEntry.origAmount" from-field="taxAmount"/>
		            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
		            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
		            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                </then>
            </if>

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SETTLEMENT_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="createAcctgTransForSalesInvoice" short-description="Create an accounting transaction for a sales invoice">
       
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalOrigAmount" type="BigDecimal" value="0"/>

        <entity-one entity-name="Invoice" value-field="invoice"/>
        
         <log message="PQD createAcctgTransForSalesInvoice" level="info"/>
        
        <!-- add by dunglv -->
        <set field="glAccountTypeId" type="String" value="ACCOUNTS_RECEIVABLE"/>
        <if-not-empty field="invoice.glAccountTypeId">
        	<set field="glAccountTypeId" from-field="invoice.glAccountTypeId"/>
        </if-not-empty>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <!-- end -->
        <if-compare field="invoiceType.parentTypeId" value="SALES_INVOICE" operator="equals">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="INV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="ITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>
            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
            <iterate list="invoiceItems" entry="invoiceItem">
				<if>
	                <condition>
	                    <and>
	                        <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
	                        <not>
	                        	<if-empty field="invoiceItem.parentInvoiceItemSeqId" />
	                        </not>
	                    </and>
	                </condition>
	                <then>
	                	<!-- TODO: handle serialized inventory -->
		                <set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItem.quantity">
		                    <set field="quantity" from-field="invoiceItem.quantity"/>
		                </if-not-empty>
		                <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItem.amount"/>
		                    </calcop>
		                </calculate>
		                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
						<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
		                <!-- Credit -->
		                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		                <set field="creditEntry.debitCreditFlag" value="C"/>
		                <set field="creditEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
		                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
		                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
		                <set field="creditEntry.origAmount" from-field="origAmount"/>
		                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                <set field="creditEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
		                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
		                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		                <if-not-empty field="invoiceItem.taxAuthPartyId">
		                    <set field="creditEntry.partyId" from-field="invoiceItem.taxAuthPartyId"/>
		                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>
		                </if-not-empty>
		                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

		                <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
		                <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
						<filter-list-by-and list="invoiceItemsList" map="andMap"/>
						<first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

		 				<set field="quantity" type="BigDecimal" value="1"/>
		                <if-not-empty field="invoiceItemEntry.quantity">
		                    <set field="quantity" from-field="invoiceItemEntry.quantity"/>
		                </if-not-empty>

		                <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
		                    <calcop operator="multiply">
		                        <calcop operator="get" field="quantity"/>
		                        <calcop operator="get" field="invoiceItemEntry.amount"/>
		                    </calcop>
		                </calculate>

		                <if-compare field="origAmountEntry" operator="less" value="0">
                           <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

		                <if-compare field="origAmount" operator="less" value="0">
                           <calculate field="absOrigAmount"><calcop operator="negative" field="origAmount"/></calculate>
                        </if-compare>

						<if-compare-field to-field="absOrigAmount" operator="equals" field="origAmountEntry">
							<set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>

							<clear-field field="creditEntry"/>
							<make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
			                <set field="creditEntry.debitCreditFlag" value="C"/>
			                <set field="creditEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
			                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
			                <set field="creditEntry.productId" from-field="invoiceItemEntry.productId"/>
			                <set field="creditEntry.origAmount" from-field="origAmountEntry"/>
			                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
			                <set field="creditEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
			                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
			                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
			                <if-not-empty field="invoiceItem.taxAuthPartyId">
			                    <set field="creditEntry.partyId" from-field="invoiceItemEntry.taxAuthPartyId"/>
			                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>
			                </if-not-empty>
			                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
			            <else>
				                <!-- Credit -->
					            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
					            <set field="debitEntry.debitCreditFlag" value="D"/>
					            <set field="debitEntry.glAccountTypeId" from-field="glAccountTypeId"/>
					            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
					            <set field="debitEntry.origAmount" from-field="origAmount"/>
					            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
					            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
					            <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
					            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
			            </else>
						</if-compare-field>
	                </then>
	                <else>
                		<if>
               				<condition>
		                		<not>
		                        	<if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
		                        </not>
	                        </condition>
							<then>
				                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
								<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
				 				<!-- TODO: handle serialized inventory -->
				                <set field="quantity" type="BigDecimal" value="1"/>
				                <if-not-empty field="invoiceItem.quantity">
				                    <set field="quantity" from-field="invoiceItem.quantity"/>
				                </if-not-empty>
				                <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
				                    <calcop operator="multiply">
				                        <calcop operator="get" field="quantity"/>
				                        <calcop operator="get" field="invoiceItem.amount"/>
				                    </calcop>
				                </calculate>
				                <!-- Credit -->
				                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
				                <set field="creditEntry.debitCreditFlag" value="C"/>
				                <set field="creditEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
				                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
				                <set field="creditEntry.origAmount" from-field="origAmount"/>
				                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				                <set field="creditEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
				                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
				                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
				                <if-not-empty field="invoiceItem.taxAuthPartyId">
				                    <set field="creditEntry.partyId" from-field="invoiceItem.taxAuthPartyId"/>
				                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>
				                </if-not-empty>
				                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

				                <!-- Debit -->
					            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
					            <set field="debitEntry.debitCreditFlag" value="D"/>
					            <set field="debitEntry.glAccountTypeId" from-field="glAccountTypeId"/>
					            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
					            <set field="debitEntry.origAmount" from-field="origAmount"/>
					            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
					            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
					            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
					            <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
					            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
					            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
					            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
							</then>
                        </if>
	                </else>
            	</if>
            </iterate>
            <!-- credit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>
<!--             <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">            	  -->
<!--                 <iterate entry="taxAuthGeoId" list="taxAuthGeoIds"> -->
<!--                 	<log message="VietTB taxAuthGeoIds  ${taxAuthGeoIds}" level="info"/>   -->
<!--                     <clear-field field="creditEntry"/> -->
<!--                     <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/> -->
<!--                     <set field="creditEntry.debitCreditFlag" value="C"/> -->
<!--                     <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/> -->
<!--                     <call-class-method method-name="getInvoiceTaxTotalForTaxAuthPartyAndGeo" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                             ret-field="taxAmount"> -->
<!--                         <field field="invoice" type="GenericValue"/> -->
<!--                         <field field="taxAuthPartyId" type="String"/> -->
<!--                         <field field="taxAuthGeoId" type="String"/> -->
<!--                     </call-class-method> -->
<!--                     <set field="creditEntry.origAmount" from-field="taxAmount"/> -->
<!--                     <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--                     <set field="creditEntry.partyId" from-field="taxAuthPartyId"/> -->
<!--                     <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/> -->
<!--                     <clear-field field="taxAuthorityGlAccount"/> -->
<!--                     <entity-one entity-name="TaxAuthorityGlAccount" value-field="taxAuthorityGlAccount"> -->
<!--                         <field-map field-name="organizationPartyId" from-field="creditEntry.organizationPartyId"/> -->
<!--                         <field-map field-name="taxAuthGeoId" from-field="taxAuthGeoId"/> -->
<!--                         <field-map field-name="taxAuthPartyId" from-field="taxAuthPartyId"/> -->
<!--                     </entity-one> -->
<!--                     <if-not-empty field="taxAuthorityGlAccount"> -->
<!--                         <set field="creditEntry.glAccountId" from-field="taxAuthorityGlAccount.glAccountId"/> -->
<!--                         <else> -->
<!--                             <set field="creditEntry.glAccountTypeId" value="TAX_ACCOUNT"/> -->
<!--                         </else> -->
<!--                     </if-not-empty>  -->
<!--                     <log message="VietTB taxAuthorityGlAccount  ${taxAuthorityGlAccount}" level="info"/>                    -->
<!--                     <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/> -->
<!--                     <log message="VietTB TaxAuth Sale1: ${creditEntry}" level="info"/> -->
<!--                 </iterate> -->
<!--             </iterate-map> -->
            <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
            		<clear-field field="creditEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
	            			<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	                		<clear-field field="creditEntry"/>
		                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		                    <set field="creditEntry.debitCreditFlag" value="C"/>
		                    <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="creditEntry.origAmount" from-field="taxAmount"/>
		                    <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="creditEntry.partyId" from-field="taxAuthPartyId"/>
		                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

					        <entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="creditEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoice.invoiceTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>

		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="creditEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="creditEntry.glAccountTypeId" value="VAT_OUT_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
		                    <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
		                    <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
		                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

		                    <clear-field field="debitEntry"/>
				            <set field="debitEntry.debitCreditFlag" value="D"/>
				            <set field="debitEntry.glAccountTypeId" from-field="glAccountTypeId"/>
				            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				            <set field="debitEntry.origAmount" from-field="taxAmount"/>
				            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
				            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
				            <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
				            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>

            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if-compare field="taxAmount" operator="not-equals" value="0" type="BigDecimal">
          		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                <clear-field field="creditEntry"/>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
                <set field="creditEntry.origAmount" from-field="taxAmount"/>
                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="creditEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

				<clear-field field="debitEntry"/>
				<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
	            <set field="debitEntry.glAccountTypeId" from-field="glAccountTypeId"/>
	            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
	            <set field="debitEntry.origAmount" from-field="taxAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
	            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
	            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </if-compare>

<!--             Debit -->
<!--             <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/> -->
<!--             <set field="debitEntry.debitCreditFlag" value="D"/> -->
<!--             <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/> -->
<!--             <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/> -->
<!--             <call-class-method method-name="getInvoiceTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker" -->
<!--                     ret-field="invoiceTaxTotal"> -->
<!--                 <field field="invoice" type="GenericValue"/> -->
<!--             </call-class-method> -->
<!--             <calculate field="totalOrigAmount" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"> -->
<!--                 <calcop operator="add"> -->
<!--                     <calcop operator="get" field="totalOrigAmount"/> -->
<!--                     <calcop operator="get" field="invoiceTaxTotal"/> -->
<!--                 </calcop> -->
<!--             </calculate> -->
<!--             <set field="debitEntry.origAmount" from-field="totalOrigAmount"/> -->
<!--             <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/> -->
<!--             <set field="debitEntry.partyId" from-field="invoice.partyId"/> -->
<!--             <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/> -->
<!--             <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/> -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="parameters.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyId"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="invoice.invoiceDate"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="createAcctgTransForGiftsInvoice" short-description="Create an accounting transaction for a gifts invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalOrigAmount" type="BigDecimal" value="0"/>
		<!-- Mac dinh (neu ko chi ra tuong minh) lay parameters.invoiceId cho entity-one -->
        <entity-one entity-name="Invoice" value-field="invoice">
        </entity-one>
        <if-compare field="invoice.invoiceTypeId" value="GIFTS_INVOICE" operator="equals">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="INV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="ITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>
            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
            <iterate list="invoiceItems" entry="invoiceItem">
               	<!-- TODO: handle serialized inventory -->
                <set field="quantity" type="BigDecimal" value="1"/>
                <if-not-empty field="invoiceItem.quantity">
                    <set field="quantity" from-field="invoiceItem.quantity"/>
                </if-not-empty>
                <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

		        <entity-one entity-name="Product" value-field="product">
		            <field-map field-name="productId" from-field="invoiceItem.productId"/>
		        </entity-one>

		        <entity-one entity-name="ProductType" value-field="productType">
		            <field-map field-name="productTypeId" from-field="product.productTypeId"/>
		        </entity-one>

                <!-- Credit -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <if-not-empty field="productType">
                	<set field="creditEntry.glAccountTypeId" from-field="productType.glAccountTypeId"/>
                <else>
                	<set field="creditEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                </else>
               	</if-not-empty>
                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
                <set field="creditEntry.origAmount" from-field="origAmount"/>
                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="creditEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                <if-not-empty field="invoiceItem.taxAuthPartyId">
                    <set field="creditEntry.partyId" from-field="invoiceItem.taxAuthPartyId"/>
                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>
                </if-not-empty>
                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                <!-- Debit -->
	            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
	            <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
	            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
	            <set field="debitEntry.origAmount" from-field="origAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
	            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
	            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				<set field="debitEntry.productId" from-field="invoiceItem.productId"/>
				<set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </iterate>

            <!-- credit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                  ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>
            <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
            		<call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                  		ret-field="invoiceItemTaxAuthPartyAndGeos">
                		<field field="invoice" type="org.ofbiz.entity.GenericValue"/>
		                <field field="taxAuthPartyId" type="String"/>
		                <field field="taxAuthGeoId" type="String"/>
            		</call-class-method>
            		<clear-field field="creditEntry"/>
            		<if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
	                	<iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
	            			<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
							<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	                		<clear-field field="creditEntry"/>
		                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
		                    <set field="creditEntry.debitCreditFlag" value="C"/>
		                    <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>

							<set field="quantity" type="BigDecimal" value="1"/>
			                <if-not-empty field="invoiceItemTax.quantity">
			                    <set field="quantity" from-field="invoiceItemTax.quantity"/>
			                </if-not-empty>

			                <set field="amount" type="BigDecimal" value="0"/>
			                <if-not-empty field="invoiceItemTax.amount">
			                    <set field="amount" from-field="invoiceItemTax.amount"/>
			                </if-not-empty>

			                <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
			                    <calcop operator="multiply">
			                        <calcop operator="get" field="quantity"/>
			                        <calcop operator="get" field="amount"/>
			                    </calcop>
			                </calculate>

		                    <set field="creditEntry.origAmount" from-field="taxAmount"/>
		                    <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
		                    <set field="creditEntry.partyId" from-field="taxAuthPartyId"/>
		                    <set field="creditEntry.roleTypeId" value="TAX_AUTHORITY"/>

		                    <clear-field field="taxAuthorityRateType"/>
		                    <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
		                        <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
		                    </entity-one>

							<entity-one entity-name="Product" value-field="productType">
					            <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
					        </entity-one>

		                    <clear-field field="taxAuthorityRateTypeGlAccount"/>
		                    <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
		                        <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
		                        <field-map field-name="organizationPartyId" from-field="creditEntry.organizationPartyId"/>
		                        <field-map field-name="invoiceTypeId" from-field="invoice.invoiceTypeId"/>
		                        <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
		                    </entity-one>

		                    <if-not-empty field="taxAuthorityRateTypeGlAccount">
		                        <set field="creditEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
		                        <else>
		                            <set field="creditEntry.glAccountTypeId" value="VAT_OUT_ACCOUNT"/>
		                        </else>
		                    </if-not-empty>
		                    <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
		                    <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
		                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
		                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

		                    <clear-field field="debitEntry"/>
		                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
				            <set field="debitEntry.debitCreditFlag" value="D"/>
				            <set field="debitEntry.glAccountTypeId" value="GIFTS_EXPENSE"/>
				            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
				            <set field="debitEntry.origAmount" from-field="taxAmount"/>
				            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
				            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
				            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
		                    <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
		                    <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
				            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
				            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
	                    </iterate>
					</if-not-empty>
                </iterate>
            </iterate-map>

            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                    ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if-compare field="taxAmount" operator="not-equals" value="0" type="BigDecimal">
          		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
				<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                <clear-field field="creditEntry"/>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
                <set field="creditEntry.origAmount" from-field="taxAmount"/>
                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="creditEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
				
				<clear-field field="debitEntry"/>
				<make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
	            <set field="debitEntry.debitCreditFlag" value="D"/>
	            <set field="debitEntry.glAccountTypeId" value="GIFTS_EXPENSE"/>
	            <set field="debitEntry.organizationPartyId" from-field="invoice.partyIdFrom"/>
	            <set field="debitEntry.origAmount" from-field="taxAmount"/>
	            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
	            <set field="debitEntry.partyId" from-field="invoice.partyId"/>
	            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
	            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
	            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </if-compare>

            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="GIFTS_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="parameters.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyId"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="invoice.invoiceDate"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>
    <!--automatic GL posting service triggered payment is created or when set payment status -->
    <simple-method method-name="createAcctgTransAndEntriesForOutgoingPayment" short-description="create accounting transactions and accounting transaction entries for outgoing payment">
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <set field="amountAppliedTotal" type="BigDecimal" value="0"/>
        <entity-one entity-name="Payment" value-field="payment"/>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDisbursement" ret-field="isDisbursement">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>

        <set field="organizationPartyId" type="String" from-field="payment.partyIdFrom"/>

        <call-class-method method-name="isImportTrade" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                           ret-field="isImportTrade">
            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
            <field field="organizationPartyId" type="String"/>
            <field field="payment.currencyUomId" type="String"/>
            <field field="userLogin" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>

        <if>
            <condition>
                <and>
                    <if-compare value="true" field="isDisbursement" operator="equals" type="Boolean"/>
                    <if-compare field="isImportTrade" operator="equals" value="true"/>
                </and>
            </condition>
            <then>
                <call-service service-name="createAcctgTransAndEntriesForOutgoingPaymentImportTrade" in-map-name="parameters">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
                <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            </then>
        </if>

        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <if>
            <condition>
                <and>
                    <if-compare value="true" field="isDisbursement" operator="equals" type="Boolean"/>
                    <if-compare field="isImportTrade" operator="equals" value="false"/>
                </and>
            </condition>
            <then>
                <set field="organizationPartyId" from-field="payment.partyIdFrom"/>
                <set field="partyId" from-field="payment.partyIdTo"/>
                <set field="roleTypeId" value="BILL_FROM_VENDOR"/>
                <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                    <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                    <field-map field-name="organizationPartyId"/>
                </entity-one>
                <set field="debitGlAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
    <!--             <log message="VietTB debitGlAccountTypeId ${debitGlAccountTypeId}" level="info"/> -->

                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                <!-- Credit -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <!-- TODO -->
                <!--set field="creditEntry.glAccountTypeId" from-field=""/-->
                <if-compare operator="equals" value="FEE_TAX_BANK_PAYMENT" field="payment.paymentTypeId">
                    <calculate field="amountFeeBank" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                        <calcop operator="subtract">
                            <calcop operator="get" field="payment.amount"/>
                            <calcop operator="get" field="payment.taxAmount"/>
                        </calcop>
                    </calculate>
                    <set field="creditEntry.origAmount" from-field="amountFeeBank"/>
                    <else>
                        <set field="creditEntry.origAmount" from-field="payment.amount"/>
                    </else>
                </if-compare>
                <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
                <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
                <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
                <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
    <!--             <log message="VietTB Credit ${creditEntry}" level="info"/>  -->
                <!-- This is now delegated to the createAcctgTransAndEntriesForPaymentApplication calls at the bottom of this service
                <entity-and entity-name="PaymentApplication" list="paymentApplications">
                    <field-map field-name="paymentId" from-field="payment.paymentId"/>
                </entity-and>
                <iterate list="paymentApplications" entry="paymentApplication">
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
                    <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
                    <set field="debitEntry.organizationPartyId" from-field="organizationPartyId"/>
                    <if-not-empty field="paymentApplication.overrideGlAccountId">
                        <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
                    <else>
                        <if-not-empty field="paymentApplication.taxAuthGeoId">
                            <entity-one entity-name="TaxAuthorityGlAccount" value-field="taxAuthorityGlAccount">
                                <field-map field-name="organizationPartyId" from-field="organizationPartyId"/>
                                <field-map field-name="taxAuthGeoId" from-field="paymentApplication.taxAuthGeoId"/>
                                <field-map field-name="taxAuthPartyId" from-field="partyId"/>
                            </entity-one>
                            <set field="debitEntry.glAccountId" from-field="taxAuthorityGlAccount.glAccountId"/>
                        </if-not-empty>
                    </else>
                    </if-not-empty>
                    <calculate field="amountAppliedTotal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                        <calcop operator="add">
                            <calcop operator="get" field="amountAppliedTotal"/>
                            <calcop operator="get" field="paymentApplication.amountApplied"/>
                        </calcop>
                    </calculate>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                </iterate>
                -->
                <if-compare operator="equals" value="FEE_TAX_BANK_PAYMENT" field="payment.paymentTypeId">
                    <calculate field="amount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                        <calcop operator="subtract">
                            <calcop operator="get" field="amountFeeBank"/>
                            <calcop operator="get" field="amountAppliedTotal"/>
                        </calcop>
                    </calculate>
                    <else>
                        <calculate field="amount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="subtract">
                                <calcop operator="get" field="payment.amount"/>
                                <calcop operator="get" field="amountAppliedTotal"/>
                            </calcop>
                        </calculate>
                    </else>
                </if-compare>
                <if-compare field="amount" operator="greater" value="0" type="BigDecimal">
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntryWithDiffAmount"/>
                    <set field="debitEntryWithDiffAmount.debitCreditFlag" value="D"/>
                    <set field="debitEntryWithDiffAmount.origAmount" from-field="amount"/>
                    <set field="debitEntryWithDiffAmount.origCurrencyUomId" from-field="payment.currencyUomId"/>
                    <set field="debitEntryWithDiffAmount.glAccountId" from-field="payment.overrideGlAccountId"/>
                    <set field="debitEntryWithDiffAmount.glAccountTypeId" from-field="debitGlAccountTypeId"/>
                    <set field="debitEntryWithDiffAmount.organizationPartyId" from-field="organizationPartyId"/>
                    <set field="debitEntryWithDiffAmount.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntryWithDiffAmount" type="Object"/>
    <!--                	<log message="VietTB Debit ${debitEntryWithDiffAmount}" level="info"/>  -->
                </if-compare>

                <if-compare operator="equals" value="FEE_TAX_BANK_PAYMENT" field="payment.paymentTypeId">
                    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                    <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
                    <clear-field field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.origAmount" from-field="payment.taxAmount"/>
                    <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
                    <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
                    <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
                    <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

                    <clear-field field="debitEntryWithDiffAmount"/>
                    <set field="debitEntryWithDiffAmount.debitCreditFlag" value="D"/>
                    <set field="debitEntryWithDiffAmount.origAmount" from-field="payment.taxAmount"/>
                    <set field="debitEntryWithDiffAmount.origCurrencyUomId" from-field="payment.currencyUomId"/>
                    <set field="debitEntryWithDiffAmount.glAccountId" from-field="payment.overrideGlAccountId"/>
                    <set field="debitEntryWithDiffAmount.glAccountTypeId" value="TAX_BANK_PAYMENT"/>
                    <set field="debitEntryWithDiffAmount.organizationPartyId" from-field="organizationPartyId"/>
                    <set field="debitEntryWithDiffAmount.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntryWithDiffAmount" type="Object"/>
                </if-compare>

                <!-- Set header fields (AcctgTrans) -->
                <set field="createAcctgTransAndEntriesInMap.roleTypeId" from-field="roleTypeId"/>
                <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="OUTGOING_PAYMENT"/>
                <set field="createAcctgTransAndEntriesInMap.partyId" from-field="partyId"/>
                <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="payment.paymentId"/>
                <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="payment.effectiveDate"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
                <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
                <field-to-result field="acctgTransId" result-name="acctgTransId"/>
                <!-- Now create accounting transactions for the payment applications -->
    <!--             <entity-and entity-name="PaymentApplication" list="paymentApplications"> -->
    <!--                 <field-map field-name="paymentId" from-field="payment.paymentId"/> -->
    <!--             </entity-and> -->
    <!--             <iterate list="paymentApplications" entry="paymentApplication"> -->
                <!-- not user for SGC -->
    <!--                 <set field="createAcctgTransAndEntriesForPaymentApplicationInMap.paymentApplicationId" from-field="paymentApplication.paymentApplicationId"/> -->
    <!--                 <if-compare field="payment.paymentTypeId" operator="equals" value="CUSTOMER_REFUND">                	 -->
    <!--                     <call-service service-name="createAcctgTransAndEntriesForCustomerRefundPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
    <!--                         <result-to-field result-name="acctgTransId"/> -->
    <!--                     </call-service> -->
    <!--                 </if-compare>   -->
    <!--                 <if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_PAYMENT">                	 -->
    <!--                		<call-service service-name="createAcctgTransAndEntriesForPayrolPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
    <!--                       	 	<result-to-field result-name="acctgTransId"/> -->
    <!--                    	</call-service> -->
    <!--                 </if-compare>                                                -->
    <!--                 <if> -->
    <!--                 	<condition> -->
    <!--                 		<or> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_TAX_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_TUNS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_MDS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_MEDS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="PAYROL_SOCS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="equals" value="ADVANCES_PAYMENT"/> -->
    <!--                 		</or> -->
    <!--                 	</condition> -->
    <!--                 	<then> -->
    <!--                 			Nothing to do, because don't need something -->
    <!-- 1                		<if-empty  field="paymentApplication.invoiceId"> -->
    <!-- 1 	                		<call-service service-name="createAcctgTransAndEntriesForPayrolPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
    <!-- 1	                       	 	<result-to-field result-name="acctgTransId"/> -->
    <!-- 1 	                    	</call-service> -->
    <!-- 1                     	</if-empty> -->
    <!--                 	</then> -->
    <!--                </if> -->
    <!--                 <if> -->
    <!--                 	<condition> -->
    <!--                 		<and> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="CUSTOMER_REFUND"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_PAYMENT"/>   -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_TAX_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_TUNS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_MDS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_MEDS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="PAYROL_SOCS_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="ADVANCES_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="OTHER_COST_PAYMENT"/> -->
    <!--                 			<if-compare field="payment.paymentTypeId" operator="not-equals" value="WITHDRAWAL_PAYMENT"/>      -->
    <!--                 		</and> -->
    <!--                 	</condition> -->
    <!--                 	<then> -->
    <!-- 1                 		<log message="VIETTB Not refund, payrol" level="info"/> -->
    <!-- 	                	<call-service service-name="createAcctgTransAndEntriesForPaymentApplication" in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"> -->
    <!-- 	                        <result-to-field result-name="acctgTransId"/> -->
    <!-- 	                    </call-service>                	 -->
    <!--                 	</then>                	 -->
    <!--                 </if> -->
    <!--                 <log level="info" message="Accounting transaction ${acctgTransId} created for payment application ${paymentApplication.paymentApplicationId}"/>  -->
    <!--             </iterate> -->
            </then>
        </if>
    </simple-method>

    <!--service to clone an existing accounting transaction and its entries-->
    <simple-method method-name="copyAcctgTransAndEntries" short-description="copy AcctgTransAndEntries">
        <entity-one entity-name="AcctgTrans" value-field="acctgTrans">
            <field-map field-name="acctgTransId" from-field="parameters.fromAcctgTransId"/>
        </entity-one>
        <!--Cloning AcctgTrans-->
        <clone-value value-field="acctgTrans" new-value-field="newAcctgTrans"/>
        <clear-field field="newAcctgTrans.acctgTransId"/>
        <set-service-fields to-map="createAcctgTransInMap" service-name="createAcctgTrans" map="newAcctgTrans"/>
        <now-timestamp field="nowTimestamp"/>
        <if-not-empty field="parameters.transactionDate">
        	<set field="createAcctgTransInMap.transactionDate" from-field="parameters.transactionDate"/>
        	<if-not-empty field="acctgTrans.invoiceId">
        		<entity-one entity-name="Invoice" value-field="invoiceTemp">
        			<field-map field-name="invoiceId" from-field="acctgTrans.invoiceId"></field-map>
        		</entity-one>
        		<if-compare-field field="parameters.transactionDate" operator="greater" to-field="invoiceTemp.invoiceDate">
		         	<set field="createAcctgTransInMap.transactionDate" from-field="invoiceTemp.invoiceDate"/>
	        	<else>
		          <set field="createAcctgTransInMap.transactionDate" from-field="parameters.transactionDate"/>
	        	</else>
	      		</if-compare-field>
        	</if-not-empty>
        <else>
        	<set field="createAcctgTransInMap.transactionDate" from-field="nowTimestamp"/>
        </else>
        </if-not-empty>
        <set field="createAcctgTransInMap.isPosted" value="N"/>
        <set field="originalAcctgTransId" from-field="parameters.fromAcctgTransId"/>
        <field-to-result field="originalAcctgTransId" result-name="acctgTransId"/>
        <call-service service-name="createAcctgTrans" in-map-name="createAcctgTransInMap">
            <result-to-field result-name="acctgTransId" field="newAcctgTrans.acctgTransId"/>
            <result-to-result result-name="acctgTransId"/>
        </call-service>
        <get-related list="acctgTransEntries" relation-name="AcctgTransEntry" value-field="acctgTrans"/>
        <iterate list="acctgTransEntries" entry="acctgTransEntry">
            <!--Cloning AcctgTransEntry-->
            <clone-value value-field="acctgTransEntry" new-value-field="newAcctgTransEntry"/>
            <clear-field field="newAcctgTransEntry.acctgTransId"/>
            <set-service-fields to-map="createAcctgTransAndEntryInMap" service-name="createAcctgTransEntry" map="newAcctgTransEntry"/>
            <set field="createAcctgTransAndEntryInMap.acctgTransId" from-field="newAcctgTrans.acctgTransId"/>
            <if-compare field="parameters.revert" operator="equals" value="Y">
                <if-compare field="newAcctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <set field="createAcctgTransAndEntryInMap.debitCreditFlag" value="C"/>
                </if-compare>
                <if-compare field="newAcctgTransEntry.debitCreditFlag" operator="equals" value="C">
                    <set field="createAcctgTransAndEntryInMap.debitCreditFlag" value="D"/>
                </if-compare>
            <else>
                <set field="createAcctgTransAndEntryInMap.debitCreditFlag" from-field="newAcctgTransEntry.debitCreditFlag"/>
            </else>
            </if-compare>
            <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransAndEntryInMap"/>
        </iterate>
    </simple-method>

    <!--service to create AcctgTransAndEntries For Customer Refund Payment Application-->
    <simple-method method-name="createAcctgTransAndEntriesForCustomerRefundPaymentApplication" short-description="create AcctgTransAndEntries For Customer Refund PaymentApplication">
        <entity-one entity-name="PaymentApplication" value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <get-related-one value-field="paymentApplication" relation-name="Payment" to-value-field="payment"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with the payment -->
        <if-compare field="payment.statusId" operator="equals" value="PMNT_NOT_PAID">
            <return/>
        </if-compare>
        <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
        <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
        </entity-one>
        <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE">
            <return/>
        </if-compare>
        <!--Credit -->
		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="creditEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
        <set field="creditEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="debitEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <if-not-empty field="paymentApplication.overrideGlAccountId">
            <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
         </if-not-empty>

        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="paymentApplication.invoiceId"/>
        <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdTo"/>
        <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>

    </simple-method>

    <!--service to create AcctgTransAndEntries For Vendor Refund Payment Application-->
    <simple-method method-name="createAcctgTransAndEntriesForVendorRefundPaymentApplication" short-description="create AcctgTransAndEntries For Vendor Refund PaymentApplication">
        <entity-one entity-name="PaymentApplication" value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <get-related-one value-field="paymentApplication" relation-name="Payment" to-value-field="payment"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with the payment -->
        <if-compare field="payment.statusId" operator="equals" value="PMNT_NOT_PAID">
            <return/>
        </if-compare>
        <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
        <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
        </entity-one>
        <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_PAYABLE">
            <return/>
        </if-compare>
        <!--Credit -->
		<set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="creditEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
        <set field="creditEntry.glAccountTypeId" from-field="ACCOUNTS_PAYABLE"/>
        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="debitEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="debitEntry.glAccountTypeId" value="paymentGlAccountTypeMap.glAccountTypeId"/>
        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <if-not-empty field="paymentApplication.overrideGlAccountId">
            <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
         </if-not-empty>

        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="paymentApplication.invoiceId"/>
        <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdTo"/>
        <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>

    </simple-method>

    <!--service to create AcctgTransAndEntries For Payment Application-->
    <simple-method method-name="createAcctgTransAndEntriesForPaymentApplication" short-description="create AcctgTransAndEntries For PaymentApplication">
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
        <entity-one entity-name="PaymentApplication" value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <get-related-one value-field="paymentApplication" relation-name="Payment" to-value-field="payment"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with the payment -->
        <if-compare field="payment.statusId" operator="equals" value="PMNT_NOT_PAID">
            <return/>
        </if-compare>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isReceipt" ret-field="isReceipt">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <!-- if the payment Credited account is already "accounts receivable" then don't do nothing -->
            <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdTo"/>
            </entity-one>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE">
                <return/>
            </if-compare>

	        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
            <!--Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.organizationPartyId" from-field="payment.partyIdTo"/>
            <set field="debitEntry.partyId" from-field="payment.partyIdFrom"/>
            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="debitEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
            <set field="debitEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="payment.partyIdTo"/>
            <set field="creditEntry.partyId" from-field="payment.partyIdFrom"/>
            <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <else>
            <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
            <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
            </entity-one>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_PAYABLE">
                <return/>
            </if-compare>

	        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
            <!--Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
            <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="creditEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
            <set field="creditEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
            <!-- Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
            <set field="debitEntry.partyId" from-field="payment.partyIdTo"/>
            <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
            <if-not-empty field="paymentApplication.overrideGlAccountId">
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
            <else>
                <if-not-empty field="paymentApplication.taxAuthGeoId">
                    <entity-one entity-name="TaxAuthorityGlAccount" value-field="taxAuthorityGlAccount">
                        <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
                        <field-map field-name="taxAuthGeoId" from-field="paymentApplication.taxAuthGeoId"/>
                        <field-map field-name="taxAuthPartyId" from-field="payment.partyIdTo"/>
                    </entity-one>
                    <set field="debitEntry.glAccountId" from-field="taxAuthorityGlAccount.glAccountId"/>
                </if-not-empty>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="paymentApplication.invoiceId"/>
        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <else>
                <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdTo"/>
                <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            </else>
        </if-compare>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!--service to create AcctgTransAndEntries For Payrol Payment Application-->
    <simple-method method-name="createAcctgTransAndEntriesForPayrolPaymentApplication" short-description="create AcctgTransAndEntries For Payrol PaymentApplication">
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

        <entity-one entity-name="PaymentApplication" value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <get-related-one value-field="paymentApplication" relation-name="Payment" to-value-field="payment"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with the payment -->
        <if-compare field="payment.statusId" operator="equals" value="PMNT_NOT_PAID">
            <return/>
        </if-compare>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isReceipt" ret-field="isReceipt">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <!-- if the payment Credited account is already "accounts receivable" then don't do nothing -->
            <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdTo"/>
            </entity-one>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE">
                <return/>
            </if-compare>

            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
            <!--Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.organizationPartyId" from-field="payment.partyIdTo"/>
            <set field="debitEntry.partyId" from-field="payment.partyIdFrom"/>
            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="debitEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="debitEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
<!--             <log message="VietTB Debit2 ${debitEntry}" level="info"/> -->
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="payment.partyIdTo"/>
            <set field="creditEntry.partyId" from-field="payment.partyIdFrom"/>
            <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
<!--             <log message="VietTB Credit2 ${creditEntry}" level="info"/> -->
        <else>
            <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
            <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
            </entity-one>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="EMPLOYEE_PAYABLE">
                <return/>
            </if-compare>

            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
			<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>
            <!--Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
            <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="creditEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
            <set field="creditEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
<!--             <log message="VietTB Credit3 ${creditEntry}" level="info"/> -->
            <!-- Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
            <set field="debitEntry.partyId" from-field="payment.partyIdTo"/>
            <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
            <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
            <set field="debitEntry.glAccountTypeId" value="EMPLOYEE_PAYABLE"/>
            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
            <if-not-empty field="paymentApplication.overrideGlAccountId">
                <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
            <else>
                <if-not-empty field="paymentApplication.taxAuthGeoId">
                    <entity-one entity-name="TaxAuthorityGlAccount" value-field="taxAuthorityGlAccount">
                        <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
                        <field-map field-name="taxAuthGeoId" from-field="paymentApplication.taxAuthGeoId"/>
                        <field-map field-name="taxAuthPartyId" from-field="payment.partyIdTo"/>
                    </entity-one>
                    <set field="debitEntry.glAccountId" from-field="taxAuthorityGlAccount.glAccountId"/>
                </if-not-empty>
            </else>
            </if-not-empty>
<!--             <log message="VietTB Debit3 ${debitEntry}" level="info"/> -->
        </else>
        </if-compare>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="paymentApplication.invoiceId"/>
        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <else>
                <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdTo"/>
                <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            </else>
        </if-compare>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>


    <!--service to create AcctgTransAndEntries For Receipt Money From Employee POS-->
    <simple-method method-name="createAcctgTransForReceiptMoneyFromEmployee" short-description="Create an accounting transaction for Receipt Money From Employee POS (Type: OTHER_INCOME C: , C: OTHER_EXPENSE)">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="reciprocalItemSeqId" value="0" type="Long"/>
        <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>
	    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
		<set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

	    <entity-one entity-name="PaymentMethod" value-field="paymentMethod" auto-field-map="false">
	    	<field-map field-name="paymentMethodId" from-field="parameters.paymentMethodId"/>
	    </entity-one>

        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountId" from-field="paymentMethod.glAccountId"/>
<!--         <set field="debitEntry.glAccountTypeId" value="SCBBANK_VND"/> -->
        <set field="debitEntry.organizationPartyId" from-field="parameters.ownerPartyId"/>
        <set field="debitEntry.origAmount" from-field="parameters.differentAmount"/>
        <set field="debitEntry.origCurrencyUomId" from-field="parameters.currencyUomId"/>
        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" from-field="parameters.glAccountTypeId"/>
        <set field="creditEntry.organizationPartyId" from-field="parameters.ownerPartyId"/>
        <set field="creditEntry.origAmount" from-field="parameters.differentAmount"/>
        <set field="creditEntry.origCurrencyUomId" from-field="parameters.currencyUomId"/>
        <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="REC_CLT_EMP"/>
        <set field="createAcctgTransAndEntriesInMap.posTerminalStateId" from-field="parameters.posTerminalStateId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!-- Party GlAccount services -->
     <simple-method method-name="createPartyGlAccount" short-description="Associate a party to a General Ledger Account">
        <make-value entity-name="PartyGlAccount" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="updatePartyGlAccount" short-description="Update an existing General Ledger Account of a Party">
        <entity-one entity-name="PartyGlAccount" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>

    <simple-method method-name="deletePartyGlAccount" short-description="Delete an existing General Ledger Account of a Party">
        <entity-one entity-name="PartyGlAccount" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- Entity Specific Inline Methods -->
    <simple-method method-name="getVarianceReasonGlAccountInline" short-description="Gets VarianceReasonGlAccount on the basis of primary key">
        <entity-one entity-name="VarianceReasonGlAccount" value-field="varianceReasonGlAccount">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="varianceReasonId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getPartyGlAccountInline" short-description="Gets PartyGlAccount on the basis of primary key" >
        <entity-one entity-name="PartyGlAccount" value-field="partyGlAccount">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="roleTypeId" from-field="parameters.roleTypeId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getCreditCardTypeGlAccountInline" short-description="Gets CreditCardTypeGlAccount on the basis of primary key" >
        <entity-one entity-name="CreditCardTypeGlAccount" value-field="creditCardTypeGlAccount">
            <field-map field-name="cardType" from-field="creditCard.cardType"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getPaymentMethodTypeGlAccountInline" short-description="Gets PaymentMethodTypeGlAccount on the basis of primary key" >
        <entity-one entity-name="PaymentMethodTypeGlAccount" value-field="paymentMethodTypeGlAccount">
            <field-map field-name="paymentMethodTypeId" from-field="payment.paymentMethodTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getProductGlAccountInline" short-description="Gets ProductGlAccount on the basis of primary key" >
        <entity-one entity-name="ProductGlAccount" value-field="productGlAccount" use-cache="true"/>
    </simple-method>

    <simple-method method-name="getProductCategoryGlAccountInline" short-description="Gets ProductCategoryGlAccount on the basis of primary key" >
        <entity-one entity-name="ProductCategoryGlAccount" value-field="productCategoryGlAccount">
            <field-map field-name="productCategoryId" from-field="productCategoryMember.productCategoryId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getInvoiceItemTypeGlAccountInline" short-description="Gets InvoiceItemTypeGlAccount on the basis of primary key" >
        <entity-one entity-name="InvoiceItemTypeGlAccount" value-field="invoiceItemTypeGlAccount">
            <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getGlAccountTypeDefaultInline" short-description="Gets GlAccountTypeDefault on the basis of primary key" >
        <entity-one entity-name="GlAccountTypeDefault" value-field="lookedUpValue" use-cache="true">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getReceiptMoneyEmployeeGlAccountInline" short-description="Gets ReceiptMoneyEmployeeGlAccount on the basis of primary key">
        <entity-one entity-name="ReceiptMoneyEmployeeGlAccount" value-field="receiptMoneyEmployeeGlAccount">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="receiptMonEmpId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method method-name="getPaymentMethodTypeGlAccountEmployeeInline" short-description="Gets PaymentMethodTypeGlAccount on the basis of primary key" >
        <entity-one entity-name="PaymentMethodTypeGlAccount" value-field="paymentMethodTypeGlAccount">
            <field-map field-name="paymentMethodTypeId" from-field="parameters.glAccountTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>
    <simple-method method-name="createGlAcctCatMemFromCostCenters" short-description="Create GlAccountCategroyMember from CostCenters">
        <set field="glAccountId" from-field="parameters.glAccountId"/>
        <set field="glAccountCategoryId" from-field="parameters.glAccountCategoryId"/>
        <set field="amountPercentage" from-field="parameters.amountPercentage" type="BigDecimal"/>
        <set field="totalAmountPercentage" from-field="parameters.totalAmountPercentage" type="BigDecimal"/>
        <entity-and entity-name="GlAccountCategoryMember" list="glAccountCategoryMemberList" filter-by-date="true">
            <field-map field-name="glAccountId" from-field="glAccountId"/>
            <field-map field-name="glAccountCategoryId" from-field="glAccountCategoryId"/>
        </entity-and>
        <first-from-list list="glAccountCategoryMemberList" entry="glAccountCategoryMember"/>
        <if-compare field="totalAmountPercentage" operator="equals" value="100" type="BigDecimal">
            <if-empty field="glAccountCategoryMember">
                <set field="createGlAccountCategoryMemberMap.amountPercentage" from-field="amountPercentage" type="BigDecimal"/>
                <set field="createGlAccountCategoryMemberMap.glAccountCategoryId" from-field="glAccountCategoryId"/>
                <set field="createGlAccountCategoryMemberMap.glAccountId" from-field="glAccountId"/>
                <now-timestamp field="createGlAccountCategoryMemberMap.fromDate"/>
                <call-service service-name="createGlAccountCategoryMember" in-map-name="createGlAccountCategoryMemberMap"/>
                <!--<log level="info" message="GlAccountCategoryMember created for [${glAccountCategoryId}] and [${glAccountId}]"/>-->
            <else>
                <set-service-fields service-name="updateGlAccountCategoryMember" to-map="updateGlAccountCategoryMemberMap" map="glAccountCategoryMember"/>
                <set field="updateGlAccountCategoryMemberMap.amountPercentage" from-field="amountPercentage" type="BigDecimal"/>
                <call-service service-name="updateGlAccountCategoryMember" in-map-name="updateGlAccountCategoryMemberMap"/>
            </else>
            </if-empty>
        <else>
           <if-compare field="totalAmountPercentage" operator="equals" value="0" type="BigDecimal">
                <if-not-empty field="glAccountCategoryMember">
                    <now-timestamp field="glAccountCategoryMember.thruDate"/>
                    <store-value value-field="glAccountCategoryMember"/>
                    <!--<log level="info" message="GlAccountCategoryMember expired for [${glAccountCategoryId}] and [${glAccountId}]"/>-->
                </if-not-empty>
            <else>
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingTotalAmountPercentageIsNotEqualOneHundred"/>
                </add-error>
                <check-errors/>
            </else>
            </if-compare>
        </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="updateGlAccountCategoryMember" short-description="Update GL Account Category Member">
        <if-not-empty field="parameters.amountPercentage">
            <entity-one entity-name="GlAccountCategoryMember" value-field="lookedUpValue" use-cache="false"/>

            <if-not-empty field="lookedUpValue">
            	<if-compare-field field="lookedUpValue.amountPercentage" operator="not-equals" to-field="parameters.amountPercentage" type="BigDecimal">
	                <clone-value value-field="lookedUpValue" new-value-field="newLookedUpValue"/>
	                <now-timestamp field="lookedUpValue.thruDate"/>
	                <store-value value-field="lookedUpValue"/>

	                <set field="newLookedUpValue.amountPercentage" from-field="parameters.amountPercentage" type="BigDecimal"/>
	                <now-timestamp field="newLookedUpValue.fromDate"/>
	                <create-value value-field="newLookedUpValue"/>
	                <!--<log level="info" message="GlAccountCategoryMember updated for [${parameters.glAccountCategoryId}] and [${parameters.glAccountId}]"/>-->
	            </if-compare-field>
            </if-not-empty>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getGlAcctgOrgWithPostedBalanceSplit" short-description="Posted amounts split by cost center from GlAccountOrganization">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <now-timestamp field="nowTimestamp"/>
        <set field="fromDate" from-field="parameters.fromDate" type="Timestamp"/>
        <set field="thruDate" from-field="parameters.thruDate" type="Timestamp" default-value="${nowTimestamp}"/>
        <if-empty field="fromDate">
            <entity-one entity-name="CustomTimePeriod" value-field="customTimePeriod" auto-field-map="false">
                <field-map field-name="customTimePeriodId" from-field="parameters.timePeriod"/>
            </entity-one>
            <set field="fromDate" from-field="customTimePeriod.fromDate" type="Timestamp"/>
            <set field="thruDate" from-field="customTimePeriod.thruDate" type="Timestamp"/>
        </if-empty>
        <set field="organizationPartyId" from-field="parameters.organizationPartyId"/>
        <set field="partyIds" value="${groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')}" type="List"/>
        <set field="partyIds[]" from-field="organizationPartyId"/>
        <entity-condition entity-name="GlAccountOrganization" list="glAccountOrganizations" use-cache="true">
            <condition-list>
                <condition-expr field-name="organizationPartyId" operator="in" from-field="partyIds"/>
                <condition-expr field-name="postedBalance" operator="not-equals" value=""/>
                <condition-expr field-name="fromDate" operator="greater-equals" from-field="fromDate"/>
                <condition-expr field-name="fromDate" operator="less" from-field="thruDate"/>
            </condition-list>
            <order-by field-name="glAccountId"/>
        </entity-condition>
        <if-not-empty field="glAccountOrganizations">
            <entity-and entity-name="GlAccountCategory" list="glAccountCategories" use-cache="true">
                <field-map field-name="glAccountCategoryTypeId" value="COST_CENTER"/>
                <order-by field-name="glAccountCategoryId"/>
            </entity-and>
            <if-not-empty field="glAccountCategories">
                <iterate list="glAccountOrganizations" entry="glAccountOrganization">
                    <clear-field field="glAcctgOrgAndCostCenterMap"/>
                    <set field="postedBalance" from-field="glAccountOrganization.postedBalance" type="BigDecimal"/>
                    <if-compare field="postedBalance" operator="less" value="0" type="BigDecimal">
                        <set field="postedBalance" value="${groovy:postedBalance.negate()}" type="BigDecimal"/>
                    </if-compare>
                    <set field="glAcctgOrgAndCostCenterMap.postedBalance" from-field="postedBalance"/>
                    <entity-one entity-name="GlAccount" value-field="glAccount" auto-field-map="false">
                        <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                    </entity-one>
                    <set field="glAcctgOrgAndCostCenterMap.glAccountId" from-field="glAccount.glAccountId"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountCode" from-field="glAccount.accountCode"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountName" from-field="glAccount.accountName"/>
                    <iterate list="glAccountCategories" entry="glAccountCategory">
                        <entity-and entity-name="GlAccountCategoryMember" list="glAccountCategoryMembers" filter-by-date="true">
                            <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                            <field-map field-name="glAccountCategoryId" from-field="glAccountCategory.glAccountCategoryId"/>
                        </entity-and>
                        <if-not-empty field="glAccountCategoryMembers">
                            <first-from-list list="glAccountCategoryMembers" entry="glAccountCategoryMember"/>
                            <if-not-empty field="glAccountCategoryMember">
                                <set field="divisor" value="100" type="BigDecimal"/>
                                <set field="splitAmount" value="${groovy:postedBalance.multiply(glAccountCategoryMember.amountPercentage).divide(divisor, Integer.valueOf(ledgerDecimals), BigDecimal.ROUND_HALF_UP)}" type="BigDecimal"/>
                                <set field="glAcctgOrgAndCostCenterMap[glAccountCategory.glAccountCategoryId]" from-field="splitAmount" type="BigDecimal"/>
                            </if-not-empty>
                        </if-not-empty>
                    </iterate>
                    <field-to-list field="glAcctgOrgAndCostCenterMap" list="glAcctgOrgAndCostCenterList"/>
                </iterate>
            </if-not-empty>
            <field-to-result field="glAcctgOrgAndCostCenterList"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getGlAcctgAndAmountPercentage" short-description="Get amount percentage and glAccount for cost center">
        <set field="glAcctgAndAmountPercentageList" type="List" from-field="nullfield"/>
        <set field="organizationPartyId" from-field="parameters.organizationPartyId"/>
        <set field="partyIds" value="${groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')}" type="List"/>
        <set field="partyIds[]" from-field="organizationPartyId"/>
        <log message="nam : ${partyIds}" level="info"/>
        <entity-condition entity-name="GlAccountOrganization" list="glAccountOrganizations" use-cache="true">
            <condition-expr field-name="organizationPartyId" operator="in" from-field="partyIds"/>
            <order-by field-name="glAccountId"/>
        </entity-condition>
        <if-not-empty field="glAccountOrganizations">
            <entity-and entity-name="GlAccountCategory" list="glAccountCategories" use-cache="true">
                <field-map field-name="glAccountCategoryTypeId" value="COST_CENTER"/>
                <order-by field-name="glAccountCategoryId"/>
            </entity-and>
            <if-not-empty field="glAccountCategories">
                <iterate list="glAccountOrganizations" entry="glAccountOrganization">
                    <iterate list="glAccountCategories" entry="glAccountCategory">
                        <entity-one entity-name="PartyGroup" value-field="organizationParty">
                            <field-map field-name="partyId" from-field="glAccountOrganization.organizationPartyId"/>
                        </entity-one>
                        <entity-and entity-name="GlAccountCategoryMember" list="glAccountCategoryMembers" filter-by-date="true">
                             <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                             <field-map field-name="glAccountCategoryId" from-field="glAccountCategory.glAccountCategoryId"/>
                        </entity-and>
                        <if-not-empty field="glAccountCategoryMembers">
                            <first-from-list list="glAccountCategoryMembers" entry="glAccountCategoryMember"/>
                            <set field="glAcctgOrgAndCostCenterMap[glAccountCategory.glAccountCategoryId]" from-field="glAccountCategoryMember.amountPercentage" type="BigDecimal"/>
                            <get-related-one value-field="glAccountCategoryMember" relation-name="GlAccount" to-value-field="glAccount" />
                            <set field="glAcctgOrgAndCostCenterMap.organizationPartyId" value="${organizationParty.groupName} [${glAccountOrganization.organizationPartyId}]"/>
                            <set field="glAcctgOrgAndCostCenterMap.glAccountId" from-field="glAccount.glAccountId"/>
                            <set field="glAcctgOrgAndCostCenterMap.accountCode" from-field="glAccount.accountCode"/>
                            <set field="glAcctgOrgAndCostCenterMap.accountName" from-field="glAccount.accountName"/>
                        </if-not-empty>
                    </iterate>
                    <field-to-list field="glAcctgOrgAndCostCenterMap" list="glAcctgAndAmountPercentageList"/>
                    <clear-field field="glAcctgOrgAndCostCenterMap"/>
                </iterate>
                <field-to-result field="glAccountCategories"/>
            </if-not-empty>
            <field-to-result field="glAcctgAndAmountPercentageList"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getInventoryValuationList" short-description="Retrieves list for Inventory Valuation Report">
        <entity-condition entity-name="ProductInventoryItem" list="productInventoryItems">
            <condition-list combine="and">
                <condition-expr field-name="productId" from-field="parameters.productId" ignore-if-empty="true"/>
                <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true"/>
                <condition-expr field-name="primaryProductCategoryId" from-field="parameters.productCategoryId" ignore-if-empty="true"/>
                <condition-expr field-name="datetimeReceived" operator="greater-equals" from-field="parameters.fromDate" ignore-if-empty="true"/>
                <condition-expr field-name="datetimeReceived" operator="less-equals" from-field="parameters.thruDate" ignore-if-empty="true"/>
            </condition-list>
            <order-by field-name="productId"/>
        </entity-condition>
        <if-not-empty field="productInventoryItems">
            <set field="productIds" value="${groovy:org.ofbiz.entity.util.EntityUtil.getFieldListFromEntityList(productInventoryItems, 'productId', true);}" type="List"/>
            <iterate list="productIds" entry="productId">
                <set field="totalQuantityOnHand" type="BigDecimal" value="0"/>
                <set field="totalInventoryCost" type="BigDecimal" value="0"/>
                <set field="productAverageCost" type="BigDecimal" value="0"/>
                <iterate list="productInventoryItems" entry="productInventoryItem">
                    <if-compare-field field="productId" operator="equals" to-field="productInventoryItem.productId">
                        <if-compare field="parameters.cogsMethodId" operator="equals" value="COGS_AVG_COST">
                            <entity-one entity-name="InventoryItem" value-field="inventoryItem" auto-field-map="false">
                                <field-map field-name="inventoryItemId" from-field="productInventoryItem.inventoryItemId"/>
                            </entity-one>
                            <set field="getProdAvgCostMap.inventoryItem" from-field="inventoryItem"/>
                            <call-service service-name="getProductAverageCost" in-map-name="getProdAvgCostMap">
                                <result-to-field result-name="unitCost" field="productAverageCost"/>
                            </call-service>
                        </if-compare>
                        <set field="totalQuantityOnHand" value="${totalQuantityOnHand + productInventoryItem.quantityOnHandTotal}" type="BigDecimal"/>
                        <set field="currencyUomId" from-field="productInventoryItem.currencyUomId"/>
                        <set field="totalInventoryCost" value="${totalInventoryCost + (productInventoryItem.quantityOnHandTotal * productAverageCost)}" type="BigDecimal"/>
                    </if-compare-field>
                </iterate>
                <set field="inventoryValuation.productId" from-field="productId"/>
                <set field="inventoryValuation.totalQuantityOnHand" from-field="totalQuantityOnHand" type="BigDecimal"/>
                <set field="inventoryValuation.totalInventoryCost" from-field="totalInventoryCost" type="BigDecimal"/>
                <set field="inventoryValuation.productAverageCost" from-field="productAverageCost" type="BigDecimal"/>
                <set field="inventoryValuation.currencyUomId" from-field="currencyUomId"/>
                <set field="inventoryValuationList[]" from-field="inventoryValuation"/>
                <clear-field field="inventoryValuation"/>
            </iterate>
            <field-to-result field="inventoryValuationList"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getGlArithmeticSettingsInline" short-description="getGlArithmeticSettingsInline">
        <property-to-field resource="arithmetic" property="ledger.decimals" field="ledgerDecimals" default="4"/>
        <property-to-field resource="arithmetic" property="ledger.rounding" field="roundingMode" default="HalfUp"/>
        <log level="info" message="Got settings from arithmetic.properties: ledgerDecimals=${ledgerDecimals}, roundingMode=${roundingMode}"/>
    </simple-method>

    <simple-method method-name="setGlReconciliationStatus" short-description="Set Gl Reconciliation status">
        <entity-one entity-name="GlReconciliation" value-field="glReconciliation"/>
        <field-to-result field="glReconciliation.statusId" result-name="oldStatusId"/>
        <if-compare-field field="glReconciliation.statusId" operator="not-equals" to-field="parameters.statusId">
            <entity-one entity-name="StatusValidChange" value-field="statusChange" auto-field-map="false">
                <field-map field-name="statusId" from-field="glReconciliation.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingPSInvalidStatusChange"/>
                </add-error>
                <log level="error" message="Cannot change from ${glReconciliation.statusId} to ${parameters.statusId}"/>
                <check-errors/>
            <else>
                <set field="glReconciliation.statusId" from-field="parameters.statusId"/>
                <store-value value-field="glReconciliation"/>
            </else>
            </if-empty>
        </if-compare-field>
    </simple-method>

    <simple-method method-name="updateConfiguarationNumber" short-description="Update a Configuration Number">
<!--     	<log message="VIETTB 111 ${parameters}" level="info"/> -->
        <entity-one entity-name="ConfigurationNumber" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- Service for the automatic creation of accounting transaction for commission Invoice -->
    <simple-method method-name="createAcctgTransForCommissionInvoice" short-description="Create an accounting transaction for a Commission invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <set field="glAccountTypeId" type="String" value="ACCOUNTS_PAYABLE"/>
        <if-not-empty field="invoice.glAccountTypeId">
            <set field="glAccountTypeId" from-field="invoice.glAccountTypeId"/>
        </if-not-empty>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if-compare field="invoice.invoiceTypeId" operator="equals" value="COMMISSION_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PINV_SALES_TAX"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-equals" value="PITM_SALES_TAX"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
                <order-by field-name="amount"/>
            </entity-condition>

            <set field="removeInvoiceItemSeqId" value="" />
            <set field="reciprocalItemSeqId" value="0" type="Long"/>
            <set field="reciprocalItemSeqDigit" value="5" type="Integer"/>

            <iterate list="invoiceItems" entry="invoiceItem">
                <if>
                    <condition>
                        <and>
                            <if-compare operator="less" value="0" field="invoiceItem.amount" type="BigDecimal"/>
                            <not>
                                <if-empty field="invoiceItem.parentInvoiceItemSeqId" />
                            </not>
                        </and>
                    </condition>
                    <then>
                        <set field="amountFromOrder" type="BigDecimal" value="0"/>
                        <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                        <set field="quantity" type="BigDecimal" value="1"/>
                        <if-not-empty field="invoiceItem.quantity">
                            <set field="quantity" from-field="invoiceItem.quantity"/>
                        </if-not-empty>

                        <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="quantity"/>
                                <calcop operator="get" field="invoiceItem.amount"/>
                            </calcop>
                        </calculate>
                        <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                        <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                        <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                        <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                        <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                        <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                        <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                        <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                        <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                        <list-to-list to-list="invoiceItemsList" list="invoiceItems"/>
                        <set field="andMap.invoiceItemSeqId" from-field="invoiceItem.parentInvoiceItemSeqId"/>
                        <filter-list-by-and list="invoiceItemsList" map="andMap"/>
                        <first-from-list list="invoiceItemsList" entry="invoiceItemEntry"/>

                        <set field="quantity" type="BigDecimal" value="1"/>
                        <if-not-empty field="invoiceItemEntry.quantity">
                            <set field="quantity" from-field="invoiceItemEntry.quantity"/>
                        </if-not-empty>

                        <calculate field="origAmountEntry" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="multiply">
                                <calcop operator="get" field="quantity"/>
                                <calcop operator="get" field="invoiceItemEntry.amount"/>
                            </calcop>
                        </calculate>

                        <if-compare field="origAmountEntry" operator="less" value="0">
                            <calculate field="absOrigAmountEntry"><calcop operator="negative" field="origAmountEntry"/></calculate>
                        </if-compare>

                        <if-compare field="amountFromInvoice" operator="less" value="0">
                            <calculate field="absAmountFromInvoice"><calcop operator="negative" field="amountFromInvoice"/></calculate>
                        </if-compare>

                        <if-compare-field to-field="absOrigAmountEntry" operator="equals" field="absAmountFromInvoice">
                            <set field="removeInvoiceItemSeqId" value="${removeInvoiceItemSeqId};${invoiceItem.parentInvoiceItemSeqId}"/>
                            <clear-field field="debitEntry"/>
                            <set field="debitEntry.debitCreditFlag" value="D"/>
                            <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                            <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                            <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                            <set field="debitEntry.productId" from-field="invoiceItemEntry.productId"/>
                            <set field="debitEntry.glAccountTypeId" from-field="invoiceItemEntry.invoiceItemTypeId"/>
                            <set field="debitEntry.glAccountId" from-field="invoiceItemEntry.overrideGlAccountId"/>
                            <set field="debitEntry.origAmount" from-field="origAmountEntry"/>
                            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemEntry.invoiceItemSeqId"/>
                            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                            <else>
                                <clear-field field="creditEntry"/>
                                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                                <set field="creditEntry.debitCreditFlag" value="C"/>
                                <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
                                <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
                                <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
                                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                                <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
                                <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
                                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                            </else>
                        </if-compare-field>
                    </then>
                    <else>
                        <if>
                            <condition>
                                <not>
                                    <if-compare-field operator="contains" field="removeInvoiceItemSeqId" to-field="invoiceItem.invoiceItemSeqId" />
                                </not>
                            </condition>
                            <then>
                                <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                                <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                                <set field="quantity" type="BigDecimal" value="1"/>
                                <if-not-empty field="invoiceItem.quantity">
                                    <set field="quantity" from-field="invoiceItem.quantity"/>
                                </if-not-empty>

                                <calculate field="amountFromInvoice"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                                    <calcop operator="multiply">
                                        <calcop operator="get" field="quantity"/>
                                        <calcop operator="get" field="invoiceItem.amount"/>
                                    </calcop>
                                </calculate>

                                <clear-field field="debitEntry"/>
                                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                                <set field="debitEntry.debitCreditFlag" value="D"/>
                                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
                                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                                <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                                <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                                <clear-field field="creditEntry"/>
                                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                                <set field="creditEntry.debitCreditFlag" value="C"/>
                                <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
                                <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
                                <set field="creditEntry.origAmount" from-field="amountFromInvoice"/>
                                <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                                <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
                                <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                                <set field="creditEntry.productId" from-field="invoiceItem.productId"/>
                                <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                                <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                                <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                            </then>
                        </if>
                    </else>
                </if>
            </iterate>
            <!-- debit entry for SALES_TAX-->
            <call-class-method method-name="getInvoiceTaxAuthPartyAndGeos" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                               ret-field="taxAuthPartyAndGeos">
                <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
            </call-class-method>

            <iterate-map key="taxAuthPartyId" value="taxAuthGeoIds" map="taxAuthPartyAndGeos">
                <iterate entry="taxAuthGeoId" list="taxAuthGeoIds">
                    <call-class-method method-name="getInvoiceItemTaxAuthPartyAndGeos" class-name="com.olbius.accounting.invoice.InvoiceWorker"
                                       ret-field="invoiceItemTaxAuthPartyAndGeos">
                        <field field="invoice" type="org.ofbiz.entity.GenericValue"/>
                        <field field="taxAuthPartyId" type="String"/>
                        <field field="taxAuthGeoId" type="String"/>
                    </call-class-method>
                    <clear-field field="debitEntry"/>
                    <if-not-empty field="invoiceItemTaxAuthPartyAndGeos">
                        <iterate entry="invoiceItemTax" list="invoiceItemTaxAuthPartyAndGeos">
                            <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                            <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                            <set field="debitEntry.debitCreditFlag" value="D"/>
                            <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>

                            <set field="quantity" type="BigDecimal" value="1"/>
                            <if-not-empty field="invoiceItemTax.quantity">
                                <set field="quantity" from-field="invoiceItemTax.quantity"/>
                            </if-not-empty>

                            <set field="amount" type="BigDecimal" value="0"/>
                            <if-not-empty field="invoiceItemTax.amount">
                                <set field="amount" from-field="invoiceItemTax.amount"/>
                            </if-not-empty>

                            <calculate field="taxAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                                <calcop operator="multiply">
                                    <calcop operator="get" field="quantity"/>
                                    <calcop operator="get" field="amount"/>
                                </calcop>
                            </calculate>

                            <set field="debitEntry.origAmount" from-field="taxAmount"/>
                            <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                            <set field="debitEntry.partyId" from-field="taxAuthPartyId"/>
                            <set field="debitEntry.roleTypeId" value="TAX_AUTHORITY"/>

                            <clear-field field="taxAuthorityRateType"/>
                            <entity-one entity-name="TaxAuthorityRateProduct" value-field="taxAuthorityRateType">
                                <field-map field-name="taxAuthorityRateSeqId" from-field="invoiceItemTax.taxAuthorityRateSeqId"/>
                            </entity-one>

                            <entity-one entity-name="Product" value-field="productType">
                                <field-map field-name="productId" from-field="invoiceItemTax.productId"/>
                            </entity-one>

                            <clear-field field="taxAuthorityRateTypeGlAccount"/>
                            <entity-one entity-name="TaxAuthorityRateTypeGlAccount" value-field="taxAuthorityRateTypeGlAccount">
                                <field-map field-name="taxAuthorityRateTypeId" from-field="taxAuthorityRateType.taxAuthorityRateTypeId"/>
                                <field-map field-name="organizationPartyId" from-field="debitEntry.organizationPartyId"/>
                                <field-map field-name="invoiceTypeId" from-field="invoiceType.parentTypeId"/>
                                <field-map field-name="productTypeId" from-field="productType.productTypeId"/>
                            </entity-one>

                            <if-not-empty field="taxAuthorityRateTypeGlAccount">
                                <set field="debitEntry.glAccountId" from-field="taxAuthorityRateTypeGlAccount.glAccountId"/>
                                <else>
                                    <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                                </else>
                            </if-not-empty>
                            <set field="debitEntry.productId" from-field="invoiceItemTax.productId"/>
                            <set field="debitEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
                            <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                            <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                            <clear-field field="creditEntry"/>
                            <set field="creditEntry.debitCreditFlag" value="C"/>
                            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
                            <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
                            <set field="creditEntry.origAmount" from-field="taxAmount"/>
                            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
                            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                            <set field="creditEntry.productId" from-field="invoiceItemTax.productId"/>
                            <set field="creditEntry.invoiceItemSeqId" from-field="invoiceItemTax.invoiceItemSeqId"/>
                            <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                        </iterate>
                    </if-not-empty>
                </iterate>
            </iterate-map>
            <!-- Another entry for tax not attributed to a taxAuthPartyId -->
            <call-class-method method-name="getInvoiceUnattributedTaxTotal" class-name="org.ofbiz.accounting.invoice.InvoiceWorker"
                               ret-field="taxAmount">
                <field field="invoice" type="GenericValue"/>
            </call-class-method>
            <if>
                <condition>
                    <and>
                        <if-compare field="taxAmount" operator="greater" value="0" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
                    <set field="reciprocalItemSeqId" value="${reciprocalItemSeqId + 1}" type="Long"/>
                    <set field="formatPadded" value="${groovy:org.ofbiz.base.util.UtilFormatOut.formatPaddedNumber(reciprocalItemSeqId, reciprocalItemSeqDigit)}"/>

                    <clear-field field="debitEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                    <set field="debitEntry.origAmount" from-field="taxAmount"/>
                    <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                    <set field="debitEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>

                    <clear-field field="creditEntry"/>
                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
                    <set field="creditEntry.glAccountTypeId" from-field="glAccountTypeId"/>
                    <set field="creditEntry.origAmount" from-field="taxAmount"/>
                    <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                    <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
                    <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                    <set field="creditEntry.reciprocalSeqId" from-field="formatPadded"/>
                    <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
                </then>
            </if>
            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="COMMISSION_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
            <!--<log level="info" message="ThaiNT acctgTransEntries = ${acctgTransEntries}"/>-->
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>
</simple-methods>
