<?xml version="1.0" encoding="UTF-8"?>
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
	<simple-method method-name="createProductPromoCustom">
		<make-value value-field="newEntity" entity-name="ProductPromo" />
		<if-empty field="parameters.statusId">
			<set field="parameters.statusId" value="PROMO_CREATED" />
		</if-empty>
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<set field="newEntity.productPromoId" from-field="parameters.productPromoId" />
		<if-empty field="newEntity.productPromoId">
			<sequenced-id sequence-name="ProductPromo" field="newEntity.productPromoId" />
			<else>
				<check-id field="newEntity.productPromoId" />
				<check-errors />
				<entity-one value-field="dummyProductPromo" entity-name="ProductPromo">
					<field-map field-name="productPromoId" from-field="parameters.productPromoId" />
				</entity-one>
				<if-not-empty field="dummyProductPromo">
					<add-error>
						<fail-property resource="CommonErrorUiLabels"
							property="CommonErrorDublicateKey" />
					</add-error>
				</if-not-empty>
				<check-errors />
			</else>
		</if-empty>

		<set field="productPromoId" from-field="newEntity.productPromoId" />
		<if-empty field="newEntity.userEntered">
			<set value="Y" set-if-empty="true" field="newEntity.userEntered" />
		</if-empty>

		<now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="newEntity.createdDate" />
		<set from-field="nowTimestamp" field="newEntity.lastModifiedDate" />
		<set from-field="userLogin.userLoginId" field="newEntity.lastModifiedByUserLogin" />
		<set from-field="userLogin.userLoginId" field="newEntity.createdByUserLogin" />
		<create-value value-field="newEntity" />

		<make-value value-field="newPromoStatus" entity-name="ProductPromoStatus" />
		<sequenced-id sequence-name="ProductPromoStatus"
			field="newPromoStatus.promoStatusId" />
		<set field="newPromoStatus.statusId" from-field="newEntity.statusId" />
		<set field="newPromoStatus.productPromoId" from-field="newEntity.productPromoId" />
		<set field="newPromoStatus.statusDatetime" from-field="nowTimestamp" />
		<set field="newPromoStatus.statusUserLogin" from-field="userLogin.userLoginId" />
		<set field="newPromoStatus.changeReason" from-field="parameters.changeReason" />
		<create-value value-field="newPromoStatus" />

		<if-not-empty field="parameters.budgetId">
			<make-value value-field="newPromoBudget" entity-name="ProductPromoBudget" />
			<set field="newPromoBudget.productPromoId" from-field="productPromoId" />
			<set field="newPromoBudget.budgetId" from-field="parameters.budgetId" />
			<set field="newPromoBudget.budgetTypeId" value="PROMO_BUDGET_DIS" />
			<create-value value-field="newPromoBudget" />
		</if-not-empty>

		<if-not-empty field="parameters.miniRevenueId">
			<make-value value-field="newPromoMiniRevenue" entity-name="ProductPromoBudget" />
			<set field="newPromoMiniRevenue.productPromoId" from-field="productPromoId" />
			<set field="newPromoMiniRevenue.budgetId" from-field="parameters.miniRevenueId" />
			<set field="newPromoMiniRevenue.budgetTypeId" value="PROMO_MINI_REVENUE" />
			<create-value value-field="newPromoMiniRevenue" />
		</if-not-empty>

		<if-not-empty field="parameters.supplierIds">
			<iterate entry="supplierId" list="parameters.supplierIds">
				<set field="supplierPromo.partyId" from-field="supplierId" />
				<set field="supplierPromo.productPromoId" from-field="productPromoId" />
				<if-not-empty field="parameters.fromDate">
					<set field="supplierPromo.fromDate" from-field="parameters.fromDate" />
					<else>
						<now-timestamp field="supplierPromo.fromDate" />
					</else>
				</if-not-empty>
				<if-not-empty field="parameters.thruDate">
					<set field="supplierPromo.thruDate" from-field="parameters.thruDate" />
				</if-not-empty>
				<!-- set from date, thru date for promotion -->
				<call-service service-name="createSupplierPromoAppl"
					in-map-name="supplierPromo">
				</call-service>
			</iterate>
		</if-not-empty>
		<field-to-result field="productPromoId" result-name="productPromoId" />
	</simple-method>

	<simple-method method-name="deleteProductPromo"
		short-description="Delete a ProductPromo">
		<check-permission permission="PROMOTION_PO" action="_DELETE">
			<fail-property resource="BaseSalesErrorUiLabels"
				property="BSYouHavenotDeletePermission" />
		</check-permission>
		<check-errors />

		<set from-field="parameters.productPromoId" field="lookupPKMap.productPromoId" />
		<find-by-primary-key entity-name="ProductPromo"
			map="lookupPKMap" value-field="lookedUpValue" />
		<if-empty field="lookedUpValue">
			<set field="productPromoId" value="lookedUpValue.productPromoId" />
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSNotFoundProductPromotionHasProductPromoIdIs" />
			</add-error>
			<check-errors />
		</if-empty>
		<if-compare operator="equals" value="PROMO_CREATED"
			field="lookedUpValue.statusId">
			<!-- TODO: add new record in ProductPromoStatus NOT: delete in condition, 
				action, category, content, product, rule -->
			<now-timestamp field="nowTimestamp" />

			<!-- thru date relationship with product store and product promotion -->
			<entity-condition list="listSupplierPromoAppl"
				entity-name="SupplierPromoAppl">
				<condition-list>
					<condition-expr field-name="productPromoId"
						from-field="lookupPKMap.productPromoId" />
				</condition-list>
			</entity-condition>
			<if-not-empty field="listSupplierPromoAppl">
				<iterate entry="supPromo" list="listSupplierPromoAppl">
					<set field="supPromo.thruDate" from-field="nowTimestamp" />
				</iterate>
				<store-list list="listSupplierPromoAppl" />
			</if-not-empty>
			<!-- service application: deleteProductPromo Change it to: thru date promotion -->
			<set field="lookedUpValue.thruDate" from-field="nowTimestamp" />
			<set field="lookedUpValue.statusId" value="PROMO_CANCELLED" />
			<store-value value-field="lookedUpValue" />

			<make-value value-field="promoStatus" entity-name="ProductPromoStatus" />
			<sequenced-id sequence-name="ProductPromoStatus" field="promoStatus.promoStatusId" />
			<set field="promoStatus.statusId" value="PROMO_CANCELLED" />
			<set field="promoStatus.productPromoId" from-field="lookedUpValue.productPromoId" />
			<set field="promoStatus.statusDatetime" from-field="nowTimestamp" />
			<set field="promoStatus.statusUserLogin" from-field="userLogin.userLoginId" />
			<create-value value-field="promoStatus" />
			<else>
				<add-error>
					<fail-property resource="BaseSalesErrorUiLabels"
						property="BSJustOnlyDeleteProductPromotionWithStatusIsCreated" />
				</add-error>
				<check-errors />
			</else>
		</if-compare>
	</simple-method>

	<simple-method method-name="updateProductPromoThruDate">
		<check-permission permission="PROMOTION_PO" action="_APPROVE">
			<fail-property resource="BaseSalesErrorUiLabels"
				property="BSYouHavenotUpdatePermission" />
		</check-permission>
		<check-errors />

		<if-empty field="parameters.productPromoId">
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSProductPromoIdIsEmpty" />
			</add-error>
		</if-empty>
		<if-empty field="parameters.thruDate">
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSThruDateIsEmpty" />
			</add-error>
		</if-empty>
		<check-errors />

		<field-to-result field="parameters.productPromoId"
			result-name="productPromoId" />
		<entity-one value-field="dummyPromo" entity-name="ProductPromo">
			<field-map field-name="productPromoId" from-field="parameters.productPromoId" />
		</entity-one>
		<if-empty field="dummyPromo">
			<set field="productPromoId" from-field="parameters.productPromoId" />
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSNotFoundProductPromotionHasProductPromoIdIs" />
			</add-error>
		</if-empty>

		<now-timestamp field="nowTimestamp" />
		<set-calendar field="compareDate" from-field="nowTimestamp"
			seconds="-30" />
		<set field="thruDate" from-field="parameters.thruDate" />

		<if-compare-field field="thruDate" operator="less"
			to-field="compareDate" type="Timestamp">
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSRequiredValueGreatherOrEqualDateTimeToDay" />
			</add-error>
		</if-compare-field>
		<set-calendar field="compareDate" from-field="dummyPromo.fromDate" />
		<if-compare-field field="thruDate" operator="less"
			to-field="compareDate" type="Timestamp">
			<add-error>
				<fail-property resource="BaseSalesErrorUiLabels"
					property="BSFinishDateMustGreaterThanOrEqualStartDate" />
			</add-error>
		</if-compare-field>
		<check-errors />

		<set field="dummyPromo.thruDate" from-field="thruDate" />
		<store-value value-field="dummyPromo" />

		<entity-condition list="supplierApplList"
			entity-name="SupplierPromoAppl" filter-by-date="true">
			<condition-expr field-name="productPromoId"
				from-field="parameters.productPromoId" />
		</entity-condition>
		<if-not-empty field="supplierApplList">
			<!-- thru date all product store in promotion -->
			<iterate entry="supApplItem" list="supplierApplList">
				<set field="supApplItem.thruDate" from-field="thruDate" />
			</iterate>
			<store-list list="supplierApplList" />
		</if-not-empty>
	</simple-method>

	<simple-method method-name="changePromoStatus">
		<!-- set status for Promotion, ProductPromoStatus if PROMO_CANCELLED: Change 
			status of ProductStorePromoAppl => if thruDate is NULL or thruDate greater 
			than nowTimestamp => set thruDate for Store -->
		<check-permission permission="PROMOTION_PO" action="_APPROVE">
			<fail-property resource="BaseSalesErrorUiLabels"
				property="BSYouHavenotUpdatePermission" />
		</check-permission>
		<check-errors />
		<if>
			<condition>
				<or>
					<if-compare operator="equals" value="PROMO_CANCELLED"
						field="parameters.statusId"></if-compare>
					<if-compare operator="equals" value="PROMO_ACCEPTED"
						field="parameters.statusId"></if-compare>
				</or>
			</condition>
			<then>
				<now-timestamp field="nowTimestamp" />
				<set from-field="parameters.productPromoId" field="lookupPKMap.productPromoId" />
				<find-by-primary-key value-field="lookedUpValue"
					map="lookupPKMap" entity-name="ProductPromo" />
				<set field="oldStatusId" from-field="lookedUpValue.statusId" />
				<if-compare operator="not-equals" value="PROMO_CREATED"
					field="oldStatusId">
					<add-error>
						<fail-property resource="BaseSalesErrorUiLabels"
							property="BSJustOnlyUpdateProductPromotionWithStatusIsCreated" />
					</add-error>
					<check-errors />
				</if-compare>

				<if-compare operator="equals" value="PROMO_CANCELLED"
					field="parameters.statusId">
					<entity-condition list="supplierApplList"
						entity-name="SupplierPromoAppl" filter-by-date="true">
						<condition-expr field-name="productPromoId"
							from-field="lookupPKMap.productPromoId" />
					</entity-condition>
					<if-not-empty field="supplierApplList">
						<!-- thru date all product store in promotion -->
						<iterate entry="supApplItem" list="supplierApplList">
							<set field="supApplItem.thruDate" from-field="nowTimestamp" />
						</iterate>
						<store-list list="supplierApplList" />
					</if-not-empty>
				</if-compare>

				<set field="lookedUpValue.statusId" from-field="parameters.statusId" />
				<store-value value-field="lookedUpValue" />

				<now-timestamp field="nowTimestamp" />
				<make-value value-field="newPromoStatus" entity-name="ProductPromoStatus" />
				<sequenced-id sequence-name="ProductPromoStatus"
					field="newPromoStatus.promoStatusId" />
				<set field="newPromoStatus.statusId" from-field="lookedUpValue.statusId" />
				<set field="newPromoStatus.productPromoId" from-field="lookedUpValue.productPromoId" />
				<set field="newPromoStatus.statusDatetime" from-field="nowTimestamp" />
				<set field="newPromoStatus.statusUserLogin" from-field="userLogin.userLoginId" />
				<set field="newPromoStatus.changeReason" from-field="parameters.changeReason" />
				<create-value value-field="newPromoStatus" />
			</then>
		</if>
	</simple-method>
</simple-methods>